// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferered library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
(function($) {
var supportsDirectProtoAccess = function() {
  var cls = function() {
  };
  cls.prototype = {p: {}};
  var object = new cls();
  return object.__proto__ && object.__proto__.p === cls.prototype.p;
}();
;
function map(x) {
  x = Object.create(null);
  x.x = 0;
  delete x.x;
  return x;
}
var A = map();
var B = map();
var C = map();
var D = map();
var E = map();
var F = map();
var G = map();
var H = map();
var J = map();
var K = map();
var L = map();
var M = map();
var N = map();
var O = map();
var P = map();
var Q = map();
var R = map();
var S = map();
var T = map();
var U = map();
var V = map();
var W = map();
var X = map();
var Y = map();
var Z = map();
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
$.functionThatReturnsNull = function() {
};
;
function setupProgram(programData) {
  "use strict";
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  function defineClass(name, fields) {
    var accessors = [];
    var str = "function " + name + "(";
    var body = "";
    var fieldNames = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, name);
      fieldNames += "'" + field + "',";
      var parameter = "p_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    if (supportsDirectProtoAccess)
      body += "this." + "$deferredAction" + "();";
    str += ") {\n" + body + "}\n";
    str += name + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + name + "[1];\n";
    str += name + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string")
      str += name + ".name=\"" + name + "\";\n";
    str += name + "." + "$__fields__" + "=[" + fieldNames + "];\n";
    str += accessors.join("");
    return str;
  }
  init.createNewIsolate = function() {
    return new Isolate();
  };
  init.classIdExtractor = function(o) {
    return o.constructor.name;
  };
  init.classFieldsExtractor = function(o) {
    var fieldNames = o.constructor.$__fields__;
    if (!fieldNames)
      return [];
    var result = [];
    result.length = fieldNames.length;
    for (var i = 0; i < fieldNames.length; i++)
      result[i] = o[fieldNames[i]];
    return result;
  };
  init.instanceFromClassId = function(name) {
    return new init.allClasses[name]();
  };
  init.initializeEmptyInstance = function(name, o, fields) {
    init.allClasses[name].apply(o, fields);
    return o;
  };
  var inheritFrom = supportsDirectProtoAccess ? function(constructor, superConstructor) {
    var prototype = constructor.prototype;
    prototype.__proto__ = superConstructor.prototype;
    prototype.constructor = constructor;
    prototype["$is" + constructor.name] = constructor;
    return convertToFastObject(prototype);
  } : function() {
    function tmp() {
    }
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      convertToSlowObject(object);
      var properties = constructor.prototype;
      var members = Object.keys(properties);
      for (var i = 0; i < members.length; i++) {
        var member = members[i];
        object[member] = properties[member];
      }
      object["$is" + constructor.name] = constructor;
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  function finishClasses(processedClasses) {
    var allClasses = init.allClasses;
    var constructors = init.precompiled(processedClasses.collected);
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = processedClasses.collected[cls];
      var globalObject = desc[0];
      desc = desc[1];
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = init.finishedClasses;
    function finishClass(cls) {
      if (finishedClasses[cls])
        return;
      finishedClasses[cls] = true;
      var superclass = processedClasses.pending[cls];
      if (superclass && superclass.indexOf("+") > 0) {
        var s = superclass.split("+");
        superclass = s[0];
        var mixinClass = s[1];
        finishClass(mixinClass);
        var mixin = allClasses[mixinClass];
        var mixinPrototype = mixin.prototype;
        var clsPrototype = allClasses[cls].prototype;
        var properties = Object.keys(mixinPrototype);
        for (var i = 0; i < properties.length; i++) {
          var d = properties[i];
          if (!hasOwnProperty.call(clsPrototype, d))
            clsPrototype[d] = mixinPrototype[d];
        }
      }
      if (!superclass || typeof superclass != "string") {
        var constructor = allClasses[cls];
        var prototype = constructor.prototype;
        prototype.constructor = constructor;
        prototype.$isObject = constructor;
        prototype.$deferredAction = function() {
        };
        return;
      }
      finishClass(superclass);
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var constructor = allClasses[cls];
      var prototype = inheritFrom(constructor, superConstructor);
      if (mixinPrototype)
        prototype.$deferredAction = mixinDeferredActionHelper(mixinPrototype, prototype);
      if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
        prototype.$deferredAction();
      }
      if (prototype.$isInterceptor)
        prototype.$deferredAction();
    }
    var properties = Object.keys(processedClasses.pending);
    for (var i = 0; i < properties.length; i++)
      finishClass(properties[i]);
  }
  function finishAddStubsHelper() {
    var prototype = this;
    while (!prototype.hasOwnProperty("$deferredAction"))
      prototype = prototype.__proto__;
    delete prototype.$deferredAction;
    var properties = Object.keys(prototype);
    for (var index = 0; index < properties.length; index++) {
      var property = properties[index];
      var firstChar = property.charCodeAt(0);
      var elem;
      if (property !== "^" && property !== "$reflectable" && firstChar !== 43 && firstChar !== 42 && (elem = prototype[property]) != null && elem.constructor === Array && property !== "<>")
        addStubs(prototype, elem, property, false, []);
    }
    convertToFastObject(prototype);
    prototype = prototype.__proto__;
    prototype.$deferredAction();
  }
  function mixinDeferredActionHelper(mixinPrototype, targetPrototype) {
    var chain;
    if (targetPrototype.hasOwnProperty("$deferredAction"))
      chain = targetPrototype.$deferredAction;
    return function foo() {
      var prototype = this;
      while (!prototype.hasOwnProperty("$deferredAction"))
        prototype = prototype.__proto__;
      if (chain)
        prototype.$deferredAction = chain;
      else {
        delete prototype.$deferredAction;
        convertToFastObject(prototype);
      }
      mixinPrototype.$deferredAction();
      prototype.$deferredAction();
    };
  }
  function processClassData(cls, descriptor, processedClasses) {
    descriptor = convertToSlowObject(descriptor);
    var previousProperty;
    var properties = Object.keys(descriptor);
    var hasDeferredWork = false;
    var shouldDeferWork = supportsDirectProtoAccess && cls != "Object";
    for (var i = 0; i < properties.length; i++) {
      var property = properties[i];
      var firstChar = property.charCodeAt(0);
      if (property === "static") {
        processStatics(init.statics[cls] = descriptor.static, processedClasses);
        delete descriptor.static;
      } else if (firstChar === 43) {
        mangledNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
      } else if (firstChar === 42) {
        descriptor[previousProperty].$defaultValues = descriptor[property];
        var optionalMethods = descriptor.$methodsWithOptionalArguments;
        if (!optionalMethods)
          descriptor.$methodsWithOptionalArguments = optionalMethods = {};
        optionalMethods[property] = previousProperty;
      } else {
        var elem = descriptor[property];
        if (property !== "^" && elem != null && elem.constructor === Array && property !== "<>")
          if (shouldDeferWork)
            hasDeferredWork = true;
          else
            addStubs(descriptor, elem, property, false, []);
        else
          previousProperty = property;
      }
    }
    if (hasDeferredWork)
      descriptor.$deferredAction = finishAddStubsHelper;
    var classData = descriptor["^"], split, supr, fields = classData;
    var s = fields.split(";");
    fields = s[1] == "" ? [] : s[1].split(",");
    supr = s[0];
    split = supr.split(":");
    if (split.length == 2) {
      supr = split[0];
      var functionSignature = split[1];
      if (functionSignature)
        descriptor.$signature = function(s) {
          return function() {
            return init.types[s];
          };
        }(functionSignature);
    }
    if (supr)
      processedClasses.pending[cls] = supr;
    processedClasses.collected[cls] = [globalObject, descriptor];
    classes.push(cls);
  }
  function processStatics(descriptor, processedClasses) {
    var properties = Object.keys(descriptor);
    for (var i = 0; i < properties.length; i++) {
      var property = properties[i];
      if (property === "^")
        continue;
      var element = descriptor[property];
      var firstChar = property.charCodeAt(0);
      var previousProperty;
      if (firstChar === 43) {
        mangledGlobalNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
        if (element && element.length)
          init.typeInformation[previousProperty] = element;
      } else if (firstChar === 42) {
        globalObject[previousProperty].$defaultValues = element;
        var optionalMethods = descriptor.$methodsWithOptionalArguments;
        if (!optionalMethods)
          descriptor.$methodsWithOptionalArguments = optionalMethods = {};
        optionalMethods[property] = previousProperty;
      } else if (typeof element === "function") {
        globalObject[previousProperty = property] = element;
        functions.push(property);
        init.globalFunctions[property] = element;
      } else if (element.constructor === Array)
        addStubs(globalObject, element, property, true, functions);
      else {
        previousProperty = property;
        processClassData(property, element, processedClasses);
      }
    }
  }
  function addStubs(prototype, array, name, isStatic, functions) {
    var index = 0, alias = array[index], f;
    if (typeof alias == "string")
      f = array[++index];
    else {
      f = alias;
      alias = name;
    }
    var funcs = [prototype[name] = prototype[alias] = f];
    f.$stubName = name;
    functions.push(name);
    for (; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function")
        break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        prototype[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    index++;
    for (var i = 0; i < funcs.length; index++, i++)
      funcs[i].$callName = array[index];
    var getterStubName = array[index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      prototype[name].$getter = f;
      f.$getterStub = true;
      if (isStatic) {
        init.globalFunctions[name] = f;
        functions.push(getterStubName);
      }
      prototype[getterStubName] = f;
      funcs.push(f);
      f.$stubName = getterStubName;
      f.$callName = null;
    }
    var isReflectable = array.length > unmangledNameIndex;
    if (isReflectable) {
      funcs[0].$reflectable = 1;
      funcs[0].$reflectionInfo = array;
      for (var i = 1; i < funcs.length; i++) {
        funcs[i].$reflectable = 2;
        funcs[i].$reflectionInfo = array;
      }
      var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName;
      if (getterStubName)
        mangledNames[getterStubName] = reflectionName;
      if (isSetter)
        reflectionName += "=";
      else if (!isGetter)
        reflectionName += ":" + (requiredParameterCount + optionalParameterCount);
      mangledNames[name] = reflectionName;
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount)
        prototype[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetter(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted ? function(x) {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
      return new cache(this, funcs[0], x, name);
    } : function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
      return new cache(this, funcs[0], null, name);
    };
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic ? function() {
      if (cache === void 0)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
      return cache;
    } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  if (!init.libraries)
    init.libraries = [];
  if (!init.mangledNames)
    init.mangledNames = map();
  if (!init.mangledGlobalNames)
    init.mangledGlobalNames = map();
  if (!init.statics)
    init.statics = map();
  if (!init.typeInformation)
    init.typeInformation = map();
  if (!init.globalFunctions)
    init.globalFunctions = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = programData.length;
  var processedClasses = map();
  processedClasses.collected = map();
  processedClasses.pending = map();
  for (var i = 0; i < length; i++) {
    var data = programData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    if (fields instanceof Array)
      fields = fields[0];
    var classes = [];
    var functions = [];
    processStatics(descriptor, processedClasses);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
  }
  finishClasses(processedClasses);
}
var dart = [
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: ["super$Interceptor$toString$0", function(receiver) {
      return H.Primitives_objectToString(receiver);
    }],
    noSuchMethod$1: ["super$Interceptor$noSuchMethod$1", function(receiver, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }, null, "get$noSuchMethod", 2, 0, null, 0],
    get$runtimeType: function(receiver) {
      return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
    },
    "%": "MediaError|MediaKeyError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString"
  },
  JSBool: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType: function(receiver) {
      return C.Type_EsU;
    },
    $isbool: 1
  },
  JSNull: {
    "^": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_eZO;
    },
    noSuchMethod$1: [function(receiver, invocation) {
      return this.super$Interceptor$noSuchMethod$1(receiver, invocation);
    }, null, "get$noSuchMethod", 2, 0, null, 0]
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    },
    get$runtimeType: function(_) {
      return C.Type_XXD;
    },
    $isJSObject: 1
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;",
    toString$0: function(receiver) {
      return String(receiver);
    }
  },
  JSArray: {
    "^": "Interceptor;",
    checkMutable$1: function(receiver, reason) {
      if (!!receiver.immutable$list)
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    checkGrowable$1: function(receiver, reason) {
      if (!!receiver.fixed$length)
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    setAll$2: function(receiver, index, iterable) {
      var t1, index0;
      this.checkMutable$1(receiver, "setAll");
      P.RangeError_checkValueInInterval(index, 0, receiver.length, "index", null);
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0(); index = index0) {
        index0 = index + 1;
        this.$indexSet(receiver, index, t1.get$current());
      }
    },
    remove$1: function(receiver, element) {
      var i;
      this.checkGrowable$1(receiver, "remove");
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        this.add$1(receiver, t1.get$current());
    },
    forEach$1: function(receiver, f) {
      var end, i;
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    },
    join$1: function(receiver, separator) {
      var t1, list, i, t2;
      t1 = receiver.length;
      list = Array(t1);
      list.fixed$length = Array;
      for (i = 0; i < receiver.length; ++i) {
        t2 = H.S(receiver[i]);
        if (i >= t1)
          return H.ioore(list, i);
        list[i] = t2;
      }
      return list.join(separator);
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, H.getTypeArgumentByIndex(receiver, 0));
    },
    reduce$1: function(receiver, combine) {
      var $length, value, i;
      $length = receiver.length;
      if ($length === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      if (0 >= $length)
        return H.ioore(receiver, 0);
      value = receiver[0];
      for (i = 1; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if ($length !== receiver.length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start == null)
        H.throwExpression(P.ArgumentError$(null));
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(P.ArgumentError$(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      if (end == null)
        end = receiver.length;
      else {
        if (typeof end !== "number" || Math.floor(end) !== end)
          throw H.wrapException(P.ArgumentError$(end));
        if (end < start || end > receiver.length)
          throw H.wrapException(P.RangeError$range(end, start, receiver.length, null, null));
      }
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, i, t1;
      this.checkMutable$1(receiver, "set range");
      P.RangeError_checkValidRange(start, end, receiver.length, null, null, null);
      $length = end - start;
      if ($length === 0)
        return;
      if (skipCount < 0)
        H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
      if (skipCount + $length > iterable.length)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (skipCount < start)
        for (i = $length - 1; i >= 0; --i) {
          t1 = skipCount + i;
          if (t1 < 0 || t1 >= iterable.length)
            return H.ioore(iterable, t1);
          receiver[start + i] = iterable[t1];
        }
      else
        for (i = 0; i < $length; ++i) {
          t1 = skipCount + i;
          if (t1 < 0 || t1 >= iterable.length)
            return H.ioore(iterable, t1);
          receiver[start + i] = iterable[t1];
        }
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    sort$1: function(receiver, compare) {
      var t1;
      this.checkMutable$1(receiver, "sort");
      t1 = compare == null ? P.Comparable_compare$closure() : compare;
      H.Sort__doSort(receiver, 0, receiver.length - 1, t1);
    },
    indexOf$2: function(receiver, element, start) {
      var i;
      if (start >= receiver.length)
        return -1;
      for (i = start; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element))
          return i;
      return -1;
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    lastIndexOf$2: function(receiver, element, startIndex) {
      var i;
      startIndex = receiver.length - 1;
      for (i = startIndex; i >= 0; --i) {
        if (i >= receiver.length)
          return H.ioore(receiver, i);
        if (J.$eq(receiver[i], element))
          return i;
      }
      return -1;
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable)
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      else {
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = Array;
        t1 = t1;
      }
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return H.setRuntimeTypeInfo(new J.ArrayIterator(receiver, receiver.length, 0, null), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$(newLength));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength, null, null));
      this.checkGrowable$1(receiver, "set length");
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      receiver[index] = value;
    },
    $isJSIndexable: 1,
    $isList: 1,
    $asList: null,
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: null
  },
  ArrayIterator: {
    "^": "Object;__interceptors$_iterable,__interceptors$_length,__interceptors$_index,__interceptors$_current",
    get$current: function() {
      return this.__interceptors$_current;
    },
    moveNext$0: function() {
      var t1, $length, t2;
      t1 = this.__interceptors$_iterable;
      $length = t1.length;
      if (this.__interceptors$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t2 = this.__interceptors$_index;
      if (t2 >= $length) {
        this.__interceptors$_current = null;
        return false;
      }
      this.__interceptors$_current = t1[t2];
      this.__interceptors$_index = t2 + 1;
      return true;
    }
  },
  JSNumber: {
    "^": "Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    get$isFinite: function(receiver) {
      return isFinite(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$("" + receiver));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver));
    },
    toRadixString$1: function(receiver, radix) {
      var result, match, t1, exponent;
      H.checkInt(radix);
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        H.throwExpression(P.UnsupportedError$("Unexpected toString result: " + result));
      t1 = J.getInterceptor$asx(match);
      result = t1.$index(match, 1);
      exponent = +t1.$index(match, 3);
      if (t1.$index(match, 2) != null) {
        result += t1.$index(match, 2);
        exponent -= t1.$index(match, 2).length;
      }
      return result + C.JSString_methods.$mul("0", exponent);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      return receiver / other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else {
        if (typeof other !== "number")
          H.throwExpression(P.ArgumentError$(other));
        return this.toInt$0(receiver / other);
      }
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    $shl: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $and: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver & other) >>> 0;
    },
    $xor: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver ^ other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    get$runtimeType: function(receiver) {
      return C.Type_xM7;
    },
    $isnum: 1
  },
  JSInt: {
    "^": "JSNumber;",
    get$runtimeType: function(receiver) {
      return C.Type_SnA;
    },
    $is$double: 1,
    $isnum: 1,
    $is$int: 1
  },
  JSDouble: {
    "^": "JSNumber;",
    get$runtimeType: function(receiver) {
      return C.Type_qq1;
    },
    $is$double: 1,
    $isnum: 1
  },
  JSString: {
    "^": "Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver.charCodeAt(index);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      H.checkString(other);
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceAll$2: function(receiver, from, to) {
      H.checkString(to);
      return H.stringReplaceAllUnchecked(receiver, from, to);
    },
    replaceFirst$3: function(receiver, from, to, startIndex) {
      H.checkString(to);
      H.checkInt(startIndex);
      P.RangeError_checkValueInInterval(startIndex, 0, receiver.length, "startIndex", null);
      return H.stringReplaceFirstUnchecked(receiver, from, to, startIndex);
    },
    replaceFirst$2: function($receiver, from, to) {
      return this.replaceFirst$3($receiver, from, to, 0);
    },
    split$1: function(receiver, pattern) {
      return receiver.split(pattern);
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      H.checkInt(index);
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      var t1;
      if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
        H.throwExpression(P.ArgumentError$(startIndex));
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      t1 = J.getInterceptor$n(startIndex);
      if (t1.$lt(startIndex, 0))
        throw H.wrapException(P.RangeError$value(startIndex, null, null));
      if (t1.$gt(startIndex, endIndex))
        throw H.wrapException(P.RangeError$value(startIndex, null, null));
      if (J.$gt$n(endIndex, receiver.length))
        throw H.wrapException(P.RangeError$value(endIndex, null, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    trim$0: function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this.codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2: function(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    get$codeUnits: function(receiver) {
      return new H.CodeUnits(receiver);
    },
    indexOf$2: function(receiver, pattern, start) {
      if (start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      return receiver.indexOf(pattern, start);
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2;
      start = receiver.length;
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$2: function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$runtimeType: function(receiver) {
      return C.Type_Ejg;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index, null, null));
      return receiver[index];
    },
    $isJSIndexable: 1,
    $isString: 1,
    static: {JSString__isWhitespace: function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }, JSString__skipLeadingWhitespace: function(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1;) {
          codeUnit = C.JSString_methods.codeUnitAt$1(string, index);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
          ++index;
        }
        return index;
      }, JSString__skipTrailingWhitespace: function(string, index) {
        var index0, codeUnit;
        for (; index > 0; index = index0) {
          index0 = index - 1;
          codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
        }
        return index;
      }}
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    if (!init.globalState.currentContext._isExecutingEvent)
      init.globalState.topEventLoop.run$0();
    return result;
  },
  leaveJsAsync: function() {
    --init.globalState.topEventLoop._activeJsAsyncCount;
  },
  startRootIsolate: function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1._captured_args_0 = args;
    args = args;
    t1._captured_args_0 = args;
    if (args == null) {
      args = [];
      t1._captured_args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._nativeDetectEnvironment$0();
    t2.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
    t2.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H._IsolateContext);
    t2.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, null);
    if (t2.isWorker === true) {
      t2.mainManager = new H._MainManagerStub();
      t2._nativeInitWorkerMessageHandler$0();
    }
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState.nextIsolateId++;
    t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t2, t3, t4, init.createNewIsolate(), t5, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "setenv" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof os == "object" && "getenv" in os)
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  },
  IsolateNatives_computeThisScriptFromTrace: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = function() {
        try {
          throw new Error();
        } catch (e) {
          return e.stack;
        }
      }();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  },
  IsolateNatives__processWorkerMessage: [function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
    msg = new H._Deserializer(true, []).deserialize$1(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : H.IsolateNatives__getJSFunctionFromName(functionName);
        args = t1.$index(msg, "args");
        message = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = new H._Deserializer(true, []).deserialize$1(t1.$index(msg, "replyTo"));
        t1 = init.globalState.nextIsolateId++;
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t1, t2, t3, init.createNewIsolate(), t4, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", msg], null, null);
          t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  }, null, null, 4, 0, null, 2, 3],
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "log", "msg", msg], null, null);
      t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        self.console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = H.getTraceFromException(exception);
        throw H.wrapException(P.Exception_Exception(trace));
      }
  },
  IsolateNatives__getJSFunctionFromName: function(functionName) {
    return init.globalFunctions[functionName]();
  },
  IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2, t3;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort;
    t2 = init.globalState.currentContext.id;
    t3 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
    t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
    if (startPaused === true) {
      context.addPause$2(t3, t3);
      init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t2, "start isolate"));
    } else
      t2.call$0();
  },
  _clone: function(message) {
    return new H._Deserializer(true, []).deserialize$1(new H._Serializer(false, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(message));
  },
  startRootIsolate_closure: {
    "^": "Closure:0;__isolate_helper$_box_0,_captured_entry_1",
    call$0: function() {
      this._captured_entry_1.call$1(this.__isolate_helper$_box_0._captured_args_0);
    }
  },
  startRootIsolate_closure0: {
    "^": "Closure:0;__isolate_helper$_box_0,__isolate_helper$_captured_entry_2",
    call$0: function() {
      this.__isolate_helper$_captured_entry_2.call$2(this.__isolate_helper$_box_0._captured_args_0, null);
    }
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _nativeDetectEnvironment$0: function() {
      var t1, t2, t3;
      t1 = self.window == null;
      t2 = self.Worker;
      t3 = t1 && !!self.postMessage;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
    },
    _nativeInitWorkerMessageHandler$0: function() {
      self.onmessage = function(f, a) {
        return function(e) {
          f(a, e);
        };
      }(H.IsolateNatives__processWorkerMessage, this.mainManager);
      self.dartPrint = self.dartPrint || function(serialize) {
        return function(object) {
          if (self.console && self.console.log)
            self.console.log(object);
          else
            self.postMessage(serialize(object));
        };
      }(H._Manager__serializePrintMessage);
    },
    static: {_Manager__serializePrintMessage: [function(object) {
        var t1 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", object], null, null);
        return new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t1);
      }, null, null, 2, 0, null, 1]}
  },
  _IsolateContext: {
    "^": "Object;id,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized?,isPaused<,delayedEvents<,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          ++t2._modificationCount;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if ((t1 && C.JSArray_methods).contains$1(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      (t1 && C.JSArray_methods).remove$1(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      var t1, t2;
      t1 = J.getInterceptor(pingType);
      if (!t1.$eq(pingType, 0))
        t2 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        J.send$1$x(responsePort, null);
        return;
      }
      t2 = new H._IsolateContext_handlePing_respond(responsePort);
      if (t1.$eq(pingType, 2)) {
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(this, t2, "ping"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = P.ListQueue$(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(t2);
    },
    handleKill$2: function(authentification, priority) {
      var t1, t2;
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      t1 = J.getInterceptor(priority);
      if (!t1.$eq(priority, 0))
        t2 = t1.$eq(priority, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        this.kill$0();
        return;
      }
      if (t1.$eq(priority, 2)) {
        t1 = init.globalState.topEventLoop;
        t2 = this.get$kill();
        t1.events._add$1(new H._IsolateEvent(this, t2, "kill"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = P.ListQueue$(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(this.get$kill());
    },
    handleUncaughtError$2: function(error, stackTrace) {
      var t1, message;
      t1 = this.errorPorts;
      if (t1._collection$_length === 0) {
        if (this.errorsAreFatal === true && this === init.globalState.rootContext)
          return;
        if (self.console && self.console.error)
          self.console.error(error, stackTrace);
        else {
          P.print(error);
          if (stackTrace != null)
            P.print(stackTrace);
        }
        return;
      }
      message = Array(2);
      message.fixed$length = Array;
      message[0] = J.toString$0(error);
      message[1] = stackTrace == null ? null : J.toString$0(stackTrace);
      for (t1 = H.setRuntimeTypeInfo(new P.LinkedHashSetIterator(t1, t1._modifications, null, null), [null]), t1._cell = t1._set._first; t1.moveNext$0();)
        J.send$1$x(t1._collection$_current, message);
    },
    eval$1: function(code) {
      var old, result, oldIsExecutingEvent, e, s, exception, t1;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      oldIsExecutingEvent = this._isExecutingEvent;
      this._isExecutingEvent = true;
      try {
        result = code.call$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        this.handleUncaughtError$2(e, s);
        if (this.errorsAreFatal === true) {
          this.kill$0();
          if (this === init.globalState.rootContext)
            throw exception;
        }
      } finally {
        this._isExecutingEvent = oldIsExecutingEvent;
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
        if (this._scheduledControlEvents != null)
          for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
            this._scheduledControlEvents.removeFirst$0().call$0();
      }
      return result;
    },
    handleControlMessage$1: function(message) {
      var t1 = J.getInterceptor$asx(message);
      switch (t1.$index(message, 0)) {
        case "pause":
          this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "resume":
          this.removePause$1(t1.$index(message, 1));
          break;
        case "add-ondone":
          this.addDoneListener$1(t1.$index(message, 1));
          break;
        case "remove-ondone":
          this.removeDoneListener$1(t1.$index(message, 1));
          break;
        case "set-errors-fatal":
          this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "ping":
          this.handlePing$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "kill":
          this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "getErrors":
          this.errorPorts.add$1(0, t1.$index(message, 1));
          break;
        case "stopErrors":
          this.errorPorts.remove$1(0, t1.$index(message, 1));
          break;
      }
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports.__js_helper$_length - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this.kill$0();
    },
    kill$0: [function() {
      var t1, t2;
      t1 = this._scheduledControlEvents;
      if (t1 != null)
        t1.clear$0(0);
      for (t1 = this.ports, t2 = t1.get$values(t1), t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2.__internal$_current.__isolate_helper$_close$0();
      t1.clear$0(0);
      this.weakPorts.clear$0(0);
      init.globalState.isolates.remove$1(0, this.id);
      this.errorPorts.clear$0(0);
      t1 = this.doneHandlers;
      if (t1 != null) {
        for (t1 = H.setRuntimeTypeInfo(new J.ArrayIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
          J.send$1$x(t1.__interceptors$_current, null);
        this.doneHandlers = null;
      }
    }, "call$0", "get$kill", 0, 0, 1]
  },
  _IsolateContext_handlePing_respond: {
    "^": "Closure:1;_captured_responsePort_0",
    call$0: [function() {
      J.send$1$x(this._captured_responsePort_0, null);
    }, null, null, 0, 0, null, "call"]
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports.__js_helper$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates.__js_helper$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "close"], null, null);
          t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if (self.window != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = H.getTraceFromException(exception);
          t1 = init.globalState.mainManager;
          t2 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], null, null);
          t2 = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t2);
          t1.toString;
          self.postMessage(t2);
        }
    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure:1;__isolate_helper$_captured_this_0",
    call$0: function() {
      if (!this.__isolate_helper$_captured_this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }
  },
  _IsolateEvent: {
    "^": "Object;isolate,fn,message>",
    process$0: function() {
      var t1 = this.isolate;
      if (t1.get$isPaused()) {
        t1.get$delayedEvents().push(this);
        return;
      }
      t1.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:0;_captured_entryPoint_0,_captured_args_1,_captured_message_2,_captured_isSpawnUri_3,_captured_startPaused_4,_captured_replyTo_5",
    call$0: function() {
      H.IsolateNatives__startIsolate(this._captured_entryPoint_0, this._captured_args_1, this._captured_message_2, this._captured_isSpawnUri_3, this._captured_startPaused_4, this._captured_replyTo_5);
    }
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:1;_captured_topLevel_0,_captured_args_1,_captured_message_2,_captured_isSpawnUri_3,_captured_context_4",
    call$0: function() {
      var t1, t2, t3;
      this._captured_context_4.set$initialized(true);
      if (this._captured_isSpawnUri_3 !== true)
        this._captured_topLevel_0.call$1(this._captured_message_2);
      else {
        t1 = this._captured_topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this._captured_args_1, this._captured_message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this._captured_args_1);
          else
            t1.call$0();
        }
      }
    }
  },
  _BaseSendPort: {
    "^": "Object;"
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var isolate, t1, msg, t2;
      isolate = init.globalState.isolates.$index(0, this._isolateId);
      if (isolate == null)
        return;
      t1 = this._receivePort;
      if (t1.get$_isClosed())
        return;
      msg = H._clone(message);
      if (isolate.get$controlPort() === t1) {
        isolate.handleControlMessage$1(msg);
        return;
      }
      t1 = init.globalState.topEventLoop;
      t2 = "receive " + H.S(message);
      t1.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(this, msg), t2));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H._NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    }
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure:0;__isolate_helper$_captured_this_0,_captured_msg_1",
    call$0: function() {
      var t1 = this.__isolate_helper$_captured_this_0._receivePort;
      if (!t1.get$_isClosed())
        t1.__isolate_helper$_add$1(this._captured_msg_1);
    }
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var t1, workerMessage, manager;
      t1 = P.LinkedHashMap_LinkedHashMap$_literal(["command", "message", "port", this, "msg", message], null, null);
      workerMessage = new H._Serializer(true, P.LinkedHashMap_LinkedHashMap$identity(null, P.$int)).serialize$1(t1);
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H._WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.$shl$n(this._workerId, 16);
      t2 = J.$shl$n(this._isolateId, 8);
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 ^ t2 ^ t3) >>> 0;
    }
  },
  RawReceivePortImpl: {
    "^": "Object;_id<,_handler,_isClosed<",
    __isolate_helper$_close$0: function() {
      this._isClosed = true;
      this._handler = null;
    },
    __isolate_helper$_add$1: function(dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    $isRawReceivePort: 1
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    cancel$0: function() {
      if (self.setTimeout != null) {
        if (this._inEventLoop)
          throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
        if (this._handle == null)
          return;
        H.leaveJsAsync();
        var t1 = this._handle;
        if (this._once)
          self.clearTimeout(t1);
        else
          self.clearInterval(t1);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = self.setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else if (self.setTimeout != null) {
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
      } else
        throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure:1;__isolate_helper$_captured_this_0,_captured_callback_1",
    call$0: function() {
      this.__isolate_helper$_captured_this_0._handle = null;
      this._captured_callback_1.call$0();
    }
  },
  TimerImpl_internalCallback0: {
    "^": "Closure:1;__isolate_helper$_captured_this_2,_captured_callback_3",
    call$0: [function() {
      this.__isolate_helper$_captured_this_2._handle = null;
      H.leaveJsAsync();
      this._captured_callback_3.call$0();
    }, null, null, 0, 0, null, "call"]
  },
  CapabilityImpl: {
    "^": "Object;_id<",
    get$hashCode: function(_) {
      var hash = this._id;
      hash = C.JSInt_methods._shrOtherPositive$1(hash, 0) ^ C.JSInt_methods._tdivFast$1(hash, 4294967296);
      hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
      hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
      hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
      return (hash ^ hash >>> 16) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (other instanceof H.CapabilityImpl)
        return this._id === other._id;
      return false;
    }
  },
  _Serializer: {
    "^": "Object;_serializeSendPorts,serializedObjectIds",
    serialize$1: [function(x) {
      var t1, serializationId, serializeTearOff, t2, $name;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = this.serializedObjectIds;
      serializationId = t1.$index(0, x);
      if (serializationId != null)
        return ["ref", serializationId];
      t1.$indexSet(0, x, t1.__js_helper$_length);
      t1 = J.getInterceptor(x);
      if (!!t1.$isNativeByteBuffer)
        return ["buffer", x];
      if (!!t1.$isNativeTypedData)
        return ["typed", x];
      if (!!t1.$isJSIndexable)
        return this.serializeJSIndexable$1(x);
      if (!!t1.$isInternalMap) {
        serializeTearOff = this.get$serialize();
        t2 = x.get$keys();
        t2 = H.MappedIterable_MappedIterable(t2, serializeTearOff, H.getRuntimeTypeArgument(t2, "IterableBase", 0), null);
        t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
        t1 = t1.get$values(x);
        t1 = H.MappedIterable_MappedIterable(t1, serializeTearOff, H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
        return ["map", t2, P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0))];
      }
      if (!!t1.$isJSObject)
        return this.serializeJSObject$1(x);
      if (!!t1.$isInterceptor)
        this.unsupported$1(x);
      if (!!t1.$isRawReceivePort)
        this.unsupported$2(x, "RawReceivePorts can't be transmitted:");
      if (!!t1.$is_NativeJsSendPort)
        return this.serializeJsSendPort$1(x);
      if (!!t1.$is_WorkerSendPort)
        return this.serializeWorkerSendPort$1(x);
      if (!!t1.$isClosure) {
        $name = x.$name;
        if ($name == null)
          this.unsupported$2(x, "Closures can't be transmitted:");
        return ["function", $name];
      }
      return ["dart", init.classIdExtractor(x), this.serializeArrayInPlace$1(init.classFieldsExtractor(x))];
    }, "call$1", "get$serialize", 2, 0, 2, 4],
    unsupported$2: function(x, message) {
      throw H.wrapException(P.UnsupportedError$(H.S(message == null ? "Can't transmit:" : message) + " " + H.S(x)));
    },
    unsupported$1: function(x) {
      return this.unsupported$2(x, null);
    },
    serializeJSIndexable$1: function(indexable) {
      var serialized = this.serializeArray$1(indexable);
      if (!!indexable.fixed$length)
        return ["fixed", serialized];
      if (!indexable.fixed$length)
        return ["extendable", serialized];
      if (!indexable.immutable$list)
        return ["mutable", serialized];
      if (indexable.constructor === Array)
        return ["const", serialized];
      this.unsupported$2(indexable, "Can't serialize indexable: ");
    },
    serializeArray$1: function(x) {
      var serialized, i, t1;
      serialized = [];
      C.JSArray_methods.set$length(serialized, x.length);
      for (i = 0; i < x.length; ++i) {
        t1 = this.serialize$1(x[i]);
        if (i >= serialized.length)
          return H.ioore(serialized, i);
        serialized[i] = t1;
      }
      return serialized;
    },
    serializeArrayInPlace$1: function(x) {
      var i;
      for (i = 0; i < x.length; ++i)
        C.JSArray_methods.$indexSet(x, i, this.serialize$1(x[i]));
      return x;
    },
    serializeJSObject$1: function(x) {
      var keys, values, i, t1;
      if (!!x.constructor && x.constructor !== Object)
        this.unsupported$2(x, "Only plain JS Objects are supported:");
      keys = Object.keys(x);
      values = [];
      C.JSArray_methods.set$length(values, keys.length);
      for (i = 0; i < keys.length; ++i) {
        t1 = this.serialize$1(x[keys[i]]);
        if (i >= values.length)
          return H.ioore(values, i);
        values[i] = t1;
      }
      return ["js-object", keys, values];
    },
    serializeWorkerSendPort$1: function(x) {
      if (this._serializeSendPorts)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      return ["raw sendport", x];
    },
    serializeJsSendPort$1: function(x) {
      if (this._serializeSendPorts)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      return ["raw sendport", x];
    }
  },
  _Deserializer: {
    "^": "Object;_adjustSendPorts,deserializedObjects",
    deserialize$1: [function(x) {
      var serializationId, t1, result, classId, fields, emptyInstance;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      if (typeof x !== "object" || x === null || x.constructor !== Array)
        throw H.wrapException(P.ArgumentError$("Bad serialized message: " + H.S(x)));
      switch (C.JSArray_methods.get$first(x)) {
        case "ref":
          if (1 >= x.length)
            return H.ioore(x, 1);
          serializationId = x[1];
          t1 = this.deserializedObjects;
          if (serializationId >>> 0 !== serializationId || serializationId >= t1.length)
            return H.ioore(t1, serializationId);
          return t1[serializationId];
        case "buffer":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          return result;
        case "typed":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          return result;
        case "fixed":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          t1 = this.deserializeArrayInPlace$1(result);
          t1.$builtinTypeInfo = [null];
          t1.fixed$length = Array;
          return t1;
        case "extendable":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          t1 = this.deserializeArrayInPlace$1(result);
          t1.$builtinTypeInfo = [null];
          return t1;
        case "mutable":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          return this.deserializeArrayInPlace$1(result);
        case "const":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          t1 = this.deserializeArrayInPlace$1(result);
          t1.$builtinTypeInfo = [null];
          t1.fixed$length = Array;
          return t1;
        case "map":
          return this.deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "raw sendport":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = x[1];
          this.deserializedObjects.push(result);
          return result;
        case "js-object":
          return this.deserializeJSObject$1(x);
        case "function":
          if (1 >= x.length)
            return H.ioore(x, 1);
          result = init.globalFunctions[x[1]]();
          this.deserializedObjects.push(result);
          return result;
        case "dart":
          t1 = x.length;
          if (1 >= t1)
            return H.ioore(x, 1);
          classId = x[1];
          if (2 >= t1)
            return H.ioore(x, 2);
          fields = x[2];
          emptyInstance = init.instanceFromClassId(classId);
          this.deserializedObjects.push(emptyInstance);
          this.deserializeArrayInPlace$1(fields);
          return init.initializeEmptyInstance(classId, emptyInstance, fields);
        default:
          throw H.wrapException("couldn't deserialize: " + H.S(x));
      }
    }, "call$1", "get$deserialize", 2, 0, 2, 4],
    deserializeArrayInPlace$1: function(x) {
      var t1, i, t2;
      t1 = J.getInterceptor$asx(x);
      i = 0;
      while (true) {
        t2 = t1.get$length(x);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.$indexSet(x, i, this.deserialize$1(t1.$index(x, i)));
        ++i;
      }
      return x;
    },
    deserializeMap$1: function(x) {
      var t1, keys, values, result, t2, i;
      t1 = x.length;
      if (1 >= t1)
        return H.ioore(x, 1);
      keys = x[1];
      if (2 >= t1)
        return H.ioore(x, 2);
      values = x[2];
      result = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      this.deserializedObjects.push(result);
      keys = J.map$1$ax(keys, this.get$deserialize()).toList$0(0);
      for (t1 = J.getInterceptor$asx(keys), t2 = J.getInterceptor$asx(values), i = 0; i < t1.get$length(keys); ++i)
        result.$indexSet(0, t1.$index(keys, i), this.deserialize$1(t2.$index(values, i)));
      return result;
    },
    deserializeSendPort$1: function(x) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort, result;
      t1 = x.length;
      if (1 >= t1)
        return H.ioore(x, 1);
      managerId = x[1];
      if (2 >= t1)
        return H.ioore(x, 2);
      isolateId = x[2];
      if (3 >= t1)
        return H.ioore(x, 3);
      receivePortId = x[3];
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        result = new H._NativeJsSendPort(receivePort, isolateId);
      } else
        result = new H._WorkerSendPort(managerId, receivePortId, isolateId);
      this.deserializedObjects.push(result);
      return result;
    },
    deserializeJSObject$1: function(x) {
      var t1, keys, values, o, t2, i, t3;
      t1 = x.length;
      if (1 >= t1)
        return H.ioore(x, 1);
      keys = x[1];
      if (2 >= t1)
        return H.ioore(x, 2);
      values = x[2];
      o = {};
      this.deserializedObjects.push(o);
      t1 = J.getInterceptor$asx(keys);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      while (true) {
        t3 = t1.get$length(keys);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        o[t1.$index(keys, i)] = this.deserialize$1(t2.$index(values, i));
        ++i;
      }
      return o;
    }
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__parseIntError: function(source, handleError) {
    throw H.wrapException(P.FormatException$(source, null, null));
  },
  Primitives_parseInt: function(source, radix, handleError) {
    var match, decimalMatch, maxCharCode, digitsPart, t1, i;
    H.checkString(source);
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (match == null)
      return H.Primitives__parseIntError(source, handleError);
    if (3 >= match.length)
      return H.ioore(match, 3);
    decimalMatch = match[3];
    if (radix == null) {
      if (decimalMatch != null)
        return parseInt(source, 10);
      if (match[2] != null)
        return parseInt(source, 16);
      return H.Primitives__parseIntError(source, handleError);
    }
    if (radix < 2 || radix > 36)
      throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
    if (radix === 10 && decimalMatch != null)
      return parseInt(source, 10);
    if (radix < 10 || decimalMatch == null) {
      maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
      digitsPart = match[1];
      for (t1 = digitsPart.length, i = 0; i < t1; ++i)
        if ((C.JSString_methods.codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
          return H.Primitives__parseIntError(source, handleError);
    }
    return parseInt(source, radix);
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_8ZY(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = /^\w+$/.test(decompiled) ? decompiled : $name;
    }
    if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return ($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null)).replace(/[^<,> ]+/g, function(m) {
      return init.mangledGlobalNames[m] || m;
    });
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_dateNow: [function() {
    return Date.now();
  }, "call$0", "Primitives_dateNow$closure", 0, 0, 70],
  Primitives_initTicker: function() {
    var $window, performance;
    if ($.Primitives_timerFrequency != null)
      return;
    $.Primitives_timerFrequency = 1000;
    $.Primitives_timerTicks = H.Primitives_dateNow$closure();
    if (typeof window == "undefined")
      return;
    $window = window;
    if ($window == null)
      return;
    performance = $window.performance;
    if (performance == null)
      return;
    if (typeof performance.now != "function")
      return;
    $.Primitives_timerFrequency = 1000000;
    $.Primitives_timerTicks = new H.Primitives_initTicker_closure(performance);
  },
  Primitives__fromCharCodeApply: function(array) {
    var end, result, i, i0, chunkEnd;
    end = array.length;
    if (end <= 500)
      return String.fromCharCode.apply(null, array);
    for (result = "", i = 0; i < end; i = i0) {
      i0 = i + 500;
      chunkEnd = i0 < end ? i0 : end;
      result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
    }
    return result;
  },
  Primitives_stringFromCodePoints: function(codePoints) {
    var a, t1, i;
    a = [];
    a.$builtinTypeInfo = [P.$int];
    t1 = new J.ArrayIterator(codePoints, codePoints.length, 0, null);
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(codePoints, 0)];
    for (; t1.moveNext$0();) {
      i = t1.__interceptors$_current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i <= 65535)
        a.push(i);
      else if (i <= 1114111) {
        a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
        a.push(56320 + (i & 1023));
      } else
        throw H.wrapException(P.ArgumentError$(i));
    }
    return H.Primitives__fromCharCodeApply(a);
  },
  Primitives_stringFromCharCodes: function(charCodes) {
    var t1, i;
    for (t1 = H.setRuntimeTypeInfo(new J.ArrayIterator(charCodes, charCodes.length, 0, null), [H.getTypeArgumentByIndex(charCodes, 0)]); t1.moveNext$0();) {
      i = t1.__interceptors$_current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i < 0)
        throw H.wrapException(P.ArgumentError$(i));
      if (i > 65535)
        return H.Primitives_stringFromCodePoints(charCodes);
    }
    return H.Primitives__fromCharCodeApply(charCodes);
  },
  Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
    var i, result, i0, chunkEnd;
    if (end <= 500 && start === 0 && end === charCodes.length)
      return String.fromCharCode.apply(null, charCodes);
    for (i = start, result = ""; i < end; i = i0) {
      i0 = i + 500;
      chunkEnd = i0 < end ? i0 : end;
      result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
    }
    return result;
  },
  Primitives_stringFromCharCode: function(charCode) {
    var bits;
    if (typeof charCode !== "number")
      return H.iae(charCode);
    if (0 <= charCode) {
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSNumber_methods._shrOtherPositive$1(bits, 10)) >>> 0, (56320 | bits & 1023) >>> 0);
      }
    }
    throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
  },
  Primitives_lazyAsJsDate: function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    object[key] = value;
  },
  Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
    var t1, $arguments, namedArgumentList;
    t1 = {};
    t1._captured_argumentCount_0 = 0;
    $arguments = [];
    namedArgumentList = [];
    t1._captured_argumentCount_0 = positionalArguments.length;
    C.JSArray_methods.addAll$1($arguments, positionalArguments);
    t1._captured_names_1 = "";
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
      namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
    return J.noSuchMethod$1($function, new H.JSInvocationMirror(C.Symbol_call, "call$" + t1._captured_argumentCount_0 + t1._captured_names_1, 0, $arguments, namedArgumentList, null));
  },
  Primitives_applyFunctionWithPositionalArguments: function($function, positionalArguments) {
    var $arguments, t1;
    $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
    t1 = $arguments.length;
    if (t1 === 0) {
      if (!!$function.call$0)
        return $function.call$0();
    } else if (t1 === 1) {
      if (!!$function.call$1)
        return $function.call$1($arguments[0]);
    } else if (t1 === 2) {
      if (!!$function.call$2)
        return $function.call$2($arguments[0], $arguments[1]);
    } else if (t1 === 3)
      if (!!$function.call$3)
        return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
    return H.Primitives__genericApplyFunctionWithPositionalArguments($function, $arguments);
  },
  Primitives__genericApplyFunctionWithPositionalArguments: function($function, $arguments) {
    var argumentCount, jsFunction, info, requiredArgumentCount, maxArgumentCount, pos;
    argumentCount = $arguments.length;
    jsFunction = $function["call$" + argumentCount];
    if (jsFunction == null) {
      jsFunction = J.getInterceptor($function)["call*"];
      if (jsFunction == null)
        return H.Primitives_functionNoSuchMethod($function, $arguments, null);
      info = H.ReflectionInfo_ReflectionInfo(jsFunction);
      requiredArgumentCount = info.requiredParameterCount;
      maxArgumentCount = requiredArgumentCount + info.optionalParameterCount;
      if (info.areOptionalParametersNamed || requiredArgumentCount > argumentCount || maxArgumentCount < argumentCount)
        return H.Primitives_functionNoSuchMethod($function, $arguments, null);
      $arguments = P.List_List$from($arguments, true, null);
      for (pos = argumentCount; pos < maxArgumentCount; ++pos)
        $arguments.push(init.metadata[info.defaultValue$1(0, pos)]);
    }
    return jsFunction.apply($function, $arguments);
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index, null, null));
  },
  checkNum: function(value) {
    if (typeof value !== "number")
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  checkInt: function(value) {
    if (typeof value !== "number" || Math.floor(value) !== value)
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  checkString: function(value) {
    if (typeof value !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: [function() {
    return J.toString$0(this.dartException);
  }, null, null, 0, 0, null],
  throwExpression: function(ex) {
    throw H.wrapException(ex);
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2)
            return t1.call$1(new H.NullError(message, match == null ? null : match.method));
        }
      }
      return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(false, null, null, null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  getTraceFromException: function(exception) {
    return new H._StackTrace(exception, null);
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  }, null, null, 14, 0, null, 5, 6, 7, 8, 9, 10, 11],
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = function(closure, arity, context, invoke) {
      return function(a1, a2, a3, a4) {
        return invoke(closure, context, arity, a1, a2, a3, a4);
      };
    }(closure, arity, init.globalState.currentContext, H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    if (!!J.getInterceptor(reflectionInfo).$isList) {
      $function.$reflectionInfo = reflectionInfo;
      functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    } else
      functionType = reflectionInfo;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function() {
        this.$initialize();
      };
    else
      $constructor = function(a, b, c, d) {
        this.$initialize(a, b, c, d);
      };
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = function(s) {
        return function() {
          return init.types[s];
        };
      }(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f, r) {
        return function() {
          return f.apply({$receiver: r(this)}, arguments);
        };
      }(functionType, getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    $prototype.$requiredArgCount = $function.$requiredArgCount;
    $prototype.$defaultValues = $function.$defaultValues;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n, S) {
          return function() {
            return S(this)[n]();
          };
        }(stubName, getSelf);
      case 1:
        return function(n, S) {
          return function(a) {
            return S(this)[n](a);
          };
        }(stubName, getSelf);
      case 2:
        return function(n, S) {
          return function(a, b) {
            return S(this)[n](a, b);
          };
        }(stubName, getSelf);
      case 3:
        return function(n, S) {
          return function(a, b, c) {
            return S(this)[n](a, b, c);
          };
        }(stubName, getSelf);
      case 4:
        return function(n, S) {
          return function(a, b, c, d) {
            return S(this)[n](a, b, c, d);
          };
        }(stubName, getSelf);
      case 5:
        return function(n, S) {
          return function(a, b, c, d, e) {
            return S(this)[n](a, b, c, d, e);
          };
        }(stubName, getSelf);
      default:
        return function(f, s) {
          return function() {
            return f.apply(s(this), arguments);
          };
        }($function, getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n, s, r) {
          return function() {
            return s(this)[n](r(this));
          };
        }($name, getSelf, getReceiver);
      case 2:
        return function(n, s, r) {
          return function(a) {
            return s(this)[n](r(this), a);
          };
        }($name, getSelf, getReceiver);
      case 3:
        return function(n, s, r) {
          return function(a, b) {
            return s(this)[n](r(this), a, b);
          };
        }($name, getSelf, getReceiver);
      case 4:
        return function(n, s, r) {
          return function(a, b, c) {
            return s(this)[n](r(this), a, b, c);
          };
        }($name, getSelf, getReceiver);
      case 5:
        return function(n, s, r) {
          return function(a, b, c, d) {
            return s(this)[n](r(this), a, b, c, d);
          };
        }($name, getSelf, getReceiver);
      case 6:
        return function(n, s, r) {
          return function(a, b, c, d, e) {
            return s(this)[n](r(this), a, b, c, d, e);
          };
        }($name, getSelf, getReceiver);
      default:
        return function(f, s, r, a) {
          return function() {
            a = [r(this)];
            Array.prototype.push.apply(a, arguments);
            return f.apply(s(this), a);
          };
        }($function, getSelf, getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var t1, stubName, arity, lookedUpFunction;
    H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    return H.Closure_cspForwardInterceptedCall(arity, !t1, stubName, $function);
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    var t1;
    functions.fixed$length = Array;
    if (!!J.getInterceptor(reflectionInfo).$isList) {
      reflectionInfo.fixed$length = Array;
      t1 = reflectionInfo;
    } else
      t1 = reflectionInfo;
    return H.Closure_fromTearOff(receiver, functions, t1, !!isStatic, jsArguments, $name);
  },
  propertyTypeCastError: function(value, property) {
    var t1 = J.getInterceptor$asx(property);
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
  },
  interceptedTypeCast: function(value, property) {
    var t1;
    if (value != null)
      t1 = typeof value === "object" && J.getInterceptor(value)[property];
    else
      t1 = true;
    if (t1)
      return value;
    H.propertyTypeCastError(value, property);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(new P.CyclicInitializationError("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  random64: function() {
    return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
  },
  getIsolateAffinityTag: function($name) {
    return init.getIsolateTag($name);
  },
  createRuntimeType: function($name) {
    return new H.TypeImpl($name, null);
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, t1, argument;
    if (types == null)
      return "";
    buffer = new P.StringBuffer("");
    for (index = startIndex, firstArgument = true, allDynamic = true, t1 = ""; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents = t1 + ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      t1 = buffer._contents += H.S(H.runtimeTypeToString(argument, onTypeVariable));
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  getRuntimeTypeString: function(object) {
    var className = J.getInterceptor(object).constructor.builtin$cls;
    if (object == null)
      return className;
    return className + H.joinArguments(object.$builtinTypeInfo, 0, null);
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (substitution == null || typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  checkSubtype: function(object, isField, checks, asField) {
    var $arguments, interceptor;
    if (object == null)
      return false;
    $arguments = H.getRuntimeTypeInfo(object);
    interceptor = J.getInterceptor(object);
    if (interceptor[isField] == null)
      return false;
    return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  isSubtype: function(s, t) {
    var t1, typeOfS, t2, typeOfT, $name, test, typeOfSPrototype, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t)
      return H.isFunctionSubtype(s, t);
    if ("func" in s)
      return t.builtin$cls === "Function";
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      test = "$is" + H.S($name);
      typeOfSPrototype = typeOfS.prototype;
      if (!(test in typeOfSPrototype))
        return false;
      substitution = typeOfSPrototype["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var t1, sLength, tLength, i, t2;
    t1 = t == null;
    if (t1 && s == null)
      return true;
    if (t1)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = Array;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto = Object.getPrototypeOf(obj);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, fun, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      fun = function() {
      };
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null) {
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            fun.prototype = proto;
          }
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_gkc();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc0, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  stringContainsUnchecked: function(receiver, other, startIndex) {
    return receiver.indexOf(other, startIndex) >= 0;
  },
  stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
    var $length, t1, i;
    H.checkString(replacement);
    if (pattern === "")
      if (receiver === "")
        return replacement;
      else {
        $length = receiver.length;
        for (t1 = replacement, i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    else
      return receiver.replace(new RegExp(pattern.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), replacement.replace(/\$/g, "$$$$"));
  },
  stringReplaceFirstUnchecked: function(receiver, pattern, replacement, startIndex) {
    var index = receiver.indexOf(pattern, startIndex);
    if (index < 0)
      return receiver;
    return H.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
  },
  stringReplaceRangeUnchecked: function(receiver, start, end, replacement) {
    var prefix, suffix;
    prefix = receiver.substring(0, start);
    suffix = receiver.substring(end);
    return prefix + replacement + suffix;
  },
  ConstantMap: {
    "^": "Object;",
    get$isEmpty: function(_) {
      return J.$eq(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !J.$eq(this.get$length(this), 0);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    _throwUnmodifiable$0: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    $indexSet: function(_, key, val) {
      return this._throwUnmodifiable$0();
    },
    $isMap: 1
  },
  ConstantStringMap: {
    "^": "ConstantMap;length>,__js_helper$_jsObject,__js_helper$_keys",
    containsKey$1: function(key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this.__js_helper$_jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this.__js_helper$_jsObject[key];
    },
    forEach$1: function(_, f) {
      var keys, i, key;
      keys = this.__js_helper$_keys;
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        f.call$2(key, this._fetch$1(key));
      }
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new H._ConstantMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    $isEfficientLength: 1
  },
  _ConstantMapKeyIterable: {
    "^": "IterableBase;_map",
    get$iterator: function(_) {
      return J.get$iterator$ax(this._map.__js_helper$_keys);
    },
    get$length: function(_) {
      return J.get$length$asx(this._map.__js_helper$_keys);
    }
  },
  JSInvocationMirror: {
    "^": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
    get$memberName: function() {
      return this.__js_helper$_memberName;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index;
      if (this._kind === 1)
        return C.List_empty;
      t1 = this._arguments;
      argumentCount = t1.length - this._namedArgumentNames.length;
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      list.immutable$list = true;
      list.fixed$length = true;
      return list;
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4;
      if (this._kind !== 0)
        return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol, null);
      t1 = this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount;
      if (namedArgumentCount === 0)
        return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol, null);
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol, null);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t3 = t1[i];
        t4 = namedArgumentsStartIndex + i;
        if (t4 < 0 || t4 >= t2.length)
          return H.ioore(t2, t4);
        map.$indexSet(0, new H.Symbol0(t3), t2[t4]);
      }
      return map;
    }
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data>,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    defaultValue$1: function(_, parameter) {
      var t1 = this.requiredParameterCount;
      if (typeof parameter !== "number")
        return parameter.$lt();
      if (parameter < t1)
        return;
      return this.data[3 + parameter - t1];
    },
    static: {ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = Array;
        data = data;
        requiredParametersInfo = data[0];
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  Primitives_initTicker_closure: {
    "^": "Closure:0;_captured_performance_0",
    call$0: function() {
      return C.JSNumber_methods.toInt$0(Math.floor(1000 * this._captured_performance_0.now()));
    }
  },
  Primitives_functionNoSuchMethod_closure: {
    "^": "Closure:3;__js_helper$_box_0,_captured_arguments_1,_captured_namedArgumentList_2",
    call$2: function($name, argument) {
      var t1 = this.__js_helper$_box_0;
      t1._captured_names_1 = t1._captured_names_1 + "$" + H.S($name);
      this._captured_namedArgumentList_2.push($name);
      this._captured_arguments_1.push(argument);
      ++t1._captured_argumentCount_0;
    }
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
          var $argumentsExpr$ = '$arguments$';
          try {
            $expr$.$method$($argumentsExpr$);
          } catch (e) {
            return e.message;
          }
        }(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
          try {
            $expr$.$method$;
          } catch (e) {
            return e.message;
          }
        }(expression);
      }}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    }
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure:2;_captured_ex_0",
    call$1: function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this._captured_ex_0;
      return error;
    }
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure:0;_captured_closure_0",
    call$0: function() {
      return this._captured_closure_0.call$0();
    }
  },
  invokeClosure_closure0: {
    "^": "Closure:0;_captured_closure_1,_captured_arg1_2",
    call$0: function() {
      return this._captured_closure_1.call$1(this._captured_arg1_2);
    }
  },
  invokeClosure_closure1: {
    "^": "Closure:0;_captured_closure_3,_captured_arg1_4,_captured_arg2_5",
    call$0: function() {
      return this._captured_closure_3.call$2(this._captured_arg1_4, this._captured_arg2_5);
    }
  },
  invokeClosure_closure2: {
    "^": "Closure:0;_captured_closure_6,_captured_arg1_7,_captured_arg2_8,_captured_arg3_9",
    call$0: function() {
      return this._captured_closure_6.call$3(this._captured_arg1_7, this._captured_arg2_8, this._captured_arg3_9);
    }
  },
  invokeClosure_closure3: {
    "^": "Closure:0;_captured_closure_10,_captured_arg1_11,_captured_arg2_12,_captured_arg3_13,_captured_arg4_14",
    call$0: function() {
      return this._captured_closure_10.call$4(this._captured_arg1_11, this._captured_arg2_12, this._captured_arg3_13, this._captured_arg4_14);
    }
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    },
    get$$call: function() {
      return this;
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    }
  },
  TearOffClosure: {
    "^": "Closure;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this.__js_helper$_target));
    },
    static: {BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = Array;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  CastErrorImplementation: {
    "^": "Error;message>",
    toString$0: function(_) {
      return this.message;
    },
    static: {CastErrorImplementation$: function(actualType, expectedType) {
        return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
      }}
  },
  RuntimeError: {
    "^": "Error;message>",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = {func: "dynafunc"};
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = Object.create(null);
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    }
  },
  TypeImpl: {
    "^": "Object;_typeName,_unmangledName",
    toString$0: function(_) {
      var t1, unmangledName;
      t1 = this._unmangledName;
      if (t1 != null)
        return t1;
      unmangledName = this._typeName.replace(/[^<,> ]+/g, function(m) {
        return init.mangledGlobalNames[m] || m;
      });
      this._unmangledName = unmangledName;
      return unmangledName;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._typeName);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.TypeImpl && J.$eq(this._typeName, other._typeName);
    }
  },
  JsLinkedHashMap: {
    "^": "Object;__js_helper$_length,__js_helper$_strings,__js_helper$_nums,__js_helper$_rest,__js_helper$_first,__js_helper$_last,__js_helper$_modifications",
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this.__js_helper$_length !== 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new H.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new H.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new H.JsLinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this.__js_helper$_strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this.__js_helper$_nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var rest = this.__js_helper$_rest;
      if (rest == null)
        return false;
      return this.internalFindBucketIndex$2(rest[this.internalComputeHashCode$1(key)], key) >= 0;
    },
    addAll$1: function(_, other) {
      other.forEach$1(0, new H.JsLinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this.__js_helper$_strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$hashMapCellValue();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this.__js_helper$_nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$hashMapCellValue();
      } else
        return this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var rest, bucket, index;
      rest = this.__js_helper$_rest;
      if (rest == null)
        return;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$hashMapCellValue();
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this.__js_helper$_strings;
        if (strings == null) {
          strings = H.JsLinkedHashMap__newHashTable();
          this.__js_helper$_strings = strings;
        }
        this.__js_helper$_addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this.__js_helper$_nums;
        if (nums == null) {
          nums = H.JsLinkedHashMap__newHashTable();
          this.__js_helper$_nums = nums;
        }
        this.__js_helper$_addHashTableEntry$3(nums, key, value);
      } else
        this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this.__js_helper$_rest;
      if (rest == null) {
        rest = H.JsLinkedHashMap__newHashTable();
        this.__js_helper$_rest = rest;
      }
      hash = this.internalComputeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this.__js_helper$_newLinkedCell$2(key, value)];
      else {
        index = this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$hashMapCellValue(value);
        else
          bucket.push(this.__js_helper$_newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value;
      if (this.containsKey$1(key))
        return this.$index(0, key);
      value = ifAbsent.call$0();
      this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this.__js_helper$_removeHashTableEntry$2(this.__js_helper$_strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this.__js_helper$_removeHashTableEntry$2(this.__js_helper$_nums, key);
      else
        return this.internalRemove$1(key);
    },
    internalRemove$1: function(key) {
      var rest, bucket, index, cell;
      rest = this.__js_helper$_rest;
      if (rest == null)
        return;
      bucket = rest[this.internalComputeHashCode$1(key)];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this.__js_helper$_unlinkCell$1(cell);
      return cell.get$hashMapCellValue();
    },
    clear$0: function(_) {
      if (this.__js_helper$_length > 0) {
        this.__js_helper$_last = null;
        this.__js_helper$_first = null;
        this.__js_helper$_rest = null;
        this.__js_helper$_nums = null;
        this.__js_helper$_strings = null;
        this.__js_helper$_length = 0;
        this.__js_helper$_modifications = this.__js_helper$_modifications + 1 & 67108863;
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this.__js_helper$_first;
      modifications = this.__js_helper$_modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== this.__js_helper$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.__js_helper$_next;
      }
    },
    __js_helper$_addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this.__js_helper$_newLinkedCell$2(key, value);
      else
        cell.set$hashMapCellValue(value);
    },
    __js_helper$_removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this.__js_helper$_unlinkCell$1(cell);
      delete table[key];
      return cell.get$hashMapCellValue();
    },
    __js_helper$_newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new H.LinkedHashMapCell(key, value, null, null);
      if (this.__js_helper$_first == null) {
        this.__js_helper$_last = cell;
        this.__js_helper$_first = cell;
      } else {
        last = this.__js_helper$_last;
        cell.__js_helper$_previous = last;
        last.__js_helper$_next = cell;
        this.__js_helper$_last = cell;
      }
      ++this.__js_helper$_length;
      this.__js_helper$_modifications = this.__js_helper$_modifications + 1 & 67108863;
      return cell;
    },
    __js_helper$_unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$__js_helper$_previous();
      next = cell.get$__js_helper$_next();
      if (previous == null)
        this.__js_helper$_first = next;
      else
        previous.__js_helper$_next = next;
      if (next == null)
        this.__js_helper$_last = previous;
      else
        next.__js_helper$_previous = previous;
      --this.__js_helper$_length;
      this.__js_helper$_modifications = this.__js_helper$_modifications + 1 & 67108863;
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$hashMapCellKey(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isInternalMap: 1,
    $isMap: 1,
    static: {JsLinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  JsLinkedHashMap_values_closure: {
    "^": "Closure:2;__js_helper$_captured_this_0",
    call$1: [function(each) {
      return this.__js_helper$_captured_this_0.$index(0, each);
    }, null, null, 2, 0, null, 12, "call"]
  },
  JsLinkedHashMap_addAll_closure: {
    "^": "Closure;__js_helper$_captured_this_0",
    call$2: function(key, value) {
      this.__js_helper$_captured_this_0.$indexSet(0, key, value);
    },
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "", args: [K, V]};
      }, this.__js_helper$_captured_this_0, "JsLinkedHashMap");
    }
  },
  LinkedHashMapCell: {
    "^": "Object;hashMapCellKey<,hashMapCellValue@,__js_helper$_next<,__js_helper$_previous<"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new H.LinkedHashMapKeyIterator(t1, t1.__js_helper$_modifications, null, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      t2.__js_helper$_cell = t1.__js_helper$_first;
      return t2;
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1.__js_helper$_first;
      modifications = t1.__js_helper$_modifications;
      for (; cell != null;) {
        f.call$1(cell.hashMapCellKey);
        if (modifications !== t1.__js_helper$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell.__js_helper$_next;
      }
    },
    $isEfficientLength: 1
  },
  LinkedHashMapKeyIterator: {
    "^": "Object;_map,__js_helper$_modifications,__js_helper$_cell,__js_helper$_current",
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this.__js_helper$_modifications !== t1.__js_helper$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this.__js_helper$_cell;
        if (t1 == null) {
          this.__js_helper$_current = null;
          return false;
        } else {
          this.__js_helper$_current = t1.hashMapCellKey;
          this.__js_helper$_cell = t1.__js_helper$_next;
          return true;
        }
      }
    }
  },
  initHooks_closure: {
    "^": "Closure:2;_captured_getTag_0",
    call$1: function(o) {
      return this._captured_getTag_0(o);
    }
  },
  initHooks_closure0: {
    "^": "Closure:4;_captured_getUnknownTag_1",
    call$2: function(o, tag) {
      return this._captured_getUnknownTag_1(o, tag);
    }
  },
  initHooks_closure1: {
    "^": "Closure:5;_captured_prototypeForTag_2",
    call$1: function(tag) {
      return this._captured_prototypeForTag_2(tag);
    }
  },
  JSSyntaxRegExp: {
    "^": "Object;pattern,_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
    toString$0: function(_) {
      return "RegExp/" + this.pattern + "/";
    },
    get$_nativeGlobalVersion: function() {
      var t1 = this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
      this._nativeGlobalRegExp = t1;
      return t1;
    },
    allMatches$2: function(_, string, start) {
      H.checkString(string);
      H.checkInt(start);
      if (start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return new H._AllMatchesIterable(this, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2: function(string, start) {
      var regexp, match;
      regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return H._MatchImplementation$(this, match);
    },
    static: {JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
        var m, i, g, regexp;
        H.checkString(source);
        m = multiLine ? "m" : "";
        i = caseSensitive ? "" : "i";
        g = global ? "g" : "";
        regexp = function() {
          try {
            return new RegExp(source, m + i + g);
          } catch (e) {
            return e;
          }
        }();
        if (regexp instanceof RegExp)
          return regexp;
        throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
      }}
  },
  _MatchImplementation: {
    "^": "Object;pattern,_match",
    group$1: function(index) {
      var t1 = this._match;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $index: function(_, index) {
      var t1 = this._match;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    _MatchImplementation$2: function(pattern, _match) {
    },
    static: {_MatchImplementation$: function(pattern, _match) {
        var t1 = new H._MatchImplementation(pattern, _match);
        t1._MatchImplementation$2(pattern, _match);
        return t1;
      }}
  },
  _AllMatchesIterable: {
    "^": "IterableBase;_re,__js_helper$_string,__js_helper$_start",
    get$iterator: function(_) {
      return new H._AllMatchesIterator(this._re, this.__js_helper$_string, this.__js_helper$_start, null);
    },
    $asIterableBase: function() {
      return [P.Match];
    },
    $asIterable: function() {
      return [P.Match];
    }
  },
  _AllMatchesIterator: {
    "^": "Object;_regExp,__js_helper$_string,_nextIndex,__js_helper$_current",
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t1, t2, match, t3, nextIndex;
      t1 = this.__js_helper$_string;
      if (t1 == null)
        return false;
      t2 = this._nextIndex;
      if (t2 <= t1.length) {
        match = this._regExp._execGlobal$2(t1, t2);
        if (match != null) {
          this.__js_helper$_current = match;
          t1 = match._match;
          t2 = t1.index;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t3 = J.get$length$asx(t1[0]);
          if (typeof t3 !== "number")
            return H.iae(t3);
          nextIndex = t2 + t3;
          this._nextIndex = t1.index === nextIndex ? nextIndex + 1 : nextIndex;
          return true;
        }
      }
      this.__js_helper$_current = null;
      this.__js_helper$_string = null;
      return false;
    }
  }
}],
["ace", "package:ace/ace.dart", , E, {
  "^": "",
  edit: function(element) {
    var t1;
    $.implementation.toString;
    t1 = J.$index$asx($.get$context(), "ace").callMethod$2("edit", [element]);
    J.$indexSet$ax(t1, "$blockScrolling", 1 / 0);
    return new B._EditorProxy(null, null, null, null, null, null, null, null, null, t1, null);
  },
  Disposable: {
    "^": "Object;"
  },
  Implementation: {
    "^": "Object;",
    getExtension$2$separator: function(path, separator) {
      var t1, index, t2;
      t1 = J.getInterceptor$asx(path);
      index = t1.lastIndexOf$1(path, separator);
      if (index >= 0) {
        t2 = t1.get$length(path);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = index + 1 >= t2;
      } else
        t2 = true;
      if (t2)
        return path;
      return t1.substring$1(path, index + 1).toLowerCase();
    }
  },
  Completion: {
    "^": "Object;value>,snippet<,score<,meta<"
  },
  Point: {
    "^": "Object;row,column",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof E.Point))
        return false;
      return J.$eq(this.row, other.row) && J.$eq(this.column, other.column);
    },
    get$hashCode: function(_) {
      return J.$xor$n(J.get$hashCode$(this.row), J.get$hashCode$(this.column));
    },
    toString$0: function(_) {
      return "Point: [" + H.S(this.row) + "/" + H.S(this.column) + "]";
    }
  }
}],
["ace.proxy", "package:ace/proxy.dart", , B, {
  "^": "",
  _context: function() {
    return $.get$context();
  },
  _jsMap: function(map) {
    var jsMap = P.JsObject_JsObject($.get$_Object(), null);
    map.forEach$1(0, new B._jsMap_closure(jsMap));
    return jsMap;
  },
  _jsCompletion: [function(c) {
    var jsMap = B._jsMap(P.LinkedHashMap_LinkedHashMap$_literal(["value", J.get$value$x(c)], null, null));
    c.get$snippet();
    J.$indexSet$ax(jsMap, "snippet", c.get$snippet());
    c.get$score();
    J.$indexSet$ax(jsMap, "score", c.get$score());
    c.get$meta();
    J.$indexSet$ax(jsMap, "meta", c.get$meta());
    return jsMap;
  }, "call$1", "_jsCompletion$closure", 2, 0, 71, 13],
  _ProxyImplementation: {
    "^": "Implementation;",
    require$1: function(modulePath) {
      var module = J.$index$asx($.get$context(), "ace").callMethod$2("require", [modulePath]);
      if (modulePath === "ace/ext/language_tools")
        return new B._LanguageToolsProxy(module, null);
      return module;
    }
  },
  _jsMap_closure: {
    "^": "Closure:6;_captured_jsMap_0",
    call$2: function(k, v) {
      J.$indexSet$ax(this._captured_jsMap_0, k, v);
    }
  },
  HasProxy: {
    "^": "Disposable:7;",
    call$2: function($name, args) {
      return this._proxy.callMethod$2($name, args);
    },
    call$1: function($name) {
      return this.call$2($name, null);
    },
    dispose$0: function() {
      if (this._proxy == null) {
        var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1._asyncComplete$1(null);
        return t1;
      }
      return this._onDispose$0().whenComplete$1(new B.HasProxy_dispose_closure(this));
    },
    _onDispose$0: function() {
      var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1._asyncComplete$1(null);
      return t1;
    },
    HasProxy$async$1: function(getProxy) {
      getProxy.then$1(new B.HasProxy$async_closure(this));
    },
    $isFunction: 1
  },
  HasProxy$async_closure: {
    "^": "Closure:2;_proxy$_captured_this_0",
    call$1: [function(proxy) {
      this._proxy$_captured_this_0._proxy = proxy;
      return proxy;
    }, null, null, 2, 0, null, 14, "call"]
  },
  HasProxy_dispose_closure: {
    "^": "Closure:0;_proxy$_captured_this_0",
    call$0: [function() {
      this._proxy$_captured_this_0._proxy = null;
    }, null, null, 0, 0, null, "call"]
  },
  _ConfigProxy: {
    "^": "HasProxy;_proxy,_onHasProxy",
    loadModule$2: function(moduleType, modulePath) {
      var t1, completer;
      t1 = P.JsObject;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      t1 = [];
      C.JSArray_methods.addAll$1(t1, C.JSArray_methods.map$1([moduleType, modulePath], P._convertToJS$closure()));
      t1 = H.setRuntimeTypeInfo(new P.JsArray(t1), [null]);
      this._proxy.callMethod$2("loadModule", [t1, new B._ConfigProxy_loadModule_closure(completer)]);
      return completer.future;
    }
  },
  _ConfigProxy_loadModule_closure: {
    "^": "Closure:2;_captured_completer_0",
    call$1: [function(module) {
      this._captured_completer_0.complete$1(0, module);
    }, null, null, 2, 0, null, 15, "call"]
  },
  _EditSessionProxy: {
    "^": "HasProxy;_onChange,_onChangeAnnotation,_onChangeBackMarker,_onChangeBreakpoint,_onChangeFold,_onChangeFrontMarker,_onChangeOverwrite,_onChangeScrollLeft,_onChangeScrollTop,_onChangeTabSize,_onChangeWrapLimit,_onChangeWrapMode,_proxy,_onHasProxy",
    get$length: function(_) {
      return this._proxy.callMethod$2("getLength", null);
    },
    set$mode: function(_, mode) {
      var t1 = mode._proxy;
      t1 = t1 != null ? t1 : mode.path;
      this._proxy.callMethod$2("setMode", [t1]);
    },
    get$value: function(_) {
      return this._proxy.callMethod$2("getValue", null);
    },
    _onDispose$0: function() {
      var f = H.setRuntimeTypeInfo([], [P.Future]);
      return P.Future_wait(f, null, false);
    },
    toString$0: function(_) {
      return this._proxy.callMethod$2("toString", null);
    }
  },
  _EditorProxy: {
    "^": "HasProxy;_onBlur,_onLinkClick,_onLinkHover,_onChange,_onChangeSelection,_onChangeSession,_onCopy,_onFocus,_onPaste,_proxy,_onHasProxy",
    set$theme: function(theme) {
      var t1 = theme._proxy;
      t1 = t1 != null ? t1 : theme.path;
      this._proxy.callMethod$2("setTheme", [t1]);
    },
    get$value: function(_) {
      return this._proxy.callMethod$2("getValue", null);
    },
    _onDispose$0: function() {
      var f = H.setRuntimeTypeInfo([], [P.Future]);
      return P.Future_wait(f, null, false);
    },
    setValue$2: function(value, cursorPosition) {
      return this._proxy.callMethod$2("setValue", [value, cursorPosition]);
    },
    setValue$1: function(value) {
      return this.setValue$2(value, 0);
    }
  },
  _AutoCompleterReverseProxy: {
    "^": "HasProxy;getCompletions,_proxy,_onHasProxy",
    _onDispose$0: function() {
      this._proxy.deleteProperty$1("getCompletions");
      var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1._asyncComplete$1(null);
      return t1;
    },
    _AutoCompleterReverseProxy$1: function(getCompletions) {
      J.$indexSet$ax(this._proxy, "getCompletions", new B._AutoCompleterReverseProxy_closure(this));
    },
    getCompletions$4: function(arg0, arg1, arg2, arg3) {
      return this.getCompletions.call$4(arg0, arg1, arg2, arg3);
    },
    static: {_AutoCompleterReverseProxy$: function(getCompletions) {
        var t1 = new B._AutoCompleterReverseProxy(getCompletions, P.JsObject_JsObject($.get$_Object(), null), null);
        t1._AutoCompleterReverseProxy$1(getCompletions);
        return t1;
      }}
  },
  _AutoCompleterReverseProxy_closure: {
    "^": "Closure:8;_proxy$_captured_this_0",
    call$5: [function(editor, session, pos, prefix, callback) {
      var _editor, _session, t1;
      if (editor == null)
        _editor = null;
      else {
        _editor = new B._EditorProxy(null, null, null, null, null, null, null, null, null, editor, null);
        J.$indexSet$ax(editor, "$blockScrolling", 1 / 0);
      }
      _session = session == null ? null : new B._EditSessionProxy(null, null, null, null, null, null, null, null, null, null, null, null, session, null);
      t1 = J.getInterceptor$asx(pos);
      this._proxy$_captured_this_0.getCompletions$4(_editor, _session, new E.Point(t1.$index(pos, "row"), t1.$index(pos, "column")), prefix).then$1(new B._AutoCompleterReverseProxy__closure(callback)).catchError$1(new B._AutoCompleterReverseProxy__closure0(callback)).whenComplete$1(new B._AutoCompleterReverseProxy__closure1(_editor, _session));
    }, null, null, 10, 0, null, 16, 17, 18, 19, 20, "call"]
  },
  _AutoCompleterReverseProxy__closure: {
    "^": "Closure:9;_proxy$_captured_callback_1",
    call$1: [function(results) {
      var t1 = [];
      C.JSArray_methods.addAll$1(t1, J.map$1$ax(results, B._jsCompletion$closure()).map$1(0, P._convertToJS$closure()));
      this._proxy$_captured_callback_1.apply$1([null, H.setRuntimeTypeInfo(new P.JsArray(t1), [null])]);
    }, null, null, 2, 0, null, 21, "call"]
  },
  _AutoCompleterReverseProxy__closure0: {
    "^": "Closure:2;_captured_callback_2",
    call$1: [function(e) {
      var t1 = [];
      C.JSArray_methods.addAll$1(t1, C.JSArray_methods.map$1([], P._convertToJS$closure()));
      this._captured_callback_2.apply$1([null, H.setRuntimeTypeInfo(new P.JsArray(t1), [null])]);
    }, null, null, 2, 0, null, 3, "call"]
  },
  _AutoCompleterReverseProxy__closure1: {
    "^": "Closure:0;_captured__editor_3,_captured__session_4",
    call$0: [function() {
      var t1 = this._captured__editor_3;
      if (t1 != null)
        t1.dispose$0();
      t1 = this._captured__session_4;
      if (t1 != null)
        t1.dispose$0();
    }, null, null, 0, 0, null, "call"]
  },
  _LanguageToolsProxy: {
    "^": "HasProxy;_proxy,_onHasProxy",
    addCompleter$1: function(completer) {
      var t1 = completer._proxy;
      this._proxy.callMethod$2("addCompleter", [t1]);
    }
  },
  _ModeProxy: {
    "^": "HasProxy;path>,_proxy,_onHasProxy",
    get$name: function(_) {
      return $.implementation.getExtension$2$separator(this.path, "/");
    },
    static: {_ModeProxy$: function(path) {
        var t1, t2;
        $.implementation.toString;
        t1 = new B._ConfigProxy(J.$index$asx(J.$index$asx($.get$context(), "ace"), "config"), null).loadModule$2("mode", path).then$1(new B._ModeProxy_closure());
        t2 = new B._ModeProxy(path, null, t1);
        t2.HasProxy$async$1(t1);
        return t2;
      }}
  },
  _ModeProxy_closure: {
    "^": "Closure:2;",
    call$1: [function(module) {
      var t1, t2;
      t1 = P.JsObject_JsObject(J.$index$asx(module, "Mode"), null);
      t2 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t2._asyncComplete$1(t1);
      return t2;
    }, null, null, 2, 0, null, 15, "call"]
  },
  _ThemeProxy: {
    "^": "HasProxy;path>,_proxy,_onHasProxy",
    get$name: function(_) {
      return $.implementation.getExtension$2$separator(this.path, "/");
    }
  }
}],
["archive", "package:archive/archive.dart", , T, {
  "^": "",
  getCrc32: function(array, crc) {
    var len, len0, ip, ip0, t1;
    len = array.length;
    crc ^= 4294967295;
    for (len0 = len, ip = 0; len0 >= 8;) {
      ip0 = ip + 1;
      if (ip >= len)
        return H.ioore(array, ip);
      t1 = array[ip];
      if (typeof t1 !== "number")
        return H.iae(t1);
      crc = C.List_B8J[(crc ^ t1) & 255] ^ crc >>> 8;
      ip = ip0 + 1;
      if (ip0 >= len)
        return H.ioore(array, ip0);
      t1 = array[ip0];
      if (typeof t1 !== "number")
        return H.iae(t1);
      crc = C.List_B8J[(crc ^ t1) & 255] ^ crc >>> 8;
      ip0 = ip + 1;
      if (ip >= len)
        return H.ioore(array, ip);
      t1 = array[ip];
      if (typeof t1 !== "number")
        return H.iae(t1);
      crc = C.List_B8J[(crc ^ t1) & 255] ^ crc >>> 8;
      ip = ip0 + 1;
      if (ip0 >= len)
        return H.ioore(array, ip0);
      t1 = array[ip0];
      if (typeof t1 !== "number")
        return H.iae(t1);
      crc = C.List_B8J[(crc ^ t1) & 255] ^ crc >>> 8;
      ip0 = ip + 1;
      if (ip >= len)
        return H.ioore(array, ip);
      t1 = array[ip];
      if (typeof t1 !== "number")
        return H.iae(t1);
      crc = C.List_B8J[(crc ^ t1) & 255] ^ crc >>> 8;
      ip = ip0 + 1;
      if (ip0 >= len)
        return H.ioore(array, ip0);
      t1 = array[ip0];
      if (typeof t1 !== "number")
        return H.iae(t1);
      crc = C.List_B8J[(crc ^ t1) & 255] ^ crc >>> 8;
      ip0 = ip + 1;
      if (ip >= len)
        return H.ioore(array, ip);
      t1 = array[ip];
      if (typeof t1 !== "number")
        return H.iae(t1);
      crc = C.List_B8J[(crc ^ t1) & 255] ^ crc >>> 8;
      ip = ip0 + 1;
      if (ip0 >= len)
        return H.ioore(array, ip0);
      t1 = array[ip0];
      if (typeof t1 !== "number")
        return H.iae(t1);
      crc = C.List_B8J[(crc ^ t1) & 255] ^ crc >>> 8;
      len0 -= 8;
    }
    if (len0 > 0)
      do {
        ip0 = ip + 1;
        if (ip >= len)
          return H.ioore(array, ip);
        t1 = array[ip];
        if (typeof t1 !== "number")
          return H.iae(t1);
        crc = C.List_B8J[(crc ^ t1) & 255] ^ crc >>> 8;
        if (--len0, len0 > 0) {
          ip = ip0;
          continue;
        } else
          break;
      } while (true);
    return (crc ^ 4294967295) >>> 0;
  },
  ArchiveException: {
    "^": "Object;message>",
    toString$0: function(_) {
      return "ArchiveException: " + this.message;
    },
    static: {ArchiveException$: function(message) {
        return new T.ArchiveException(message);
      }}
  },
  InputStream: {
    "^": "Object;buffer>,offset>,start,byteOrder,_archive$_length",
    get$position: function(_) {
      var t1, t2;
      t1 = this.offset;
      t2 = this.start;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 - t2;
    },
    get$length: function(_) {
      var t1, t2, t3;
      t1 = this._archive$_length;
      t2 = this.offset;
      t3 = this.start;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      return J.$sub$n(t1, t2 - t3);
    },
    $index: function(_, index) {
      var t1 = this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof index !== "number")
        return H.iae(index);
      return J.$index$asx(this.buffer, t1 + index);
    },
    indexOf$2: function(_, value, offset) {
      var t1, i, t2, t3, end;
      t1 = this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      i = t1 + offset;
      t2 = this._archive$_length;
      t3 = this.start;
      if (typeof t3 !== "number")
        return H.iae(t3);
      t2 = J.$sub$n(t2, t1 - t3);
      if (typeof t2 !== "number")
        return H.iae(t2);
      end = t1 + t2;
      t2 = this.buffer;
      t1 = J.getInterceptor$asx(t2);
      for (; i < end; ++i)
        if (J.$eq(t1.$index(t2, i), value))
          return i - t3;
      return -1;
    },
    indexOf$1: function($receiver, value) {
      return this.indexOf$2($receiver, value, 0);
    },
    skip$1: function(_, count) {
      var t1 = this.offset;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof count !== "number")
        return H.iae(count);
      this.offset = t1 + count;
    },
    readUint32$0: function() {
      var t1, t2, t3, b1, b2, b3, b4;
      t1 = this.buffer;
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      t3 = J.getInterceptor$asx(t1);
      b1 = J.$and$n(t3.$index(t1, t2), 255);
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      b2 = J.$and$n(t3.$index(t1, t2), 255);
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      b3 = J.$and$n(t3.$index(t1, t2), 255);
      t2 = this.offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this.offset = t2 + 1;
      b4 = J.$and$n(t3.$index(t1, t2), 255);
      if (this.byteOrder === 1)
        return (b1 << 24 | b2 << 16 | b3 << 8 | b4) >>> 0;
      return (b4 << 24 | b3 << 16 | b2 << 8 | b1) >>> 0;
    },
    InputStream$4$byteOrder$length$start: function(data, byteOrder, $length, start) {
      this._archive$_length = $length == null ? J.get$length$asx(this.buffer) : $length;
      this.offset = start;
    },
    static: {InputStream$: function(data, byteOrder, $length, start) {
        var t1 = J.getInterceptor(data);
        if (!!t1.$isByteData) {
          t1 = t1.get$buffer(data);
          t1 = (t1 && C.NativeByteBuffer_methods).asUint8List$2(t1, 0, null);
        } else
          t1 = data;
        t1 = new T.InputStream(t1, null, start, byteOrder, null);
        t1.InputStream$4$byteOrder$length$start(data, byteOrder, $length, start);
        return t1;
      }}
  },
  OutputStream: {
    "^": "Object;length>,byteOrder,_archive$_buffer",
    writeBytes$2: function(bytes, len) {
      var t1, t2, t3, t4;
      len = bytes.length;
      for (; t1 = this.length, t2 = t1 + len, t3 = this._archive$_buffer, t4 = t3.length, t2 > t4;)
        this._expandBuffer$1(t2 - t4);
      C.NativeUint8List_methods.setRange$3(t3, t1, t2, bytes);
      this.length += len;
    },
    writeBytes$1: function(bytes) {
      return this.writeBytes$2(bytes, null);
    },
    writeInputStream$1: function(bytes) {
      var t1, t2, t3, t4, t5;
      t1 = bytes.start;
      while (true) {
        t2 = this.length;
        t3 = bytes._archive$_length;
        t4 = bytes.offset;
        if (typeof t4 !== "number")
          return t4.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t4 = J.$sub$n(t3, t4 - t1);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t3 = this._archive$_buffer;
        if (!(t2 + t4 > t3.length))
          break;
        t2 = this.length;
        t3 = bytes._archive$_length;
        t4 = bytes.offset;
        if (typeof t4 !== "number")
          return t4.$sub();
        t4 = J.$sub$n(t3, t4 - t1);
        if (typeof t4 !== "number")
          return H.iae(t4);
        this._expandBuffer$1(t2 + t4 - this._archive$_buffer.length);
      }
      t2 = this.length;
      t4 = bytes._archive$_length;
      t5 = bytes.offset;
      if (typeof t5 !== "number")
        return t5.$sub();
      t5 = J.$sub$n(t4, t5 - t1);
      if (typeof t5 !== "number")
        return H.iae(t5);
      C.NativeUint8List_methods.setRange$4(t3, t2, t2 + t5, bytes.buffer, bytes.offset);
      t5 = this.length;
      t2 = bytes._archive$_length;
      t3 = bytes.offset;
      if (typeof t3 !== "number")
        return t3.$sub();
      t1 = J.$sub$n(t2, t3 - t1);
      if (typeof t1 !== "number")
        return H.iae(t1);
      this.length = t5 + t1;
    },
    subset$2: function(start, end) {
      var t1;
      if (start < 0)
        start = this.length + start;
      if (end == null)
        end = this.length;
      else if (end < 0)
        end = this.length + end;
      t1 = this._archive$_buffer.buffer;
      return (t1 && C.NativeByteBuffer_methods).asUint8List$2(t1, start, end - start);
    },
    subset$1: function(start) {
      return this.subset$2(start, null);
    },
    _expandBuffer$1: function(required) {
      var blockSize, t1, newBuffer;
      blockSize = required != null ? required > 32768 ? required : 32768 : 32768;
      t1 = this._archive$_buffer.length + blockSize;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t1)));
      newBuffer = new Uint8Array(t1);
      t1 = this._archive$_buffer;
      C.NativeUint8List_methods.setRange$3(newBuffer, 0, t1.length, t1);
      this._archive$_buffer = newBuffer;
    },
    _expandBuffer$0: function() {
      return this._expandBuffer$1(null);
    }
  },
  HuffmanTable: {
    "^": "Object;table,maxCodeLength,minCodeLength",
    HuffmanTable$1: function(lengths) {
      var listSize, t1, i, t2, size, t3, t4, bitLength, code, skip, t5, rtemp, reversed, j, t6;
      listSize = lengths.length;
      for (t1 = listSize, i = 0; i < listSize; ++i) {
        t2 = lengths[i];
        if (t2 > this.maxCodeLength)
          this.maxCodeLength = t2;
        if (t2 < this.minCodeLength)
          this.minCodeLength = t2;
      }
      size = C.JSInt_methods._shlPositive$1(1, this.maxCodeLength);
      t1 = H._checkLength(size);
      t2 = new Uint32Array(t1);
      this.table = t2;
      for (t3 = this.maxCodeLength, t4 = lengths.length, bitLength = 1, code = 0, skip = 2; bitLength <= t3;) {
        for (t5 = bitLength << 16, i = 0; i < listSize; ++i) {
          if (i >= t4)
            return H.ioore(lengths, i);
          if (lengths[i] === bitLength) {
            for (rtemp = code, reversed = 0, j = 0; j < bitLength; ++j) {
              reversed = (reversed << 1 | rtemp & 1) >>> 0;
              rtemp = rtemp >>> 1;
            }
            for (t6 = (t5 | i) >>> 0, j = reversed; j < size; j += skip) {
              if (j < 0 || j >= t1)
                return H.ioore(t2, j);
              t2[j] = t6;
            }
            ++code;
          }
        }
        ++bitLength;
        code = code << 1 >>> 0;
        skip = skip << 1 >>> 0;
      }
    },
    static: {HuffmanTable$: function(lengths) {
        var t1 = new T.HuffmanTable(null, 0, 2147483647);
        t1.HuffmanTable$1(lengths);
        return t1;
      }}
  },
  Inflate: {
    "^": "Object;input,output,_bitBuffer,_bitBufferLen,_blockPos,_fixedLiteralLengthTable,_fixedDistanceTable",
    _inflate$0: function() {
      this._bitBuffer = 0;
      this._bitBufferLen = 0;
      var t1 = this.output;
      t1._archive$_buffer = new Uint8Array(H._checkLength(32768));
      t1.length = 0;
      for (; this._parseBlock$0();)
        ;
    },
    _parseBlock$0: function() {
      var t1, t2, t3, t4, hdr, btype, len, position, $length, bytes, t5;
      t1 = this.input;
      t2 = t1.offset;
      t3 = t1.start;
      t4 = t1._archive$_length;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (typeof t2 !== "number")
        return t2.$ge();
      if (t2 >= t3 + t4)
        return false;
      hdr = this._readBits$1(3);
      btype = hdr >>> 1;
      switch (btype) {
        case 0:
          this._bitBuffer = 0;
          this._bitBufferLen = 0;
          len = this._readBits$1(16);
          if (len === ~this._readBits$1(16) >>> 0)
            H.throwExpression(T.ArchiveException$("Invalid uncompressed block header"));
          t2 = t1._archive$_length;
          t4 = t1.offset;
          if (typeof t4 !== "number")
            return t4.$sub();
          t4 = J.$sub$n(t2, t4 - t3);
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (len > t4)
            H.throwExpression(T.ArchiveException$("Input buffer is broken"));
          t2 = t1.offset;
          if (typeof t2 !== "number")
            return t2.$sub();
          position = t2 - t3 + t3;
          $length = len;
          bytes = T.InputStream$(t1.buffer, t1.byteOrder, $length, position);
          t2 = t1.offset;
          t3 = bytes._archive$_length;
          t4 = bytes.offset;
          t5 = bytes.start;
          if (typeof t4 !== "number")
            return t4.$sub();
          if (typeof t5 !== "number")
            return H.iae(t5);
          t5 = J.$sub$n(t3, t4 - t5);
          if (typeof t2 !== "number")
            return t2.$add();
          if (typeof t5 !== "number")
            return H.iae(t5);
          t1.offset = t2 + t5;
          this.output.writeInputStream$1(bytes);
          break;
        case 1:
          this._decodeHuffman$2(this._fixedLiteralLengthTable, this._fixedDistanceTable);
          break;
        case 2:
          this._parseDynamicHuffmanBlock$0();
          break;
        default:
          throw H.wrapException(T.ArchiveException$("unknown BTYPE: " + btype));
      }
      return (hdr & 1) === 0;
    },
    _readBits$1: function($length) {
      var t1, t2, t3, t4, t5, t6, octet;
      if ($length === 0)
        return 0;
      for (t1 = this.input, t2 = t1.buffer, t3 = J.getInterceptor$asx(t2), t4 = t1.start; t5 = this._bitBufferLen, t5 < $length;) {
        t5 = t1.offset;
        t6 = t1._archive$_length;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t6 !== "number")
          return H.iae(t6);
        if (typeof t5 !== "number")
          return t5.$ge();
        if (t5 >= t4 + t6)
          throw H.wrapException(T.ArchiveException$("input buffer is broken"));
        t1.offset = t5 + 1;
        octet = t3.$index(t2, t5);
        this._bitBuffer = (this._bitBuffer | J.$shl$n(octet, this._bitBufferLen)) >>> 0;
        this._bitBufferLen += 8;
      }
      t1 = this._bitBuffer;
      t2 = C.JSInt_methods._shlPositive$1(1, $length);
      this._bitBuffer = C.JSInt_methods._shrBothPositive$1(t1, $length);
      this._bitBufferLen = t5 - $length;
      return (t1 & t2 - 1) >>> 0;
    },
    _readCodeByTable$1: function(table) {
      var codeTable, maxCodeLength, t1, t2, t3, t4, t5, t6, t7, octet, codeWithLength, codeLength;
      codeTable = table.table;
      maxCodeLength = table.maxCodeLength;
      for (t1 = this.input, t2 = t1.buffer, t3 = J.getInterceptor$asx(t2), t4 = t1.start; t5 = this._bitBufferLen, t5 < maxCodeLength;) {
        t6 = t1.offset;
        t7 = t1._archive$_length;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t7 !== "number")
          return H.iae(t7);
        if (typeof t6 !== "number")
          return t6.$ge();
        if (t6 >= t4 + t7)
          break;
        t1.offset = t6 + 1;
        octet = t3.$index(t2, t6);
        this._bitBuffer = (this._bitBuffer | J.$shl$n(octet, this._bitBufferLen)) >>> 0;
        this._bitBufferLen += 8;
      }
      t1 = this._bitBuffer;
      t2 = (t1 & C.JSInt_methods._shlPositive$1(1, maxCodeLength) - 1) >>> 0;
      if (t2 >= codeTable.length)
        return H.ioore(codeTable, t2);
      codeWithLength = codeTable[t2];
      codeLength = codeWithLength >>> 16;
      this._bitBuffer = C.JSInt_methods._shrBothPositive$1(t1, codeLength);
      this._bitBufferLen = t5 - codeLength;
      return codeWithLength & 65535;
    },
    _parseDynamicHuffmanBlock$0: function() {
      var numLitLengthCodes, numDistanceCodes, numCodeLengths, t1, codeLengths, i, t2, t3, codeLengthsTable, litlenLengths, distLengths, litlen, dist;
      numLitLengthCodes = this._readBits$1(5) + 257;
      numDistanceCodes = this._readBits$1(5) + 1;
      numCodeLengths = this._readBits$1(4) + 4;
      t1 = H._checkLength(19);
      codeLengths = new Uint8Array(t1);
      for (i = 0; i < numCodeLengths; ++i) {
        if (i >= 19)
          return H.ioore(C.List_uSC, i);
        t2 = C.List_uSC[i];
        t3 = this._readBits$1(3);
        if (t2 >= t1)
          return H.ioore(codeLengths, t2);
        codeLengths[t2] = t3;
      }
      codeLengthsTable = T.HuffmanTable$(codeLengths);
      litlenLengths = new Uint8Array(H._checkLength(numLitLengthCodes));
      distLengths = new Uint8Array(H._checkLength(numDistanceCodes));
      litlen = this._decode$3(numLitLengthCodes, codeLengthsTable, litlenLengths);
      dist = this._decode$3(numDistanceCodes, codeLengthsTable, distLengths);
      this._decodeHuffman$2(T.HuffmanTable$(litlen), T.HuffmanTable$(dist));
    },
    _decodeHuffman$2: function(litlen, dist) {
      var t1, code, t2, t3, ti, codeLength, distCode, distance;
      for (t1 = this.output; true;) {
        code = this._readCodeByTable$1(litlen);
        if (code > 285)
          throw H.wrapException(T.ArchiveException$("Invalid Huffman Code " + code));
        if (code === 256)
          break;
        if (code < 256) {
          if (t1.length === t1._archive$_buffer.length)
            t1._expandBuffer$0();
          t2 = t1._archive$_buffer;
          t3 = t1.length++;
          if (t3 >>> 0 !== t3 || t3 >= t2.length)
            return H.ioore(t2, t3);
          t2[t3] = code & 255 & 255;
          continue;
        }
        ti = code - 257;
        if (ti < 0 || ti >= 29)
          return H.ioore(C.List_qQn, ti);
        codeLength = C.List_qQn[ti] + this._readBits$1(C.List_eea[ti]);
        distCode = this._readCodeByTable$1(dist);
        if (distCode <= 29) {
          if (distCode >= 30)
            return H.ioore(C.List_i3t, distCode);
          distance = C.List_i3t[distCode] + this._readBits$1(C.List_X3d0[distCode]);
          for (t2 = -distance; codeLength > distance;) {
            t1.writeBytes$1(t1.subset$1(t2));
            codeLength -= distance;
          }
          if (codeLength === distance)
            t1.writeBytes$1(t1.subset$1(t2));
          else
            t1.writeBytes$1(t1.subset$2(t2, codeLength - distance));
        } else
          throw H.wrapException(T.ArchiveException$("Illegal unused distance symbol"));
      }
      for (t1 = this.input; t2 = this._bitBufferLen, t2 >= 8;) {
        this._bitBufferLen = t2 - 8;
        t2 = t1.offset;
        if (typeof t2 !== "number")
          return t2.$sub();
        t1.offset = t2 - 1;
      }
    },
    _decode$3: function(num, table, lengths) {
      var t1, prev, i, code, repeat, repeat0, i0;
      for (t1 = lengths.length, prev = 0, i = 0; i < num;) {
        code = this._readCodeByTable$1(table);
        switch (code) {
          case 16:
            repeat = 3 + this._readBits$1(2);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = prev;
            }
            break;
          case 17:
            repeat = 3 + this._readBits$1(3);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = 0;
            }
            prev = 0;
            break;
          case 18:
            repeat = 11 + this._readBits$1(7);
            for (; repeat0 = repeat - 1, repeat > 0; repeat = repeat0, i = i0) {
              i0 = i + 1;
              if (i < 0 || i >= t1)
                return H.ioore(lengths, i);
              lengths[i] = 0;
            }
            prev = 0;
            break;
          default:
            if (code > 15)
              throw H.wrapException(T.ArchiveException$("Invalid Huffman Code: " + code));
            i0 = i + 1;
            if (i < 0 || i >= t1)
              return H.ioore(lengths, i);
            lengths[i] = code;
            i = i0;
            prev = code;
            break;
        }
      }
      return lengths;
    }
  }
}],
["chrome.src.common_exp", "package:chrome/src/common_exp.dart", , Z, {
  "^": "",
  ChromeObject: {
    "^": "Object;",
    toString$0: function(_) {
      return J.toString$0(this.jsProxy);
    }
  },
  ArrayBuffer: {
    "^": "ChromeObject;jsProxy",
    getBytes$0: function() {
      var t1, int8View, t2, result, i;
      t1 = this.jsProxy;
      if (!!J.getInterceptor(t1).$isUint8List)
        return H.interceptedTypeCast(t1, "$isUint8List");
      else {
        int8View = P.JsObject_JsObject(J.$index$asx($.get$context(), "Uint8Array"), [t1]);
        t1 = J.getInterceptor$asx(int8View);
        t2 = t1.$index(int8View, "length");
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = Array(t2);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, [P.$int]);
        for (t2 = result.length, i = 0; i < t2; ++i)
          result[i] = t1.$index(int8View, i);
        return result;
      }
    }
  }
}],
["chrome.src.files", "package:chrome/src/files.dart", , M, {
  "^": "",
  CrEntry: {
    "^": "ChromeObject;",
    $isInterceptor: 1
  },
  CrFileEntry: {
    "^": "CrEntry;",
    $isFileEntry: 1,
    $isInterceptor: 1
  },
  ChromeFileEntry: {
    "^": "CrFileEntry;",
    $isFileEntry: 1,
    $isEntry: 1
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableElementError_noElement: function() {
    return new P.StateError("No element");
  },
  IterableElementError_tooFew: function() {
    return new P.StateError("Too few elements");
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
          break;
        j0 = j - 1;
        t1.$indexSet(a, j, t1.$index(a, j0));
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    el2 = t1.$index(a, index2);
    el3 = t1.$index(a, index3);
    el4 = t1.$index(a, index4);
    el5 = t1.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    t1.$indexSet(a, index2, t1.$index(a, left));
    t1.$indexSet(a, index4, t1.$index(a, right));
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            comp = compare.call$2(t1.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              great0 = great - 1;
              if (t2.$lt(comp, 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    t1.$indexSet(a, left, t1.$index(a, t2));
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    t1.$indexSet(a, right, t1.$index(a, t2));
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
        ++less;
      for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
        --great;
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  CodeUnits: {
    "^": "UnmodifiableListBase;_string",
    get$length: function(_) {
      return this._string.length;
    },
    $index: function(_, i) {
      return C.JSString_methods.codeUnitAt$1(this._string, i);
    },
    $asUnmodifiableListBase: function() {
      return [P.$int];
    },
    $asListBase: function() {
      return [P.$int];
    },
    $asObject_ListMixin: function() {
      return [P.$int];
    },
    $asList: function() {
      return [P.$int];
    },
    $asIterable: function() {
      return [P.$int];
    }
  },
  ListIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      return H.setRuntimeTypeInfo(new H.ListIterator(this, this.get$length(this), 0, null), [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$first: function(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    join$1: function(_, separator) {
      var $length, first, buffer, i, t1;
      $length = this.get$length(this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = H.S(this.elementAt$1(0, 0));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
        buffer = new P.StringBuffer(first);
        for (i = 1; i < $length; ++i) {
          buffer._contents += separator;
          buffer._contents += H.S(this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        buffer = new P.StringBuffer("");
        for (i = 0; i < $length; ++i) {
          buffer._contents += H.S(this.elementAt$1(0, i));
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        t1 = buffer._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    map$1: function(_, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(this, f), [null, null]);
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, count, null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
    },
    toList$1$growable: function(_, growable) {
      var result, t1, i;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        t1 = Array(this.get$length(this));
        t1.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      }
      for (i = 0; i < this.get$length(this); ++i) {
        t1 = this.elementAt$1(0, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: 1
  },
  SubListIterable: {
    "^": "ListIterable;_iterable,__internal$_start,_endOrLength",
    get$_endIndex: function() {
      var $length, t1, t2;
      $length = J.get$length$asx(this._iterable);
      t1 = this._endOrLength;
      if (t1 != null) {
        if (typeof t1 !== "number")
          return t1.$gt();
        t2 = t1 > $length;
      } else
        t2 = true;
      if (t2)
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this.__internal$_start;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1, t2, t3;
      $length = J.get$length$asx(this._iterable);
      t1 = this.__internal$_start;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= $length)
        return 0;
      t2 = this._endOrLength;
      if (t2 != null) {
        if (typeof t2 !== "number")
          return t2.$ge();
        t3 = t2 >= $length;
      } else
        t3 = true;
      if (t3)
        return $length - t1;
      if (typeof t2 !== "number")
        return t2.$sub();
      return t2 - t1;
    },
    elementAt$1: function(_, index) {
      var t1, realIndex;
      t1 = this.get$_startIndex();
      if (typeof t1 !== "number")
        return t1.$add();
      realIndex = t1 + index;
      if (!(index < 0)) {
        t1 = this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.IndexError$(index, this, "index", null, null));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    skip$1: function(_, count) {
      var t1, newStart, t2;
      if (typeof count !== "number")
        return count.$lt();
      if (count < 0)
        H.throwExpression(P.RangeError$range(count, 0, null, "count", null));
      t1 = this.__internal$_start;
      if (typeof t1 !== "number")
        return t1.$add();
      newStart = t1 + count;
      t1 = this._endOrLength;
      if (t1 != null) {
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = newStart >= t1;
      } else
        t2 = false;
      if (t2) {
        t1 = new H.EmptyIterable();
        t1.$builtinTypeInfo = this.$builtinTypeInfo;
        return t1;
      }
      return H.SubListIterable$(this._iterable, newStart, t1, H.getTypeArgumentByIndex(this, 0));
    },
    toList$1$growable: function(_, growable) {
      var start, t1, t2, end, end0, t3, $length, result, i;
      start = this.__internal$_start;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      end = t2.get$length(t1);
      end0 = this._endOrLength;
      if (end0 != null) {
        if (typeof end0 !== "number")
          return end0.$lt();
        t3 = end0 < end;
      } else
        t3 = false;
      if (t3)
        end = end0;
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length < 0)
        $length = 0;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(result, $length);
      } else {
        t3 = Array($length);
        t3.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t3, [H.getTypeArgumentByIndex(this, 0)]);
      }
      for (i = 0; i < $length; ++i) {
        t3 = t2.elementAt$1(t1, start + i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t3;
        if (t2.get$length(t1) < end)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t1, t2;
      t1 = this.__internal$_start;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < 0)
        H.throwExpression(P.RangeError$range(t1, 0, null, "start", null));
      t2 = this._endOrLength;
      if (t2 != null) {
        if (typeof t2 !== "number")
          return t2.$lt();
        if (t2 < 0)
          H.throwExpression(P.RangeError$range(t2, 0, null, "end", null));
        if (t1 > t2)
          throw H.wrapException(P.RangeError$range(t1, 0, t2, "start", null));
      }
    },
    static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }}
  },
  ListIterator: {
    "^": "Object;_iterable,__internal$_length,_index,__internal$_current",
    get$current: function() {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this.__internal$_current = null;
        return false;
      }
      this.__internal$_current = t2.elementAt$1(t1, t3);
      ++this._index;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this._iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._iterable);
    },
    get$first: function(_) {
      return this._f$1(J.get$first$ax(this._iterable));
    },
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!J.getInterceptor(iterable).$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable,_f",
    $isEfficientLength: 1
  },
  MappedIterator: {
    "^": "Iterator;__internal$_current,_iterator,_f",
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this.__internal$_current = this._f$1(t1.get$current());
        return true;
      }
      this.__internal$_current = null;
      return false;
    },
    get$current: function() {
      return this.__internal$_current;
    },
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  },
  MappedListIterable: {
    "^": "ListIterable;__internal$_source,_f",
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_source);
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this.__internal$_source, index));
    },
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: 1
  },
  SkipIterable: {
    "^": "IterableBase;_iterable,_skipCount",
    skip$1: function(_, count) {
      var t1 = this._skipCount;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        throw H.wrapException(P.ArgumentError$value(t1, "count is not an integer", null));
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < 0)
        H.throwExpression(P.RangeError$range(t1, 0, null, "count", null));
      if (typeof count !== "number")
        return H.iae(count);
      return H.SkipIterable$_(this._iterable, t1 + count, H.getTypeArgumentByIndex(this, 0));
    },
    get$iterator: function(_) {
      var t1 = this._iterable;
      t1 = new H.SkipIterator(t1.get$iterator(t1), this._skipCount);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    SkipIterable$_$2: function(_iterable, _skipCount, $E) {
      var t1 = this._skipCount;
      if (typeof t1 !== "number" || Math.floor(t1) !== t1)
        throw H.wrapException(P.ArgumentError$value(t1, "count is not an integer", null));
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < 0)
        H.throwExpression(P.RangeError$range(t1, 0, null, "count", null));
    },
    static: {SkipIterable_SkipIterable: function(iterable, count, $E) {
        var t1;
        if (!!iterable.$isEfficientLength) {
          t1 = H.setRuntimeTypeInfo(new H.EfficientLengthSkipIterable(iterable, count), [$E]);
          t1.SkipIterable$_$2(iterable, count, $E);
          return t1;
        }
        return H.SkipIterable$_(iterable, count, $E);
      }, SkipIterable$_: function(_iterable, _skipCount, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SkipIterable(_iterable, _skipCount), [$E]);
        t1.SkipIterable$_$2(_iterable, _skipCount, $E);
        return t1;
      }}
  },
  EfficientLengthSkipIterable: {
    "^": "SkipIterable;_iterable,_skipCount",
    get$length: function(_) {
      var t1, $length;
      t1 = this._iterable;
      $length = J.$sub$n(t1.get$length(t1), this._skipCount);
      if (J.$ge$n($length, 0))
        return $length;
      return 0;
    },
    $isEfficientLength: 1
  },
  SkipIterator: {
    "^": "Iterator;_iterator,_skipCount",
    moveNext$0: function() {
      var t1, i, t2;
      t1 = this._iterator;
      i = 0;
      while (true) {
        t2 = this._skipCount;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        t1.moveNext$0();
        ++i;
      }
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  EmptyIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    forEach$1: function(_, action) {
    },
    get$isEmpty: function(_) {
      return true;
    },
    get$length: function(_) {
      return 0;
    },
    get$first: function(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    map$1: function(_, f) {
      return C.C_EmptyIterable;
    },
    skip$1: function(_, count) {
      if (typeof count !== "number")
        return count.$lt();
      if (count < 0)
        H.throwExpression(P.RangeError$range(count, 0, null, "count", null));
      return this;
    },
    toList$1$growable: function(_, growable) {
      var t1;
      if (growable)
        t1 = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
      else {
        t1 = Array(0);
        t1.fixed$length = Array;
        t1 = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      }
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: 1
  },
  EmptyIterator: {
    "^": "Object;",
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      return;
    }
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  },
  UnmodifiableListMixin: {
    "^": "Object;",
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    $isList: 1,
    $asList: null,
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: null
  },
  UnmodifiableListBase: {
    "^": "ListBase+UnmodifiableListMixin;",
    $isList: 1,
    $asList: null,
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: null
  },
  Symbol0: {
    "^": "Object;_name<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.Symbol0 && J.$eq(this._name, other._name);
    },
    get$hashCode: function(_) {
      var t1 = J.get$hashCode$(this._name);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 536870911 & 664597 * t1;
    },
    toString$0: function(_) {
      return "Symbol(\"" + H.S(this._name) + "\")";
    }
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo(victim ? Object.keys(victim) : [], [null]);
    t1.fixed$length = Array;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _AsyncRun__initializeScheduleImmediate: function() {
    var t1, div, span;
    t1 = {};
    if (self.scheduleImmediate != null)
      return P._AsyncRun__scheduleImmediateJsOverride$closure();
    if (self.MutationObserver != null && self.document != null) {
      div = self.document.createElement("div");
      span = self.document.createElement("span");
      t1._captured_storedCallback_0 = null;
      new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
      return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
    } else if (self.setImmediate != null)
      return P._AsyncRun__scheduleImmediateWithSetImmediate$closure();
    return P._AsyncRun__scheduleImmediateWithTimer$closure();
  },
  _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 72],
  _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateWithSetImmediate$closure", 2, 0, 72],
  _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
    P.Timer__createTimer(C.Duration_0, callback);
  }, "call$1", "_AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 72],
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1) {
      zone.toString;
      return errorHandler;
    } else {
      zone.toString;
      return errorHandler;
    }
  },
  Future_Future$sync: function(computation, $T) {
    var result, T0, error, stackTrace, t1, exception;
    try {
      result = computation.call$0();
      t1 = new P._Future(0, $.Zone__current, null);
      t1.$builtinTypeInfo = [T0];
      t1._asyncComplete$1(result);
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      error = t1;
      stackTrace = H.getTraceFromException(exception);
      return P.Future_Future$error(error, stackTrace, T0);
    }
  },
  Future_Future$error: function(error, stackTrace, $T) {
    var t1;
    error = error != null ? error : new P.NullThrownError();
    t1 = $.Zone__current;
    if (t1 !== C.C__RootZone)
      t1.toString;
    t1 = H.setRuntimeTypeInfo(new P._Future(0, t1, null), [$T]);
    t1._asyncCompleteError$2(error, stackTrace);
    return t1;
  },
  Future_Future$delayed: function(duration, computation, $T) {
    var result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [$T]);
    P.Timer_Timer(duration, new P.Future_Future$delayed_closure(computation, result));
    return result;
  },
  Future_wait: function(futures, cleanUp, eagerError) {
    var t1, result, t2, t3, values;
    t1 = {};
    result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.List]);
    t1._captured_values_0 = null;
    t1._captured_remaining_1 = 0;
    t1._captured_error_2 = null;
    t1._captured_stackTrace_3 = null;
    t2 = new P.Future_wait_handleError(t1, eagerError, cleanUp, result);
    for (t3 = H.setRuntimeTypeInfo(new J.ArrayIterator(futures, futures.length, 0, null), [H.getTypeArgumentByIndex(futures, 0)]); t3.moveNext$0();)
      t3.__interceptors$_current.then$2$onError(new P.Future_wait_closure(t1, eagerError, cleanUp, result, t1._captured_remaining_1++), t2);
    t2 = t1._captured_remaining_1;
    if (t2 === 0) {
      t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1._asyncComplete$1(C.List_empty);
      return t1;
    }
    values = Array(t2);
    values.fixed$length = Array;
    t1._captured_values_0 = values;
    return result;
  },
  Future_forEach: function(input, f) {
    return P.Future_doWhile(new P.Future_forEach_closure(f, J.get$iterator$ax(input)));
  },
  Future_doWhile: function(f) {
    var t1, doneSignal, nextIteration;
    t1 = {};
    doneSignal = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
    t1._captured_nextIteration_0 = null;
    nextIteration = $.Zone__current.bindUnaryCallback$2$runGuarded(new P.Future_doWhile_closure(t1, f, doneSignal), true);
    t1._captured_nextIteration_0 = nextIteration;
    nextIteration.call$1(true);
    return doneSignal;
  },
  _completeWithErrorCallback: function(result, error, stackTrace) {
    $.Zone__current.toString;
    result._completeError$2(error, stackTrace);
  },
  _asyncRunCallbackLoop: function() {
    var t1, t2;
    for (; t1 = $._nextCallback, t1 != null;) {
      $._lastPriorityCallback = null;
      t2 = t1.next;
      $._nextCallback = t2;
      if (t2 == null)
        $._lastCallback = null;
      t1.callback$0();
    }
  },
  _asyncRunCallback: [function() {
    $._isInCallbackLoop = true;
    try {
      P._asyncRunCallbackLoop();
    } finally {
      $._lastPriorityCallback = null;
      $._isInCallbackLoop = false;
      if ($._nextCallback != null)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    }
  }, "call$0", "_asyncRunCallback$closure", 0, 0, 1],
  _scheduleAsyncCallback: function(callback) {
    var t1, newEntry;
    if ($._nextCallback == null) {
      t1 = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      if (!$._isInCallbackLoop)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    } else {
      newEntry = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback.next = newEntry;
      $._lastCallback = newEntry;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (C.C__RootZone === t1) {
      P._rootScheduleMicrotask(null, null, C.C__RootZone, callback);
      return;
    }
    P._rootScheduleMicrotask(null, null, t1, t1.bindCallback$2$runGuarded(callback, true));
  },
  StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
    if (onCancel == null)
      return sync ? new P._NoCallbackSyncStreamController(null, 0, null) : new P._NoCallbackAsyncStreamController(null, 0, null);
    return sync ? H.setRuntimeTypeInfo(new P._SyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]) : H.setRuntimeTypeInfo(new P._AsyncStreamController(onListen, onPause, onResume, onCancel, null, 0, null), [$T]);
  },
  _runGuarded: function(notificationHandler) {
    var result, e, s, exception, t1;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      if (!!J.getInterceptor(result).$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = H.getTraceFromException(exception);
      t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(null, null, t1, e, s);
    }
  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 69, 22],
  _nullErrorHandler: [function(error, stackTrace) {
    var t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(null, null, t1, error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 15, 23, 24, 25],
  _nullDoneHandler: [function() {
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 1],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, replacement, error, stackTrace, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = H.getTraceFromException(exception);
      $.Zone__current.toString;
      replacement = null;
      if (replacement == null)
        onError.call$2(e, s);
      else {
        t1 = J.get$error$x(replacement);
        error = t1;
        stackTrace = replacement.get$stackTrace();
        onError.call$2(error, stackTrace);
      }
    }
  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  _cancelAndValue: function(subscription, future, value) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
    else
      future._complete$1(value);
  },
  _addErrorWithReplacement: function(sink, error, stackTrace) {
    $.Zone__current.toString;
    sink._addError$2(error, stackTrace);
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P.Timer__createTimer(duration, callback);
    }
    return P.Timer__createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  Timer__createTimer: function(duration, callback) {
    var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Zone__enter: function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    var t1, entry, t2;
    t1 = new P._rootHandleUncaughtError_closure(error, stackTrace);
    entry = new P._AsyncCallbackEntry(t1, null);
    t2 = $._nextCallback;
    if (t2 == null) {
      P._scheduleAsyncCallback(t1);
      $._lastPriorityCallback = $._lastCallback;
    } else {
      t1 = $._lastPriorityCallback;
      if (t1 == null) {
        entry.next = t2;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t1.next;
        t1.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    }
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    var t1 = C.C__RootZone !== zone;
    if (t1)
      f = zone.bindCallback$2$runGuarded(f, !(!t1 || C.C__RootZone.get$errorZone() === zone));
    P._scheduleAsyncCallback(f);
  },
  _AsyncRun__initializeScheduleImmediate_internalCallback: {
    "^": "Closure:2;_box_0",
    call$1: [function(_) {
      var t1, f;
      H.leaveJsAsync();
      t1 = this._box_0;
      f = t1._captured_storedCallback_0;
      t1._captured_storedCallback_0 = null;
      f.call$0();
    }, null, null, 2, 0, null, 26, "call"]
  },
  _AsyncRun__initializeScheduleImmediate_closure: {
    "^": "Closure:10;_box_0,_captured_div_1,_captured_span_2",
    call$1: function(callback) {
      var t1, t2;
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      this._box_0._captured_storedCallback_0 = callback;
      t1 = this._captured_div_1;
      t2 = this._captured_span_2;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    }
  },
  _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
    "^": "Closure:0;_captured_callback_0",
    call$0: [function() {
      H.leaveJsAsync();
      this._captured_callback_0.call$0();
    }, null, null, 0, 0, null, "call"]
  },
  _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
    "^": "Closure:0;_captured_callback_0",
    call$0: [function() {
      H.leaveJsAsync();
      this._captured_callback_0.call$0();
    }, null, null, 0, 0, null, "call"]
  },
  _UncaughtAsyncError: {
    "^": "AsyncError;error,stackTrace",
    toString$0: function(_) {
      var result, t1;
      result = "Uncaught Error: " + H.S(this.error);
      t1 = this.stackTrace;
      return t1 != null ? result + ("\nStack Trace:\n" + H.S(t1)) : result;
    },
    static: {_UncaughtAsyncError__getBestStackTrace: function(error, stackTrace) {
        if (stackTrace != null)
          return stackTrace;
        if (!!J.getInterceptor(error).$isError)
          return error.get$stackTrace();
        return;
      }}
  },
  Future: {
    "^": "Object;"
  },
  Future_Future$delayed_closure: {
    "^": "Closure:0;_captured_computation_0,_async$_captured_result_1",
    call$0: function() {
      var e, s, exception, t1;
      try {
        this._async$_captured_result_1._complete$1(null);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        P._completeWithErrorCallback(this._async$_captured_result_1, e, s);
      }
    }
  },
  Future_wait_handleError: {
    "^": "Closure:11;_box_0,_captured_eagerError_1,_captured_cleanUp_2,_captured_result_3",
    call$2: [function(theError, theStackTrace) {
      var t1, t2;
      t1 = this._box_0;
      t2 = --t1._captured_remaining_1;
      if (t1._captured_values_0 != null) {
        t1._captured_values_0 = null;
        if (t1._captured_remaining_1 === 0 || this._captured_eagerError_1)
          this._captured_result_3._completeError$2(theError, theStackTrace);
        else {
          t1._captured_error_2 = theError;
          t1._captured_stackTrace_3 = theStackTrace;
        }
      } else if (t2 === 0 && !this._captured_eagerError_1)
        this._captured_result_3._completeError$2(t1._captured_error_2, t1._captured_stackTrace_3);
    }, null, null, 4, 0, null, 27, 28, "call"]
  },
  Future_wait_handleError_closure: {
    "^": "Closure:0;_captured_cleanUp_4,_captured_value_5",
    call$0: function() {
      this._captured_cleanUp_4.call$1(this._captured_value_5);
    }
  },
  Future_wait_closure: {
    "^": "Closure:12;_box_0,_captured_eagerError_6,_captured_cleanUp_7,_captured_result_8,_captured_pos_9",
    call$1: [function(value) {
      var t1, t2, t3;
      t1 = this._box_0;
      t2 = --t1._captured_remaining_1;
      t3 = t1._captured_values_0;
      if (t3 != null) {
        t1 = this._captured_pos_9;
        if (t1 < 0 || t1 >= t3.length)
          return H.ioore(t3, t1);
        t3[t1] = value;
        if (t2 === 0)
          this._captured_result_8._completeWithValue$1(t3);
      } else if (t1._captured_remaining_1 === 0 && !this._captured_eagerError_6)
        this._captured_result_8._completeError$2(t1._captured_error_2, t1._captured_stackTrace_3);
    }, null, null, 2, 0, null, 22, "call"]
  },
  Future_wait__closure: {
    "^": "Closure:0;_captured_cleanUp_10,_captured_value_11",
    call$0: function() {
      this._captured_cleanUp_10.call$1(this._captured_value_11);
    }
  },
  Future_forEach_closure: {
    "^": "Closure:0;_captured_f_0,_captured_iterator_1",
    call$0: function() {
      var t1 = this._captured_iterator_1;
      if (!t1.moveNext$0())
        return false;
      return P.Future_Future$sync(new P.Future_forEach__closure(this._captured_f_0, t1), null).then$1(new P.Future_forEach__closure0());
    }
  },
  Future_forEach__closure: {
    "^": "Closure:0;_captured_f_2,_captured_iterator_3",
    call$0: function() {
      return this._captured_f_2.call$1(this._captured_iterator_3.get$current());
    }
  },
  Future_forEach__closure0: {
    "^": "Closure:2;",
    call$1: [function(_) {
      return true;
    }, null, null, 2, 0, null, 26, "call"]
  },
  Future_doWhile_closure: {
    "^": "Closure:13;_box_0,_captured_f_1,_captured_doneSignal_2",
    call$1: function(keepGoing) {
      var t1 = this._captured_doneSignal_2;
      if (keepGoing === true)
        P.Future_Future$sync(this._captured_f_1, null).then$2$onError(this._box_0._captured_nextIteration_0, t1.get$_completeError());
      else
        t1._complete$1(null);
    }
  },
  _Completer: {
    "^": "Object;",
    completeError$2: [function(error, stackTrace) {
      error = error != null ? error : new P.NullThrownError();
      if (this.future._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      $.Zone__current.toString;
      this._completeError$2(error, stackTrace);
    }, function(error) {
      return this.completeError$2(error, null);
    }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 14, 23, 24, 25]
  },
  _AsyncCompleter: {
    "^": "_Completer;future",
    complete$1: function(_, value) {
      var t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    },
    complete$0: function($receiver) {
      return this.complete$1($receiver, null);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  },
  _FutureListener: {
    "^": "Object;_nextListener@,result>,state,callback,errorCallback",
    get$_zone: function() {
      return this.result.get$_zone();
    },
    get$handlesValue: function() {
      return (this.state & 1) !== 0;
    },
    get$hasErrorTest: function() {
      return this.state === 6;
    },
    get$handlesComplete: function() {
      return this.state === 8;
    },
    get$_onValue: function() {
      return this.callback;
    },
    get$_onError: function() {
      return this.errorCallback;
    },
    get$_errorTest: function() {
      return this.callback;
    },
    get$_whenCompleteAction: function() {
      return this.callback;
    }
  },
  _Future: {
    "^": "Object;_state,_zone<,_resultOrListeners",
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    then$2$onError: function(f, onError) {
      var result, t1;
      result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1 = result._zone;
      if (t1 !== C.C__RootZone) {
        t1.toString;
        if (onError != null)
          onError = P._registerErrorHandler(onError, t1);
      }
      this._addListener$1(new P._FutureListener(null, result, onError == null ? 1 : 3, f, onError));
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    catchError$2$test: function(onError, test) {
      var result, t1;
      result = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1 = result._zone;
      if (t1 !== C.C__RootZone)
        onError = P._registerErrorHandler(onError, t1);
      this._addListener$1(new P._FutureListener(null, result, 2, test, onError));
      return result;
    },
    catchError$1: function(onError) {
      return this.catchError$2$test(onError, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      result = new P._Future(0, t1, null);
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      if (t1 !== C.C__RootZone)
        t1.toString;
      this._addListener$1(new P._FutureListener(null, result, 8, action, null));
      return result;
    },
    _markPendingCompletion$0: function() {
      if (this._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      this._state = 1;
    },
    get$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setErrorObject$1: function(error) {
      this._state = 8;
      this._resultOrListeners = error;
    },
    _setError$2: function(error, stackTrace) {
      this._setErrorObject$1(new P.AsyncError(error, stackTrace));
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener._nextListener = this._resultOrListeners;
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current.set$_nextListener(prev);
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setErrorObject$1(new P.AsyncError(error, stackTrace));
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 15, 23, 24, 25],
    _asyncComplete$1: function(value) {
      var t1;
      if (value == null)
        ;
      else {
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture) {
          if (!!t1.$is_Future) {
            t1 = value._state;
            if (t1 >= 4 && t1 === 8) {
              this._markPendingCompletion$0();
              t1 = this._zone;
              t1.toString;
              P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure(this, value));
            } else
              P._Future__chainCoreFuture(value, this);
          } else
            P._Future__chainForeignFuture(value, this);
          return;
        }
      }
      this._markPendingCompletion$0();
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure0(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      var t1;
      this._markPendingCompletion$0();
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    $isFuture: 1,
    static: {_Future__chainForeignFuture: function(source, target) {
        var e, s, exception, t1;
        target.set$_isChained(true);
        try {
          source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
        }
      }, _Future__chainCoreFuture: function(source, target) {
        var listener;
        target.set$_isChained(true);
        listener = new P._FutureListener(null, target, 0, null, null);
        if (source._state >= 4)
          P._Future__propagateToListeners(source, listener);
        else
          source._addListener$1(listener);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, t4, listeners0, sourceValue, zone, oldZone, chainSource, result;
        t1 = {};
        t1._captured_source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          hasError = t2.get$_hasError();
          if (listeners == null) {
            if (hasError) {
              asyncError = t1._captured_source_4.get$_error();
              t2 = t1._captured_source_4.get$_zone();
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(null, null, t2, t3, t4);
            }
            return;
          }
          for (; listeners.get$_nextListener() != null; listeners = listeners0) {
            listeners0 = listeners.get$_nextListener();
            listeners.set$_nextListener(null);
            P._Future__propagateToListeners(t1._captured_source_4, listeners);
          }
          t3._captured_listenerHasValue_1 = true;
          sourceValue = hasError ? null : t1._captured_source_4.get$_value();
          t3._captured_listenerValueOrError_2 = sourceValue;
          t3._captured_isPropagationAborted_3 = false;
          t2 = !hasError;
          if (!t2 || listeners.get$handlesValue() || listeners.get$handlesComplete()) {
            zone = listeners.get$_zone();
            if (hasError) {
              t4 = t1._captured_source_4.get$_zone();
              t4.toString;
              if (t4 == null ? zone != null : t4 !== zone) {
                t4 = t4.get$errorZone();
                zone.toString;
                t4 = t4 === zone;
              } else
                t4 = true;
              t4 = !t4;
            } else
              t4 = false;
            if (t4) {
              asyncError = t1._captured_source_4.get$_error();
              t2 = t1._captured_source_4.get$_zone();
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(null, null, t2, t3, t4);
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t2) {
              if (listeners.get$handlesValue())
                t3._captured_listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if (listeners.get$handlesComplete())
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            if (t3._captured_isPropagationAborted_3)
              return;
            if (t3._captured_listenerHasValue_1 === true) {
              t2 = t3._captured_listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3._captured_listenerValueOrError_2;
              result = J.get$result$x(listeners);
              if (chainSource instanceof P._Future)
                if (chainSource._state >= 4) {
                  result.set$_isChained(true);
                  t1._captured_source_4 = chainSource;
                  listeners = new P._FutureListener(null, result, 0, null, null);
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, result);
              else
                P._Future__chainForeignFuture(chainSource, result);
              return;
            }
          }
          result = J.get$result$x(listeners);
          listeners = result._removeListeners$0();
          t2 = t3._captured_listenerHasValue_1;
          t3 = t3._captured_listenerValueOrError_2;
          if (t2 === true)
            result._setValue$1(t3);
          else
            result._setErrorObject$1(t3);
          t1._captured_source_4 = result;
          t2 = result;
        }
      }}
  },
  _Future__addListener_closure: {
    "^": "Closure:0;_captured_this_0,_captured_listener_1",
    call$0: function() {
      P._Future__propagateToListeners(this._captured_this_0, this._captured_listener_1);
    }
  },
  _Future__chainForeignFuture_closure: {
    "^": "Closure:2;_captured_target_0",
    call$1: [function(value) {
      this._captured_target_0._completeWithValue$1(value);
    }, null, null, 2, 0, null, 22, "call"]
  },
  _Future__chainForeignFuture_closure0: {
    "^": "Closure:16;_captured_target_1",
    call$2: [function(error, stackTrace) {
      this._captured_target_1._completeError$2(error, stackTrace);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", null, null, null, 2, 2, null, 23, 24, 25, "call"]
  },
  _Future__chainForeignFuture_closure1: {
    "^": "Closure:0;_captured_target_2,_captured_e_3,_captured_s_4",
    call$0: function() {
      this._captured_target_2._completeError$2(this._captured_e_3, this._captured_s_4);
    }
  },
  _Future__asyncComplete_closure: {
    "^": "Closure:0;_captured_this_0,_captured_coreFuture_1",
    call$0: function() {
      P._Future__chainCoreFuture(this._captured_coreFuture_1, this._captured_this_0);
    }
  },
  _Future__asyncComplete_closure0: {
    "^": "Closure:0;_captured_this_2,_captured_value_3",
    call$0: function() {
      this._captured_this_2._completeWithValue$1(this._captured_value_3);
    }
  },
  _Future__asyncCompleteError_closure: {
    "^": "Closure:0;_captured_this_0,_captured_error_1,_captured_stackTrace_2",
    call$0: function() {
      this._captured_this_0._completeError$2(this._captured_error_1, this._captured_stackTrace_2);
    }
  },
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure:17;_box_1,_captured_listener_3,_captured_sourceValue_4,_captured_zone_5",
    call$0: function() {
      var e, s, exception, t1;
      try {
        this._box_1._captured_listenerValueOrError_2 = this._captured_zone_5.runUnary$2(this._captured_listener_3.get$_onValue(), this._captured_sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        this._box_1._captured_listenerValueOrError_2 = new P.AsyncError(e, s);
        return false;
      }
    }
  },
  _Future__propagateToListeners_handleError: {
    "^": "Closure:1;_box_2,_box_1,_captured_listener_6,_captured_zone_7",
    call$0: function() {
      var asyncError, matchesTest, test, e, s, errorCallback, e0, s0, t1, exception, t2, listenerValueOrError, t3, t4;
      asyncError = this._box_2._captured_source_4.get$_error();
      matchesTest = true;
      t1 = this._captured_listener_6;
      if (t1.get$hasErrorTest()) {
        test = t1.get$_errorTest();
        try {
          matchesTest = this._captured_zone_7.runUnary$2(test, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = H.getTraceFromException(exception);
          t1 = J.get$error$x(asyncError);
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e, s);
          t1 = this._box_1;
          t1._captured_listenerValueOrError_2 = listenerValueOrError;
          t1._captured_listenerHasValue_1 = false;
          return;
        }
      }
      errorCallback = t1.get$_onError();
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this._captured_zone_7;
          t4 = this._box_1;
          if (t2)
            t4._captured_listenerValueOrError_2 = t3.runBinary$3(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          else
            t4._captured_listenerValueOrError_2 = t3.runUnary$2(errorCallback, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = H.getTraceFromException(exception);
          t1 = J.get$error$x(asyncError);
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e0, s0);
          t1 = this._box_1;
          t1._captured_listenerValueOrError_2 = listenerValueOrError;
          t1._captured_listenerHasValue_1 = false;
          return;
        }
        this._box_1._captured_listenerHasValue_1 = true;
      } else {
        t1 = this._box_1;
        t1._captured_listenerValueOrError_2 = asyncError;
        t1._captured_listenerHasValue_1 = false;
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure:1;_box_2,_box_1,_captured_hasError_8,_captured_listener_9,_captured_zone_10",
    call$0: function() {
      var t1, e, s, completeResult, t2, exception, result;
      t1 = {};
      t1._captured_completeResult_0 = null;
      try {
        completeResult = this._captured_zone_10.run$1(this._captured_listener_9.get$_whenCompleteAction());
        t1._captured_completeResult_0 = completeResult;
        t2 = completeResult;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        if (this._captured_hasError_8) {
          t1 = J.get$error$x(this._box_2._captured_source_4.get$_error());
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = this._box_1;
        if (t1)
          t2._captured_listenerValueOrError_2 = this._box_2._captured_source_4.get$_error();
        else
          t2._captured_listenerValueOrError_2 = new P.AsyncError(e, s);
        t2._captured_listenerHasValue_1 = false;
        return;
      }
      if (!!J.getInterceptor(t2).$isFuture) {
        result = J.get$result$x(this._captured_listener_9);
        result.set$_isChained(true);
        this._box_1._captured_isPropagationAborted_3 = true;
        t1._captured_completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this._box_2, result), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, result));
      }
    }
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure:2;_box_2,_captured_result_11",
    call$1: [function(ignored) {
      P._Future__propagateToListeners(this._box_2._captured_source_4, new P._FutureListener(null, this._captured_result_11, 0, null, null));
    }, null, null, 2, 0, null, 29, "call"]
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure:16;_box_0,_captured_result_12",
    call$2: [function(error, stackTrace) {
      var t1, completeResult;
      t1 = this._box_0;
      if (!(t1._captured_completeResult_0 instanceof P._Future)) {
        completeResult = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1._captured_completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1._captured_completeResult_0, new P._FutureListener(null, this._captured_result_12, 0, null, null));
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", null, null, null, 2, 2, null, 23, 24, 25, "call"]
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback,next",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;",
    map$1: function(_, convert) {
      return H.setRuntimeTypeInfo(new P._MapStream(convert, this), [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    },
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1._captured_subscription_0 = null;
      t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.$int]);
      t1._captured_count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$isEmpty: function(_) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [P.bool]);
      t1._captured_subscription_0 = null;
      t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
      return future;
    },
    toList$0: function(_) {
      var result, future;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [[P.List, H.getRuntimeTypeArgument(this, "Stream", 0)]]);
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
      return future;
    },
    skip$1: function(_, count) {
      var t1 = H.setRuntimeTypeInfo(new P._SkipStream(count, this), [null]);
      if (typeof count !== "number" || Math.floor(count) !== count || count < 0)
        H.throwExpression(P.ArgumentError$(count));
      return t1;
    },
    get$first: function(_) {
      var t1, future;
      t1 = {};
      future = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      t1._captured_subscription_0 = null;
      t1._captured_subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    }
  },
  Stream_forEach_closure: {
    "^": "Closure;_box_0,_async$_captured_this_1,_captured_action_2,_captured_future_3",
    call$1: [function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this._captured_action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this._box_0._captured_subscription_0, this._captured_future_3));
    }, null, null, 2, 0, null, 30, "call"],
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "", args: [T]};
      }, this._async$_captured_this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "^": "Closure:0;_captured_action_4,_captured_element_5",
    call$0: function() {
      return this._captured_action_4.call$1(this._captured_element_5);
    }
  },
  Stream_forEach__closure0: {
    "^": "Closure:2;",
    call$1: function(_) {
    }
  },
  Stream_forEach_closure0: {
    "^": "Closure:0;_captured_future_6",
    call$0: [function() {
      this._captured_future_6._complete$1(null);
    }, null, null, 0, 0, null, "call"]
  },
  Stream_length_closure: {
    "^": "Closure:2;_box_0",
    call$1: [function(_) {
      ++this._box_0._captured_count_0;
    }, null, null, 2, 0, null, 26, "call"]
  },
  Stream_length_closure0: {
    "^": "Closure:0;_box_0,_captured_future_1",
    call$0: [function() {
      this._captured_future_1._complete$1(this._box_0._captured_count_0);
    }, null, null, 0, 0, null, "call"]
  },
  Stream_isEmpty_closure: {
    "^": "Closure:2;_box_0,_captured_future_1",
    call$1: [function(_) {
      P._cancelAndValue(this._box_0._captured_subscription_0, this._captured_future_1, false);
    }, null, null, 2, 0, null, 26, "call"]
  },
  Stream_isEmpty_closure0: {
    "^": "Closure:0;_captured_future_2",
    call$0: [function() {
      this._captured_future_2._complete$1(true);
    }, null, null, 0, 0, null, "call"]
  },
  Stream_toList_closure: {
    "^": "Closure;_captured_this_0,_async$_captured_result_1",
    call$1: [function(data) {
      this._async$_captured_result_1.push(data);
    }, null, null, 2, 0, null, 31, "call"],
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "", args: [T]};
      }, this._captured_this_0, "Stream");
    }
  },
  Stream_toList_closure0: {
    "^": "Closure:0;_captured_result_2,_captured_future_3",
    call$0: [function() {
      this._captured_future_3._complete$1(this._captured_result_2);
    }, null, null, 0, 0, null, "call"]
  },
  Stream_first_closure: {
    "^": "Closure;_box_0,_async$_captured_this_1,_captured_future_2",
    call$1: [function(value) {
      P._cancelAndValue(this._box_0._captured_subscription_0, this._captured_future_2, value);
    }, null, null, 2, 0, null, 22, "call"],
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "", args: [T]};
      }, this._async$_captured_this_1, "Stream");
    }
  },
  Stream_first_closure0: {
    "^": "Closure:0;_captured_future_3",
    call$0: [function() {
      var e, s, t1, exception;
      try {
        t1 = H.IterableElementError_noElement();
        throw H.wrapException(t1);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        P._completeWithErrorCallback(this._captured_future_3, e, s);
      }
    }, null, null, 0, 0, null, "call"]
  },
  StreamSubscription: {
    "^": "Object;"
  },
  _StreamController: {
    "^": "Object;",
    get$isPaused: function() {
      var t1 = this._state;
      return (t1 & 1) !== 0 ? this.get$_subscription().get$_isInputPaused() : (t1 & 2) === 0;
    },
    get$_pendingEvents: function() {
      if ((this._state & 8) === 0)
        return this._varData;
      return this._varData.get$varData();
    },
    _ensurePendingEvents$0: function() {
      var t1, state;
      if ((this._state & 8) === 0) {
        t1 = this._varData;
        if (t1 == null) {
          t1 = new P._StreamImplEvents(null, null, 0);
          this._varData = t1;
        }
        return t1;
      }
      state = this._varData;
      state.get$varData();
      return state.get$varData();
    },
    get$_subscription: function() {
      if ((this._state & 8) !== 0)
        return this._varData.get$varData();
      return this._varData;
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    add$1: function(_, value) {
      var t1 = this._state;
      if (t1 >= 4)
        throw H.wrapException(this._badEventState$0());
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, H.setRuntimeTypeInfo(new P._DelayedData(value, null), [H.getRuntimeTypeArgument(this, "_StreamController", 0)]));
    },
    _async$_add$1: function(value) {
      var t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendData$1(value);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, H.setRuntimeTypeInfo(new P._DelayedData(value, null), [H.getRuntimeTypeArgument(this, "_StreamController", 0)]));
    },
    _subscribe$4: function(onData, onError, onDone, cancelOnError) {
      var t1, subscription, pendingEvents, addState;
      if ((this._state & 3) !== 0)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      t1 = $.Zone__current;
      subscription = H.setRuntimeTypeInfo(new P._ControllerSubscription(this, null, null, null, t1, cancelOnError ? 1 : 0, null, null), [null]);
      subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, null);
      pendingEvents = this.get$_pendingEvents();
      t1 = this._state |= 1;
      if ((t1 & 8) !== 0) {
        addState = this._varData;
        addState.set$varData(subscription);
        addState.resume$0();
      } else
        this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var result, e, s, exception, t1, result0;
      result = null;
      if ((this._state & 8) !== 0)
        result = this._varData.cancel$0();
      this._varData = null;
      this._state = this._state & 4294967286 | 2;
      if (this.get$_onCancel() != null)
        if (result == null)
          try {
            result = this._onCancel$0();
          } catch (exception) {
            t1 = H.unwrapException(exception);
            e = t1;
            s = H.getTraceFromException(exception);
            result0 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
            result0._asyncCompleteError$2(e, s);
            result = result0;
          }
        else
          result = result.whenComplete$1(this.get$_onCancel());
      t1 = new P._StreamController__recordCancel_complete(this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    }
  },
  _StreamController__subscribe_closure: {
    "^": "Closure:0;_captured_this_0",
    call$0: function() {
      P._runGuarded(this._captured_this_0.get$_onListen());
    }
  },
  _StreamController__recordCancel_complete: {
    "^": "Closure:1;_captured_this_0",
    call$0: [function() {
      var t1 = this._captured_this_0._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    }, null, null, 0, 0, null, "call"]
  },
  _SyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._async$_add$1(data);
    }
  },
  _AsyncStreamControllerDispatch: {
    "^": "Object;",
    _sendData$1: function(data) {
      this.get$_subscription()._addPending$1(H.setRuntimeTypeInfo(new P._DelayedData(data, null), [null]));
    }
  },
  _AsyncStreamController: {
    "^": "_StreamController__AsyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
    _onCancel$0: function() {
      return this._onCancel.call$0();
    }
  },
  _StreamController__AsyncStreamControllerDispatch: {
    "^": "_StreamController+_AsyncStreamControllerDispatch;"
  },
  _SyncStreamController: {
    "^": "_StreamController__SyncStreamControllerDispatch;_onListen<,_onPause<,_onResume<,_onCancel<,_varData,_state,_doneFuture",
    _onCancel$0: function() {
      return this._onCancel.call$0();
    }
  },
  _StreamController__SyncStreamControllerDispatch: {
    "^": "_StreamController+_SyncStreamControllerDispatch;"
  },
  _NoCallbacks: {
    "^": "Object;",
    get$_onListen: function() {
      return;
    },
    get$_onPause: function() {
      return;
    },
    get$_onResume: function() {
      return;
    },
    get$_onCancel: function() {
      return;
    },
    _onCancel$0: function() {
      return this.get$_onCancel().call$0();
    }
  },
  _NoCallbackAsyncStreamController: {
    "^": "_StreamController__AsyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"
  },
  _StreamController__AsyncStreamControllerDispatch0: {
    "^": "_StreamController+_AsyncStreamControllerDispatch;",
    $as_StreamController: $.functionThatReturnsNull
  },
  _NoCallbackSyncStreamController: {
    "^": "_StreamController__SyncStreamControllerDispatch0+_NoCallbacks;_varData,_state,_doneFuture"
  },
  _StreamController__SyncStreamControllerDispatch0: {
    "^": "_StreamController+_SyncStreamControllerDispatch;",
    $as_StreamController: $.functionThatReturnsNull
  },
  _ControllerStream: {
    "^": "_StreamImpl;_async$_controller",
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      return this._async$_controller._subscribe$4(onData, onError, onDone, cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof P._ControllerStream))
        return false;
      return other._async$_controller === this._async$_controller;
    }
  },
  _ControllerSubscription: {
    "^": "_BufferingStreamSubscription;_async$_controller,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _onCancel$0: function() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.pause$0(0);
      P._runGuarded(t1.get$_onPause());
    }, "call$0", "get$_onPause", 0, 0, 1],
    _onResume$0: [function() {
      var t1 = this._async$_controller;
      if ((t1._state & 8) !== 0)
        t1._varData.resume$0();
      P._runGuarded(t1.get$_onResume());
    }, "call$0", "get$_onResume", 0, 0, 1]
  },
  _EventSink: {
    "^": "Object;"
  },
  _BufferingStreamSubscription: {
    "^": "Object;_onData,_onError<,_onDone,_zone<,_state,_cancelFuture,_pending",
    _setPendingEvents$1: function(pendingEvents) {
      if (pendingEvents == null)
        return;
      this._pending = pendingEvents;
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        this._state = (this._state | 64) >>> 0;
        this._pending.schedule$1(this);
      }
    },
    onError$1: [function(_, handleError) {
      if (handleError == null)
        handleError = P._nullErrorHandler$closure();
      this._onError = P._registerErrorHandler(handleError, this._zone);
    }, "call$1", "get$onError", 2, 0, 18],
    pause$1: function(_, resumeSignal) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      this._state = (t1 + 128 | 4) >>> 0;
      if (t1 < 128 && this._pending != null)
        this._pending.cancelSchedule$0();
      if ((t1 & 4) === 0 && (this._state & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t1 = this._pending;
            t1 = !t1.get$isEmpty(t1);
          } else
            t1 = false;
          if (t1)
            this._pending.schedule$1(this);
          else {
            t1 = (this._state & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    get$_isInputPaused: function() {
      return (this._state & 4) !== 0;
    },
    get$isPaused: function() {
      return this._state >= 128;
    },
    _cancel$0: function() {
      var t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0)
        this._pending.cancelSchedule$0();
      if ((this._state & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: ["super$_BufferingStreamSubscription$_async$_add$1", function(data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(H.setRuntimeTypeInfo(new P._DelayedData(data, null), [null]));
    }],
    _addError$2: ["super$_BufferingStreamSubscription$_addError$2", function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace, null));
    }],
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 1],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 1],
    _onCancel$0: function() {
      return;
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(0, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2;
      t1 = this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        this._state = (t1 | 16) >>> 0;
        this._cancel$0();
        t1 = this._cancelFuture;
        if (!!J.getInterceptor(t1).$isFuture)
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t1, t2;
      t1 = new P._BufferingStreamSubscription__sendDone_sendDone(this);
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      t2 = this._cancelFuture;
      if (!!J.getInterceptor(t2).$isFuture)
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, isInputPaused;
      if ((this._state & 64) !== 0) {
        t1 = this._pending;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = false;
      if (t1) {
        t1 = (this._state & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t1 = this._pending;
            t1 = t1 == null || t1.get$isEmpty(t1);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          this._state = (this._state & 4294967291) >>> 0;
      }
      for (; true; wasInputPaused = isInputPaused) {
        t1 = this._state;
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        this._state = (this._state & 4294967263) >>> 0;
      }
      t1 = this._state;
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
      this._zone.toString;
      this._onData = onData;
      this.onError$1(0, onError);
      this._onDone = onDone == null ? P._nullDoneHandler$closure() : onDone;
    },
    static: {_BufferingStreamSubscription$: function(onData, onError, onDone, cancelOnError, $T) {
        var t1 = $.Zone__current;
        t1 = H.setRuntimeTypeInfo(new P._BufferingStreamSubscription(null, null, null, t1, cancelOnError ? 1 : 0, null, null), [$T]);
        t1._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
        return t1;
      }}
  },
  _BufferingStreamSubscription__sendError_sendError: {
    "^": "Closure:1;_captured_this_0,_captured_error_1,_captured_stackTrace_2",
    call$0: [function() {
      var t1, t2, t3, t4, t5, t6;
      t1 = this._captured_this_0;
      t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      t2 = t1._onError;
      t3 = H.getDynamicRuntimeType();
      t3 = H.buildFunctionType(t3, [t3, t3])._isTest$1(t2);
      t4 = t1._zone;
      t5 = this._captured_error_1;
      t6 = t1._onError;
      if (t3)
        t4.runBinaryGuarded$3(t6, t5, this._captured_stackTrace_2);
      else
        t4.runUnaryGuarded$2(t6, t5);
      t1._state = (t1._state & 4294967263) >>> 0;
    }, null, null, 0, 0, null, "call"]
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "^": "Closure:1;_captured_this_0",
    call$0: function() {
      var t1, t2;
      t1 = this._captured_this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    }
  },
  _StreamImpl: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      return P._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, H.getTypeArgumentByIndex(this, 0));
    }
  },
  _DelayedEvent: {
    "^": "Object;next@"
  },
  _DelayedData: {
    "^": "_DelayedEvent;value>,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedError: {
    "^": "_DelayedEvent;error>,stackTrace<,next",
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  },
  _DelayedDone: {
    "^": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "^": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    },
    cancelSchedule$0: function() {
      if (this._state === 1)
        this._state = 3;
    }
  },
  _PendingEvents_schedule_closure: {
    "^": "Closure:0;_captured_this_0,_captured_dispatch_1",
    call$0: function() {
      var t1, oldState;
      t1 = this._captured_this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this._captured_dispatch_1);
    }
  },
  _StreamImplEvents: {
    "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  },
  _cancelAndError_closure: {
    "^": "Closure:0;_captured_future_0,_captured_error_1,_captured_stackTrace_2",
    call$0: [function() {
      return this._captured_future_0._completeError$2(this._captured_error_1, this._captured_stackTrace_2);
    }, null, null, 0, 0, null, "call"]
  },
  _cancelAndErrorClosure_closure: {
    "^": "Closure:19;_captured_subscription_0,_captured_future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this._captured_subscription_0, this._captured_future_1, error, stackTrace);
    }
  },
  _cancelAndValue_closure: {
    "^": "Closure:0;_captured_future_0,_captured_value_1",
    call$0: [function() {
      return this._captured_future_0._complete$1(this._captured_value_1);
    }, null, null, 0, 0, null, "call"]
  },
  _ForwardingStream: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._createSubscription$4(onData, onError, onDone, true === cancelOnError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      return P._ForwardingStreamSubscription$(this, onData, onError, onDone, cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), H.getRuntimeTypeArgument(this, "_ForwardingStream", 1));
    },
    _handleData$2: function(data, sink) {
      sink._async$_add$1(data);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  _ForwardingStreamSubscription: {
    "^": "_BufferingStreamSubscription;_stream,_subscription,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _async$_add$1: function(data) {
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_async$_add$1(data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_addError$2(error, stackTrace);
    },
    _onPause$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    }, "call$0", "get$_onPause", 0, 0, 1],
    _onResume$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0();
    }, "call$0", "get$_onResume", 0, 0, 1],
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0();
      }
      return;
    },
    _handleData$1: [function(data) {
      this._stream._handleData$2(data, this);
    }, "call$1", "get$_handleData", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "", void: true, args: [S]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }, 31],
    _handleError$2: [function(error, stackTrace) {
      this._addError$2(error, stackTrace);
    }, "call$2", "get$_handleError", 4, 0, 20, 24, 25],
    _handleDone$0: [function() {
      this._close$0();
    }, "call$0", "get$_handleDone", 0, 0, 1],
    _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
      var t1, t2;
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = this._stream._source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    },
    static: {_ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
        var t1 = $.Zone__current;
        t1 = H.setRuntimeTypeInfo(new P._ForwardingStreamSubscription(_stream, null, null, null, null, t1, cancelOnError ? 1 : 0, null, null), [$S, $T]);
        t1._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
        t1._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, $S, $T);
        return t1;
      }}
  },
  _MapStream: {
    "^": "_ForwardingStream;_transform,_source",
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception, t1;
      outputEvent = null;
      try {
        outputEvent = this._transform$1(inputEvent);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        P._addErrorWithReplacement(sink, e, s);
        return;
      }
      sink._async$_add$1(outputEvent);
    },
    _transform$1: function(arg0) {
      return this._transform.call$1(arg0);
    }
  },
  _StateStreamSubscription: {
    "^": "_ForwardingStreamSubscription;_sharedState,_stream,_subscription,_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    get$_count: function() {
      return this._sharedState;
    },
    set$_count: function(count) {
      this._sharedState = count;
    },
    $as_ForwardingStreamSubscription: function($T) {
      return [$T, $T];
    },
    $as_BufferingStreamSubscription: null
  },
  _SkipStream: {
    "^": "_ForwardingStream;_count,_source",
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      var t1, t2, t3;
      t1 = H.getTypeArgumentByIndex(this, 0);
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t3 = new P._StateStreamSubscription(this._count, this, null, null, null, null, t2, t3, null, null);
      t3.$builtinTypeInfo = this.$builtinTypeInfo;
      t3._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
      t3._ForwardingStreamSubscription$5(this, onData, onError, onDone, cancelOnError, t1, t1);
      return t3;
    },
    _handleData$2: function(inputEvent, sink) {
      var count = sink.get$_count();
      if (typeof count !== "number")
        return count.$gt();
      if (count > 0) {
        sink.set$_count(count - 1);
        return;
      }
      sink._async$_add$1(inputEvent);
    },
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    },
    $asStream: null
  },
  AsyncError: {
    "^": "Object;error>,stackTrace<",
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1
  },
  _Zone: {
    "^": "Object;"
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure:0;_captured_error_0,_captured_stackTrace_1",
    call$0: function() {
      var t1 = this._captured_error_0;
      throw H.wrapException(new P._UncaughtAsyncError(t1, P._UncaughtAsyncError__getBestStackTrace(t1, this._captured_stackTrace_1)));
    }
  },
  _RootZone: {
    "^": "_Zone;",
    get$parent: function(_) {
      return;
    },
    get$errorZone: function() {
      return this;
    },
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$0();
          return t1;
        }
        t1 = P._rootRun(null, null, this, f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }
    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$1(arg);
          return t1;
        }
        t1 = P._rootRunUnary(null, null, this, f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }
    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$2(arg1, arg2);
          return t1;
        }
        t1 = P._rootRunBinary(null, null, this, f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = H.getTraceFromException(exception);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }
    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindCallback_closure(this, f);
      else
        return new P._RootZone_bindCallback_closure0(this, f);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindUnaryCallback_closure(this, f);
      else
        return new P._RootZone_bindUnaryCallback_closure0(this, f);
    },
    $index: function(_, key) {
      return;
    },
    run$1: function(f) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f);
    },
    runUnary$2: function(f, arg) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2);
    }
  },
  _RootZone_bindCallback_closure: {
    "^": "Closure:0;_captured_this_0,_captured_f_1",
    call$0: function() {
      return this._captured_this_0.runGuarded$1(this._captured_f_1);
    }
  },
  _RootZone_bindCallback_closure0: {
    "^": "Closure:0;_captured_this_2,_captured_f_3",
    call$0: function() {
      return this._captured_this_2.run$1(this._captured_f_3);
    }
  },
  _RootZone_bindUnaryCallback_closure: {
    "^": "Closure:2;_captured_this_0,_captured_f_1",
    call$1: [function(arg) {
      return this._captured_this_0.runUnaryGuarded$2(this._captured_f_1, arg);
    }, null, null, 2, 0, null, 32, "call"]
  },
  _RootZone_bindUnaryCallback_closure0: {
    "^": "Closure:2;_captured_this_2,_captured_f_3",
    call$1: [function(arg) {
      return this._captured_this_2.runUnary$2(this._captured_f_3, arg);
    }, null, null, 2, 0, null, 32, "call"]
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  _HashMap__setTableEntry: function(table, key, value) {
    if (value == null)
      table[key] = table;
    else
      table[key] = value;
  },
  _HashMap__newHashTable: function() {
    var table = Object.create(null);
    P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
    delete table["<non-identifier-key>"];
    return table;
  },
  LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
    return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]));
  },
  LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
    return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 73],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 67, 33],
  IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
    var parts, t1;
    if (P.IterableBase__isToStringVisiting(iterable)) {
      if (leftDelimiter === "(" && rightDelimiter === ")")
        return "(...)";
      return leftDelimiter + "..." + rightDelimiter;
    }
    parts = [];
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      P.IterableBase__iterablePartsToStrings(iterable, parts);
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = new P.StringBuffer(leftDelimiter);
    t1.writeAll$2(parts, ", ");
    t1 = t1._contents += rightDelimiter;
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
    var buffer, t1;
    if (P.IterableBase__isToStringVisiting(iterable))
      return leftDelimiter + "..." + rightDelimiter;
    buffer = new P.StringBuffer(leftDelimiter);
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      buffer.writeAll$2(iterable, ", ");
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = buffer;
    t1.set$_contents(t1.get$_contents() + rightDelimiter);
    t1 = buffer.get$_contents();
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  IterableBase__isToStringVisiting: function(o) {
    var i, t1;
    for (i = 0; t1 = $.get$IterableBase__toStringVisiting(), i < t1.length; ++i) {
      t1 = t1[i];
      if (o == null ? t1 == null : o === t1)
        return true;
    }
    return false;
  },
  IterableBase__iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new H.JsLinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashMap_LinkedHashMap$identity: function($K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedIdentityHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result, t2;
    t1 = {};
    if (P.IterableBase__isToStringVisiting(m))
      return "{...}";
    result = new P.StringBuffer("");
    try {
      $.get$IterableBase__toStringVisiting().push(m);
      t2 = result;
      t2.set$_contents(t2.get$_contents() + "{");
      t1._captured_first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      t1 = result;
      t1.set$_contents(t1.get$_contents() + "}");
    } finally {
      t1 = $.get$IterableBase__toStringVisiting();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = result.get$_contents();
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  _HashMap: {
    "^": "Object;",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    $index: function(_, key) {
      var strings, t1, entry, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums, rest, hash, bucket, index;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else {
        rest = this._rest;
        if (rest == null) {
          rest = P._HashMap__newHashTable();
          this._rest = rest;
        }
        hash = this._computeHashCode$1(key);
        bucket = rest[hash];
        if (bucket == null) {
          P._HashMap__setTableEntry(rest, hash, [key, value]);
          ++this._collection$_length;
          this._keys = null;
        } else {
          index = this._findBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index + 1] = value;
          else {
            bucket.push(key, value);
            ++this._collection$_length;
            this._keys = null;
          }
        }
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = Array;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: 1
  },
  _IdentityHashMap: {
    "^": "_HashMap;_collection$_length,_strings,_nums,_rest,_keys",
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  },
  HashMapKeyIterable: {
    "^": "IterableBase;_collection$_map",
    get$length: function(_) {
      return this._collection$_map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._collection$_map;
      t1 = new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._collection$_map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $isEfficientLength: 1
  },
  HashMapKeyIterator: {
    "^": "Object;_collection$_map,_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._collection$_map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedIdentityHashMap: {
    "^": "JsLinkedHashMap;__js_helper$_length,__js_helper$_strings,__js_helper$_nums,__js_helper$_rest,__js_helper$_first,__js_helper$_last,__js_helper$_modifications",
    internalComputeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].get$hashMapCellKey();
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  },
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = H.setRuntimeTypeInfo(new P.LinkedHashSetIterator(this, this._modifications, null, null), [null]);
      t1._cell = t1._set._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else
        return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_collection$_element();
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell._collection$_element);
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    get$first: function(_) {
      var t1 = this._first;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return t1._collection$_element;
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(0, object);
    },
    _remove$1: function(_, object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last._next = cell;
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous._next = next;
      if (next == null)
        this._last = previous;
      else
        next._previous = previous;
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_collection$_element(), element))
          return i;
      return -1;
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: null,
    static: {_LinkedHashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  LinkedHashSetCell: {
    "^": "Object;_collection$_element<,_next<,_previous<"
  },
  LinkedHashSetIterator: {
    "^": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1._collection$_element;
          this._cell = t1._next;
          return true;
        }
      }
    }
  },
  _HashSetBase: {
    "^": "SetBase;"
  },
  IterableBase: {
    "^": "Object;",
    map$1: function(_, f) {
      return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    join$1: function(_, separator) {
      var iterator, buffer, t1;
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      buffer = new P.StringBuffer("");
      if (separator === "") {
        do
          buffer._contents += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        buffer._contents = H.S(iterator.get$current());
        for (; iterator.moveNext$0();) {
          buffer._contents += separator;
          buffer._contents += H.S(iterator.get$current());
        }
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return this.get$isEmpty(this) !== true;
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$notNull("index"));
      if (index < 0)
        H.throwExpression(P.RangeError$range(index, 0, null, "index", null));
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    },
    $isIterable: 1,
    $asIterable: null
  },
  ListBase: {
    "^": "Object_ListMixin;"
  },
  Object_ListMixin: {
    "^": "Object+ListMixin;",
    $isList: 1,
    $asList: null,
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: null
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return H.setRuntimeTypeInfo(new H.ListIterator(receiver, this.get$length(receiver), 0, null), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return this.get$length(receiver) !== 0;
    },
    get$first: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    map$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, H.getRuntimeTypeArgument(receiver, "ListMixin", 0));
    },
    toList$1$growable: function(receiver, growable) {
      var result, t1, i;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
      } else {
        t1 = Array(this.get$length(receiver));
        t1.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      }
      for (i = 0; i < this.get$length(receiver); ++i) {
        t1 = this.$index(receiver, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    sublist$2: function(receiver, start, end) {
      var listLength, $length, result, i, t1;
      listLength = this.get$length(receiver);
      if (end == null)
        end = listLength;
      P.RangeError_checkValidRange(start, end, listLength, null, null, null);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i) {
        t1 = this.$index(receiver, start + i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    setRange$4: ["super$ListMixin$setRange$4", function(receiver, start, end, iterable, skipCount) {
      var $length, t1, otherStart, otherList, i;
      P.RangeError_checkValidRange(start, end, this.get$length(receiver), null, null, null);
      $length = end - start;
      if ($length === 0)
        return;
      if (typeof skipCount !== "number")
        return skipCount.$lt();
      if (skipCount < 0)
        H.throwExpression(P.RangeError$range(skipCount, 0, null, "skipCount", null));
      t1 = J.getInterceptor(iterable);
      if (!!t1.$isList) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = t1.skip$1(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    }],
    indexOf$2: function(receiver, element, startIndex) {
      var i;
      if (startIndex >= this.get$length(receiver))
        return -1;
      for (i = startIndex; i < this.get$length(receiver); ++i)
        if (J.$eq(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    lastIndexOf$2: function(receiver, element, startIndex) {
      var i;
      startIndex = this.get$length(receiver) - 1;
      for (i = startIndex; i >= 0; --i)
        if (J.$eq(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    $isList: 1,
    $asList: null,
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: null
  },
  _UnmodifiableMapMixin: {
    "^": "Object;",
    $indexSet: function(_, key, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    $isMap: 1
  },
  MapView: {
    "^": "Object;",
    $index: function(_, key) {
      return this._collection$_map.$index(0, key);
    },
    $indexSet: function(_, key, value) {
      this._collection$_map.$indexSet(0, key, value);
    },
    forEach$1: function(_, action) {
      this._collection$_map.forEach$1(0, action);
    },
    get$isEmpty: function(_) {
      return this._collection$_map.__js_helper$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_map.__js_helper$_length !== 0;
    },
    get$length: function(_) {
      return this._collection$_map.__js_helper$_length;
    },
    get$keys: function() {
      var t1 = this._collection$_map;
      return H.setRuntimeTypeInfo(new H.LinkedHashMapKeyIterable(t1), [H.getTypeArgumentByIndex(t1, 0)]);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this._collection$_map);
    },
    $isMap: 1
  },
  UnmodifiableMapView: {
    "^": "MapView+_UnmodifiableMapMixin;_collection$_map",
    $isMap: 1
  },
  Maps_mapToString_closure: {
    "^": "Closure:6;_collection$_box_0,_captured_result_1",
    call$2: function(k, v) {
      var t1, t2;
      t1 = this._collection$_box_0;
      if (!t1._captured_first_0)
        this._captured_result_1._contents += ", ";
      t1._captured_first_0 = false;
      t1 = this._captured_result_1;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    }
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      var t1 = new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    get$first: function(_) {
      var t1, t2;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      t2 = this._table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      return t2[t1];
    },
    toList$1$growable: function(_, growable) {
      var list, t1;
      if (growable) {
        list = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(list, this.get$length(this));
      } else {
        t1 = Array(this.get$length(this));
        t1.fixed$length = Array;
        list = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      }
      this._writeToList$1(list);
      return list;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(_, element) {
      this._add$1(element);
    },
    clear$0: function(_) {
      var i, t1, t2, t3, t4;
      i = this._head;
      t1 = this._tail;
      if (i !== t1) {
        for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = null;
        }
        this._tail = 0;
        this._head = 0;
        ++this._modificationCount;
      }
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      ++this._modificationCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      t2[t1] = null;
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      ++this._modificationCount;
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = Array;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
      C.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    _writeToList$1: function(target) {
      var t1, t2, t3, $length, firstPartSize;
      t1 = this._head;
      t2 = this._tail;
      t3 = this._table;
      if (t1 <= t2) {
        $length = t2 - t1;
        C.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
        return $length;
      } else {
        firstPartSize = t3.length - t1;
        C.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
        C.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + this._tail, this._table, 0);
        return this._tail + firstPartSize;
      }
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = Array;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: null,
    static: {ListQueue$: function(initialCapacity, $E) {
        var t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [$E]);
        t1.ListQueue$1(initialCapacity, $E);
        return t1;
      }}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_collection$_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._collection$_end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  },
  SetMixin: {
    "^": "Object;",
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$length(this) !== 0;
    },
    toList$1$growable: function(_, growable) {
      var result, t1, i, element, i0;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        t1 = Array(this.get$length(this));
        t1.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      }
      for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
        element = t1._collection$_current;
        i0 = i + 1;
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = element;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    map$1: function(_, f) {
      return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(this, f), [H.getTypeArgumentByIndex(this, 0), null]);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1._collection$_current);
    },
    join$1: function(_, separator) {
      var iterator, buffer, t1;
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      buffer = new P.StringBuffer("");
      if (separator === "") {
        do
          buffer._contents += H.S(iterator._collection$_current);
        while (iterator.moveNext$0());
      } else {
        buffer._contents = H.S(iterator._collection$_current);
        for (; iterator.moveNext$0();) {
          buffer._contents += separator;
          buffer._contents += H.S(iterator._collection$_current);
        }
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getTypeArgumentByIndex(this, 0));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it._collection$_current;
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: null
  },
  SetBase: {
    "^": "SetMixin;"
  }
}],
["dart.convert", "dart:convert", , P, {
  "^": "",
  _defaultToEncodable: [function(object) {
    return object.toJson$0();
  }, "call$1", "_defaultToEncodable$closure", 2, 0, 74, 1],
  Codec: {
    "^": "Object;"
  },
  Converter: {
    "^": "Object;"
  },
  Encoding: {
    "^": "Codec;",
    $asCodec: function() {
      return [P.String, [P.List, P.$int]];
    }
  },
  HtmlEscapeMode: {
    "^": "Object;_convert$_name,escapeLtGt,escapeQuot,escapeApos,escapeSlash",
    toString$0: function(_) {
      return this._convert$_name;
    }
  },
  HtmlEscape: {
    "^": "Converter;mode",
    _convert$3: function(text, start, end) {
      var t1, t2, t3, t4, i, result, replacement, t5;
      for (t1 = this.mode, t2 = t1.escapeSlash, t3 = t1.escapeLtGt, t4 = t1.escapeApos, t1 = t1.escapeQuot, i = start, result = null; i < end; ++i) {
        if (i >= text.length)
          return H.ioore(text, i);
        switch (text[i]) {
          case "&":
            replacement = "&amp;";
            break;
          case "\"":
            replacement = t1 ? "&quot;" : null;
            break;
          case "'":
            replacement = t4 ? "&#39;" : null;
            break;
          case "<":
            replacement = t3 ? "&lt;" : null;
            break;
          case ">":
            replacement = t3 ? "&gt;" : null;
            break;
          case "/":
            replacement = t2 ? "&#47;" : null;
            break;
          default:
            replacement = null;
        }
        if (replacement != null) {
          if (result == null)
            result = new P.StringBuffer("");
          if (i > start) {
            t5 = C.JSString_methods.substring$2(text, start, i);
            result._contents = result._contents + t5;
          }
          result._contents = result._contents + replacement;
          start = i + 1;
        }
      }
      if (result == null)
        return;
      if (end > start)
        result._contents += J.substring$2$s(text, start, end);
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $asConverter: function() {
      return [P.String, P.String];
    }
  },
  JsonUnsupportedObjectError: {
    "^": "Error;unsupportedObject,cause",
    toString$0: function(_) {
      if (this.cause != null)
        return "Converting object to an encodable object failed.";
      else
        return "Converting object did not return an encodable object.";
    },
    static: {JsonUnsupportedObjectError$: function(unsupportedObject, cause) {
        return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
      }}
  },
  JsonCyclicError: {
    "^": "JsonUnsupportedObjectError;unsupportedObject,cause",
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  },
  JsonCodec: {
    "^": "Codec;_reviver,_toEncodable",
    encode$2$toEncodable: function(value, toEncodable) {
      var t1 = this.get$encoder();
      return P._JsonStringStringifier_stringify(value, t1._toEncodable, t1.indent);
    },
    encode$1: function(value) {
      return this.encode$2$toEncodable(value, null);
    },
    get$encoder: function() {
      return C.JsonEncoder_null_null;
    },
    $asCodec: function() {
      return [P.Object, P.String];
    }
  },
  JsonEncoder: {
    "^": "Converter;indent,_toEncodable",
    $asConverter: function() {
      return [P.Object, P.String];
    }
  },
  _JsonStringifier: {
    "^": "Object;",
    writeStringContent$1: function(s) {
      var t1, $length, offset, i, charCode, t2;
      t1 = J.getInterceptor$asx(s);
      $length = t1.get$length(s);
      if (typeof $length !== "number")
        return H.iae($length);
      offset = 0;
      i = 0;
      for (; i < $length; ++i) {
        charCode = t1.codeUnitAt$1(s, i);
        if (charCode > 92)
          continue;
        if (charCode < 32) {
          if (i > offset)
            this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          this.writeCharCode$1(92);
          switch (charCode) {
            case 8:
              this.writeCharCode$1(98);
              break;
            case 9:
              this.writeCharCode$1(116);
              break;
            case 10:
              this.writeCharCode$1(110);
              break;
            case 12:
              this.writeCharCode$1(102);
              break;
            case 13:
              this.writeCharCode$1(114);
              break;
            default:
              this.writeCharCode$1(117);
              this.writeCharCode$1(48);
              this.writeCharCode$1(48);
              t2 = charCode >>> 4 & 15;
              this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
              t2 = charCode & 15;
              this.writeCharCode$1(t2 < 10 ? 48 + t2 : 87 + t2);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            this.writeStringSlice$3(s, offset, i);
          offset = i + 1;
          this.writeCharCode$1(92);
          this.writeCharCode$1(charCode);
        }
      }
      if (offset === 0)
        this.writeString$1(s);
      else if (offset < $length)
        this.writeStringSlice$3(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(new P.JsonCyclicError(object, null));
      }
      t1.push(object);
    },
    _removeSeen$1: function(object) {
      var t1 = this._seen;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception;
      if (this.writeJsonValue$1(object))
        return;
      this._checkCycle$1(object);
      try {
        customJson = this._toEncodable$1(object);
        if (!this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null);
          throw H.wrapException(t1);
        }
        t1 = this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1.pop();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        throw H.wrapException(P.JsonUnsupportedObjectError$(object, e));
      }
    },
    writeJsonValue$1: function(object) {
      var t1;
      if (typeof object === "number") {
        if (!C.JSNumber_methods.get$isFinite(object))
          return false;
        this.writeNumber$1(object);
        return true;
      } else if (object === true) {
        this.writeString$1("true");
        return true;
      } else if (object === false) {
        this.writeString$1("false");
        return true;
      } else if (object == null) {
        this.writeString$1("null");
        return true;
      } else if (typeof object === "string") {
        this.writeString$1("\"");
        this.writeStringContent$1(object);
        this.writeString$1("\"");
        return true;
      } else {
        t1 = J.getInterceptor(object);
        if (!!t1.$isList) {
          this._checkCycle$1(object);
          this.writeList$1(object);
          this._removeSeen$1(object);
          return true;
        } else if (!!t1.$isMap) {
          this._checkCycle$1(object);
          this.writeMap$1(object);
          this._removeSeen$1(object);
          return true;
        } else
          return false;
      }
    },
    writeList$1: function(list) {
      var t1, i;
      this.writeString$1("[");
      t1 = J.getInterceptor$asx(list);
      if (t1.get$length(list) > 0) {
        this.writeObject$1(t1.$index(list, 0));
        for (i = 1; i < t1.get$length(list); ++i) {
          this.writeString$1(",");
          this.writeObject$1(t1.$index(list, i));
        }
      }
      this.writeString$1("]");
    },
    writeMap$1: function(map) {
      var t1 = {};
      this.writeString$1("{");
      t1._captured_separator_0 = "\"";
      map.forEach$1(0, new P._JsonStringifier_writeMap_closure(t1, this));
      this.writeString$1("}");
    },
    _toEncodable$1: function(arg0) {
      return this._toEncodable.call$1(arg0);
    }
  },
  _JsonStringifier_writeMap_closure: {
    "^": "Closure:3;_convert$_box_0,_captured_this_1",
    call$2: function(key, value) {
      var t1, t2;
      t1 = this._captured_this_1;
      t2 = this._convert$_box_0;
      t1.writeString$1(t2._captured_separator_0);
      t2._captured_separator_0 = ",\"";
      t1.writeStringContent$1(key);
      t1.writeString$1("\":");
      t1.writeObject$1(value);
    }
  },
  _JsonStringStringifier: {
    "^": "_JsonStringifier;_sink,_seen,_toEncodable",
    writeNumber$1: function(number) {
      this._sink._contents += C.JSNumber_methods.toString$0(number);
    },
    writeString$1: function(string) {
      this._sink._contents += H.S(string);
    },
    writeStringSlice$3: function(string, start, end) {
      this._sink._contents += J.substring$2$s(string, start, end);
    },
    writeCharCode$1: function(charCode) {
      this._sink._contents += H.Primitives_stringFromCharCode(charCode);
    },
    static: {_JsonStringStringifier_stringify: function(object, toEncodable, indent) {
        var output, t1, stringifier;
        output = new P.StringBuffer("");
        t1 = P._defaultToEncodable$closure();
        stringifier = new P._JsonStringStringifier(output, [], t1);
        stringifier.writeObject$1(object);
        t1 = output._contents;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }}
  },
  Utf8Codec: {
    "^": "Encoding;_allowMalformed",
    get$name: function(_) {
      return "utf-8";
    },
    decode$2$allowMalformed: function(codeUnits, allowMalformed) {
      return new P.Utf8Decoder(this._allowMalformed).convert$1(codeUnits);
    },
    decode$1: function(codeUnits) {
      return this.decode$2$allowMalformed(codeUnits, null);
    },
    get$encoder: function() {
      return new P.Utf8Encoder();
    }
  },
  Utf8Encoder: {
    "^": "Converter;",
    convert$3: function(string, start, end) {
      var t1, stringLength, t2, $length, t3, encoder;
      t1 = J.getInterceptor$asx(string);
      stringLength = t1.get$length(string);
      P.RangeError_checkValidRange(start, end, stringLength, null, null, null);
      t2 = J.getInterceptor$n(stringLength);
      $length = t2.$sub(stringLength, start);
      t3 = J.getInterceptor($length);
      if (t3.$eq($length, 0))
        return new Uint8Array(H._checkLength(0));
      t3 = new Uint8Array(H._checkLength(t3.$mul($length, 3)));
      encoder = new P._Utf8Encoder(0, 0, t3);
      if (encoder._fillBuffer$3(string, start, stringLength) !== stringLength)
        encoder._writeSurrogate$2(t1.codeUnitAt$1(string, t2.$sub(stringLength, 1)), 0);
      return C.NativeUint8List_methods.sublist$2(t3, 0, encoder._bufferIndex);
    },
    convert$1: function(string) {
      return this.convert$3(string, 0, null);
    },
    $asConverter: function() {
      return [P.String, [P.List, P.$int]];
    }
  },
  _Utf8Encoder: {
    "^": "Object;_carry,_bufferIndex,_buffer",
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var t1, t2, rune, t3, t4;
      t1 = this._buffer;
      t2 = this._bufferIndex;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = (240 | rune >>> 18) >>> 0;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune >>> 12 & 63;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | rune >>> 6 & 63;
        this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune & 63;
        return true;
      } else {
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 224 | leadingSurrogate >>> 12;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
        this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | leadingSurrogate & 63;
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
      if (start !== end && (J.codeUnitAt$1$s(str, J.$sub$n(end, 1)) & 64512) === 55296)
        end = J.$sub$n(end, 1);
      if (typeof end !== "number")
        return H.iae(end);
      t1 = this._buffer;
      t2 = t1.length;
      t3 = J.getInterceptor$s(str);
      stringIndex = start;
      for (; stringIndex < end; ++stringIndex) {
        codeUnit = t3.codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t4 = this._bufferIndex;
          if (t4 >= t2)
            break;
          this._bufferIndex = t4 + 1;
          t1[t4] = codeUnit;
        } else if ((codeUnit & 64512) === 55296) {
          if (this._bufferIndex + 3 >= t2)
            break;
          stringIndex0 = stringIndex + 1;
          if (this._writeSurrogate$2(codeUnit, t3.codeUnitAt$1(str, stringIndex0)))
            stringIndex = stringIndex0;
        } else if (codeUnit <= 2047) {
          t4 = this._bufferIndex;
          t5 = t4 + 1;
          if (t5 >= t2)
            break;
          this._bufferIndex = t5;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 192 | codeUnit >>> 6;
          this._bufferIndex = t5 + 1;
          t1[t5] = 128 | codeUnit & 63;
        } else {
          t4 = this._bufferIndex;
          if (t4 + 2 >= t2)
            break;
          t5 = t4 + 1;
          this._bufferIndex = t5;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 224 | codeUnit >>> 12;
          t4 = t5 + 1;
          this._bufferIndex = t4;
          if (t5 >= t2)
            return H.ioore(t1, t5);
          t1[t5] = 128 | codeUnit >>> 6 & 63;
          this._bufferIndex = t4 + 1;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 128 | codeUnit & 63;
        }
      }
      return stringIndex;
    }
  },
  Utf8Decoder: {
    "^": "Converter;_allowMalformed",
    convert$3: function(codeUnits, start, end) {
      var $length, buffer, t1, decoder;
      $length = J.get$length$asx(codeUnits);
      P.RangeError_checkValidRange(start, end, $length, null, null, null);
      buffer = new P.StringBuffer("");
      t1 = this._allowMalformed;
      decoder = new P._Utf8Decoder(t1, buffer, true, 0, 0, 0);
      decoder.convert$3(codeUnits, start, $length);
      if (decoder._expectedUnits > 0) {
        if (!t1)
          H.throwExpression(P.FormatException$("Unfinished UTF-8 octet sequence", null, null));
        buffer._contents += H.Primitives_stringFromCharCode(65533);
        decoder._convert$_value = 0;
        decoder._expectedUnits = 0;
        decoder._extraUnits = 0;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    convert$1: function(codeUnits) {
      return this.convert$3(codeUnits, 0, null);
    },
    $asConverter: function() {
      return [[P.List, P.$int], P.String];
    }
  },
  _Utf8Decoder: {
    "^": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_convert$_value,_expectedUnits,_extraUnits",
    convert$3: function(codeUnits, startIndex, endIndex) {
      var value, expectedUnits, extraUnits, t1, t2, t3, t4, t5, i, unit, t6, oneBytes, i0;
      value = this._convert$_value;
      expectedUnits = this._expectedUnits;
      extraUnits = this._extraUnits;
      this._convert$_value = 0;
      this._expectedUnits = 0;
      this._extraUnits = 0;
      t1 = new P._Utf8Decoder_convert_scanOneByteCharacters(endIndex);
      t2 = new P._Utf8Decoder_convert_addSingleBytes(this, codeUnits, startIndex, endIndex);
      $loop$0:
        for (t3 = this._stringSink, t4 = !this._allowMalformed, t5 = J.getInterceptor$asx(codeUnits), i = startIndex; true; i = i0) {
          $multibyte$2:
            if (expectedUnits > 0) {
              do {
                if (i === endIndex)
                  break $loop$0;
                unit = t5.$index(codeUnits, i);
                t6 = J.getInterceptor$n(unit);
                if (t6.$and(unit, 192) !== 128) {
                  if (t4)
                    throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + t6.toRadixString$1(unit, 16), null, null));
                  this._isFirstCharacter = false;
                  t3._contents += H.Primitives_stringFromCharCode(65533);
                  expectedUnits = 0;
                  break $multibyte$2;
                } else {
                  value = (value << 6 | t6.$and(unit, 63)) >>> 0;
                  --expectedUnits;
                  ++i;
                }
              } while (expectedUnits > 0);
              t6 = extraUnits - 1;
              if (t6 < 0 || t6 >= 4)
                return H.ioore(C.List_127_2047_65535_1114111, t6);
              if (value <= C.List_127_2047_65535_1114111[t6]) {
                if (t4)
                  throw H.wrapException(P.FormatException$("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16), null, null));
                value = 65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
              if (value > 1114111) {
                if (t4)
                  throw H.wrapException(P.FormatException$("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16), null, null));
                value = 65533;
              }
              if (!this._isFirstCharacter || value !== 65279)
                t3._contents += H.Primitives_stringFromCharCode(value);
              this._isFirstCharacter = false;
            }
          if (typeof endIndex !== "number")
            return H.iae(endIndex);
          for (; i < endIndex; i = i0) {
            oneBytes = t1.call$2(codeUnits, i);
            if (J.$gt$n(oneBytes, 0)) {
              this._isFirstCharacter = false;
              if (typeof oneBytes !== "number")
                return H.iae(oneBytes);
              i0 = i + oneBytes;
              t2.call$2(i, i0);
              if (i0 === endIndex)
                break;
              i = i0;
            }
            i0 = i + 1;
            unit = t5.$index(codeUnits, i);
            t6 = J.getInterceptor$n(unit);
            if (t6.$lt(unit, 0)) {
              if (t4)
                throw H.wrapException(P.FormatException$("Negative UTF-8 code unit: -0x" + J.toRadixString$1$n(t6.$negate(unit), 16), null, null));
              t3._contents += H.Primitives_stringFromCharCode(65533);
            } else {
              if (t6.$and(unit, 224) === 192) {
                value = t6.$and(unit, 31);
                expectedUnits = 1;
                extraUnits = 1;
                continue $loop$0;
              }
              if (t6.$and(unit, 240) === 224) {
                value = t6.$and(unit, 15);
                expectedUnits = 2;
                extraUnits = 2;
                continue $loop$0;
              }
              if (t6.$and(unit, 248) === 240 && t6.$lt(unit, 245)) {
                value = t6.$and(unit, 7);
                expectedUnits = 3;
                extraUnits = 3;
                continue $loop$0;
              }
              if (t4)
                throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + t6.toRadixString$1(unit, 16), null, null));
              this._isFirstCharacter = false;
              t3._contents += H.Primitives_stringFromCharCode(65533);
              value = 65533;
              expectedUnits = 0;
              extraUnits = 0;
            }
          }
          break $loop$0;
        }
      if (expectedUnits > 0) {
        this._convert$_value = value;
        this._expectedUnits = expectedUnits;
        this._extraUnits = extraUnits;
      }
    }
  },
  _Utf8Decoder_convert_scanOneByteCharacters: {
    "^": "Closure:21;_captured_endIndex_0",
    call$2: function(units, from) {
      var to, t1, i, unit;
      to = this._captured_endIndex_0;
      if (typeof to !== "number")
        return H.iae(to);
      t1 = J.getInterceptor$asx(units);
      i = from;
      for (; i < to; ++i) {
        unit = t1.$index(units, i);
        if (J.$and$n(unit, 127) !== unit)
          return i - from;
      }
      return to - from;
    }
  },
  _Utf8Decoder_convert_addSingleBytes: {
    "^": "Closure:22;_captured_this_1,_captured_codeUnits_2,_captured_startIndex_3,_captured_endIndex_4",
    call$2: function(from, to) {
      this._captured_this_1._stringSink._contents += P.String_String$fromCharCodes(this._captured_codeUnits_2, from, to);
    }
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  String__checkBounds: function(len, start, end) {
    if (start < 0 || start > len)
      throw H.wrapException(P.RangeError$range(start, 0, len, null, null));
    if (end < start || end > len)
      throw H.wrapException(P.RangeError$range(end, start, len, null, null));
    return end;
  },
  String__stringFromIterable: function(charCodes, start, end) {
    var it, i, list;
    if (start < 0)
      throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), null, null));
    if (end < start)
      throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), null, null));
    it = J.get$iterator$ax(charCodes);
    for (i = 0; i < start; ++i)
      if (!it.moveNext$0())
        throw H.wrapException(P.RangeError$range(start, 0, i, null, null));
    list = [];
    for (i = start; i < end; ++i) {
      if (!it.moveNext$0())
        throw H.wrapException(P.RangeError$range(end, start, i, null, null));
      list.push(it.get$current());
    }
    return H.Primitives_stringFromCharCodes(list);
  },
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 75],
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 76],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 77],
  List_List$from: function(elements, growable, $E) {
    var list, t1;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = Array;
    return list;
  },
  print: function(object) {
    var line = H.S(object);
    H.printString(line);
  },
  RegExp_RegExp: function(source, caseSensitive, multiLine) {
    return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, false), null, null);
  },
  String_String$fromCharCodes: function(charCodes, start, end) {
    var len;
    if (typeof charCodes === "object" && charCodes !== null && charCodes.constructor === Array) {
      len = charCodes.length;
      end = P.String__checkBounds(len, start, end);
      return H.Primitives_stringFromCharCodes(start > 0 || end < len ? C.JSArray_methods.sublist$2(charCodes, start, end) : charCodes);
    }
    if (!!J.getInterceptor(charCodes).$isNativeUint8List)
      return H.Primitives_stringFromNativeUint8List(charCodes, start, P.String__checkBounds(charCodes.length, start, end));
    return P.String__stringFromIterable(charCodes, start, end);
  },
  Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
    var t1, result, bytes, t2, i, $byte, t3;
    t1 = new P.Uri__uriEncode_byteToHex();
    result = new P.StringBuffer("");
    bytes = encoding.get$encoder().convert$1(text);
    for (t2 = bytes.length, i = 0; i < t2; ++i) {
      $byte = bytes[i];
      if ($byte < 128) {
        t3 = $byte >>> 4;
        if (t3 >= 8)
          return H.ioore(canonicalTable, t3);
        t3 = (canonicalTable[t3] & C.JSInt_methods._shlPositive$1(1, $byte & 15)) !== 0;
      } else
        t3 = false;
      if (t3)
        result._contents += H.Primitives_stringFromCharCode($byte);
      else if (spaceToPlus && $byte === 32)
        result._contents += H.Primitives_stringFromCharCode(43);
      else {
        result._contents += H.Primitives_stringFromCharCode(37);
        t1.call$2($byte, result);
      }
    }
    t1 = result._contents;
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  Uri__hexCharPairToByte: function(s, pos) {
    var t1, $byte, i, charCode;
    for (t1 = J.getInterceptor$s(s), $byte = 0, i = 0; i < 2; ++i) {
      charCode = t1.codeUnitAt$1(s, pos + i);
      if (48 <= charCode && charCode <= 57)
        $byte = $byte * 16 + charCode - 48;
      else {
        charCode |= 32;
        if (97 <= charCode && charCode <= 102)
          $byte = $byte * 16 + charCode - 87;
        else
          throw H.wrapException(P.ArgumentError$("Invalid URL encoding"));
      }
    }
    return $byte;
  },
  Uri__uriDecode: function(text, encoding, plusToSpace) {
    var t1, simple, i, t2, codeUnit, bytes;
    t1 = J.getInterceptor$asx(text);
    simple = true;
    i = 0;
    while (true) {
      t2 = t1.get$length(text);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(i < t2 && simple))
        break;
      codeUnit = t1.codeUnitAt$1(text, i);
      simple = codeUnit !== 37 && codeUnit !== 43;
      ++i;
    }
    if (simple)
      if (encoding === C.Utf8Codec_false || false)
        return text;
      else
        bytes = t1.get$codeUnits(text);
    else {
      bytes = [];
      i = 0;
      while (true) {
        t2 = t1.get$length(text);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        codeUnit = t1.codeUnitAt$1(text, i);
        if (codeUnit > 127)
          throw H.wrapException(P.ArgumentError$("Illegal percent encoding in URI"));
        if (codeUnit === 37) {
          t2 = t1.get$length(text);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (i + 3 > t2)
            throw H.wrapException(P.ArgumentError$("Truncated URI"));
          bytes.push(P.Uri__hexCharPairToByte(text, i + 1));
          i += 2;
        } else if (plusToSpace && codeUnit === 43)
          bytes.push(32);
        else
          bytes.push(codeUnit);
        ++i;
      }
    }
    return encoding.decode$1(bytes);
  },
  NoSuchMethodError_toString_closure: {
    "^": "Closure:23;_core$_box_0",
    call$2: function(key, value) {
      var t1, t2;
      t1 = this._core$_box_0;
      if (t1._captured_i_1 > 0)
        t1._captured_sb_0._contents += ", ";
      t1._captured_sb_0._contents += H.S(key.get$_name());
      t2 = t1._captured_sb_0;
      t2._contents += ": ";
      t2._contents += H.S(P.Error_safeToString(value));
      ++t1._captured_i_1;
    }
  },
  bool: {
    "^": "Object;"
  },
  "+bool": 0,
  Comparable: {
    "^": "Object;"
  },
  DateTime: {
    "^": "Object;millisecondsSinceEpoch<,isUtc",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof P.DateTime))
        return false;
      return J.$eq(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch) && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return J.compareTo$1$ns(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
    },
    get$hashCode: function(_) {
      return this.millisecondsSinceEpoch;
    },
    toString$0: function(_) {
      var t1, y, m, d, h, min, sec, ms;
      t1 = this.isUtc;
      y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
      m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
      d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
      h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
      min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
      sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
      ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
      if (t1)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    add$1: function(_, duration) {
      return P.DateTime$fromMillisecondsSinceEpoch(J.$add$ns(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
    },
    DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
      if (J.$gt$n(J.abs$0$n(millisecondsSinceEpoch), 864e13))
        throw H.wrapException(P.ArgumentError$(millisecondsSinceEpoch));
    },
    $isComparable: 1,
    $asComparable: $.functionThatReturnsNull,
    static: {DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
        var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
        t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
        return t1;
      }, DateTime__fourDigits: function(n) {
        var absN, sign;
        absN = Math.abs(n);
        sign = n < 0 ? "-" : "";
        if (absN >= 1000)
          return "" + n;
        if (absN >= 100)
          return sign + "0" + H.S(absN);
        if (absN >= 10)
          return sign + "00" + H.S(absN);
        return sign + "000" + H.S(absN);
      }, DateTime__threeDigits: function(n) {
        if (n >= 100)
          return "" + n;
        if (n >= 10)
          return "0" + n;
        return "00" + n;
      }, DateTime__twoDigits: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }}
  },
  $double: {
    "^": "num;",
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  },
  "+double": 0,
  Duration: {
    "^": "Object;_duration<",
    $add: function(_, other) {
      return new P.Duration(this._duration + other.get$_duration());
    },
    $sub: function(_, other) {
      return new P.Duration(this._duration - other.get$_duration());
    },
    $mul: function(_, factor) {
      return new P.Duration(C.JSNumber_methods.round$0(this._duration * factor));
    },
    $tdiv: function(_, quotient) {
      if (quotient === 0)
        throw H.wrapException(new P.IntegerDivisionByZeroException());
      if (typeof quotient !== "number")
        return H.iae(quotient);
      return new P.Duration(C.JSInt_methods.$tdiv(this._duration, quotient));
    },
    $lt: function(_, other) {
      return this._duration < other.get$_duration();
    },
    $gt: function(_, other) {
      return this._duration > other.get$_duration();
    },
    $le: function(_, other) {
      return C.JSInt_methods.$le(this._duration, other.get$_duration());
    },
    $ge: function(_, other) {
      return C.JSInt_methods.$ge(this._duration, other.get$_duration());
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof P.Duration))
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + new P.Duration(-t2).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSInt_methods.remainder$1(t2, 1000000));
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    get$isNegative: function(_) {
      return this._duration < 0;
    },
    abs$0: function(_) {
      return new P.Duration(Math.abs(this._duration));
    },
    $negate: function(_) {
      return new P.Duration(-this._duration);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.Duration];
    }
  },
  Duration_toString_sixDigits: {
    "^": "Closure:24;",
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    }
  },
  Duration_toString_twoDigits: {
    "^": "Closure:24;",
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    }
  },
  Error: {
    "^": "Object;",
    get$stackTrace: function() {
      return H.getTraceFromException(this.$thrownJsError);
    },
    static: {Error$: function() {
        return new P.Error();
      }, Error_safeToString: function(object) {
        if (typeof object === "number" || typeof object === "boolean" || null == object)
          return J.toString$0(object);
        if (typeof object === "string")
          return JSON.stringify(object);
        return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
      }}
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;_hasValue,invalidValue,name>,message>",
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var t1, nameString, message, prefix, explanation, errorValue;
      t1 = this.name;
      nameString = t1 != null ? " (" + H.S(t1) + ")" : "";
      t1 = this.message;
      message = t1 == null ? "" : ": " + H.S(t1);
      prefix = this.get$_errorName() + nameString + message;
      if (!this._hasValue)
        return prefix;
      explanation = this.get$_errorExplanation();
      errorValue = P.Error_safeToString(this.invalidValue);
      return prefix + explanation + ": " + H.S(errorValue);
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(false, null, null, message);
      }, ArgumentError$value: function(value, $name, message) {
        return new P.ArgumentError(true, value, $name, message);
      }, ArgumentError$notNull: function($name) {
        return new P.ArgumentError(true, null, $name, "Must not be null");
      }}
  },
  RangeError: {
    "^": "ArgumentError;start,end,_hasValue,invalidValue,name,message",
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1, explanation, t2, t3;
      t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else {
          t3 = J.getInterceptor$n(t2);
          if (t3.$gt(t2, t1))
            explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
          else
            explanation = t3.$lt(t2, t1) ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
        }
      }
      return explanation;
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(null, null, false, null, null, message);
      }, RangeError$value: function(value, $name, message) {
        return new P.RangeError(null, null, true, value, $name, "Value not in range");
      }, RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
        return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
      }, RangeError_checkValueInInterval: function(value, minValue, maxValue, $name, message) {
        if (value < minValue || value > maxValue)
          throw H.wrapException(P.RangeError$range(value, minValue, maxValue, $name, message));
      }, RangeError_checkValidRange: function(start, end, $length, startName, endName, message) {
        var t1;
        if (typeof start !== "number")
          return H.iae(start);
        if (!(0 > start)) {
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = start > $length;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.RangeError$range(start, 0, $length, "start", message));
        if (end != null) {
          if (typeof end !== "number")
            return H.iae(end);
          if (!(start > end)) {
            if (typeof $length !== "number")
              return H.iae($length);
            t1 = end > $length;
          } else
            t1 = true;
          if (t1)
            throw H.wrapException(P.RangeError$range(end, start, $length, "end", message));
          return end;
        }
        return $length;
      }}
  },
  IndexError: {
    "^": "ArgumentError;indexable,length>,_hasValue,invalidValue,name,message",
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      P.Error_safeToString(this.indexable);
      var explanation = ": index should be less than " + H.S(this.length);
      return J.$lt$n(this.invalidValue, 0) ? ": index must not be negative" : explanation;
    },
    static: {IndexError$: function(invalidValue, indexable, $name, message, $length) {
        var t1 = $length != null ? $length : J.get$length$asx(indexable);
        return new P.IndexError(indexable, t1, true, invalidValue, $name, "Index out of range");
      }}
  },
  NoSuchMethodError: {
    "^": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
    toString$0: function(_) {
      var t1, t2, t3, t4, t5;
      t1 = {};
      t1._captured_sb_0 = new P.StringBuffer("");
      t1._captured_i_1 = 0;
      for (t2 = this._core$_arguments, t3 = 0; t4 = t2.length, t3 < t4; t3 = ++t1._captured_i_1) {
        if (t3 > 0)
          t1._captured_sb_0._contents += ", ";
        t5 = t1._captured_sb_0;
        if (t3 < 0)
          return H.ioore(t2, t3);
        t5._contents += H.S(P.Error_safeToString(t2[t3]));
      }
      this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(t1));
      t2 = "NoSuchMethodError : method not found: '" + this._memberName.toString$0(0) + "'\nReceiver: " + H.S(P.Error_safeToString(this._core$_receiver)) + "\nArguments: [";
      t1 = t1._captured_sb_0._contents;
      return t2 + (t1.charCodeAt(0) == 0 ? t1 : t1) + "]";
    },
    static: {NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
        return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
      }}
  },
  UnsupportedError: {
    "^": "Error;message>",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message>",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message>",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  OutOfMemoryError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: 1
  },
  StackOverflowError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: 1
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    }
  },
  _ExceptionImplementation: {
    "^": "Object;message>",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "^": "Object;message>,source,offset>",
    toString$0: function(_) {
      var t1, report, source;
      t1 = this.message;
      report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
      source = this.source;
      if (typeof source !== "string")
        return report;
      if (source.length > 78)
        source = J.substring$2$s(source, 0, 75) + "...";
      return report + "\n" + H.S(source);
    },
    static: {FormatException$: function(message, source, offset) {
        return new P.FormatException(message, source, offset);
      }}
  },
  IntegerDivisionByZeroException: {
    "^": "Object;",
    toString$0: function(_) {
      return "IntegerDivisionByZeroException";
    }
  },
  Expando: {
    "^": "Object;name>",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    }
  },
  Function: {
    "^": "Object;"
  },
  $int: {
    "^": "num;",
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  },
  "+int": 0,
  Iterator: {
    "^": "Object;"
  },
  List: {
    "^": "Object;",
    $asList: null,
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: null
  },
  "+List": 0,
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  "+Null": 0,
  num: {
    "^": "Object;",
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  },
  "+num": 0,
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: ["super$Object$toString$0", function(_) {
      return H.Primitives_objectToString(this);
    }],
    noSuchMethod$1: function(_, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    },
    get$runtimeType: function(_) {
      return new H.TypeImpl(H.getRuntimeTypeString(this), null);
    }
  },
  Match: {
    "^": "Object;"
  },
  StackTrace: {
    "^": "Object;"
  },
  Stopwatch: {
    "^": "Object;_start,_stop",
    start$0: [function(_) {
      var t1, t2;
      t1 = this._start == null;
      if (!t1 && this._stop == null)
        return;
      t2 = $.Primitives_timerTicks;
      if (t1)
        this._start = t2.call$0();
      else {
        this._start = J.$sub$n(t2.call$0(), J.$sub$n(this._stop, this._start));
        this._stop = null;
      }
    }, null, "get$start", 0, 0, null],
    stop$0: function(_) {
      if (!(this._start != null && this._stop == null))
        return;
      this._stop = $.Primitives_timerTicks.call$0();
    },
    reset$0: function(_) {
      var t1;
      if (this._start == null)
        return;
      t1 = $.Primitives_timerTicks.call$0();
      this._start = t1;
      if (this._stop != null)
        this._stop = t1;
    },
    get$elapsedTicks: function() {
      var t1, t2;
      t1 = this._start;
      if (t1 == null)
        return 0;
      t2 = this._stop;
      return t2 == null ? J.$sub$n($.Primitives_timerTicks.call$0(), this._start) : J.$sub$n(t2, t1);
    }
  },
  String: {
    "^": "Object;",
    $isComparable: 1,
    $asComparable: function() {
      return [P.String];
    }
  },
  "+String": 0,
  StringBuffer: {
    "^": "Object;_contents@",
    get$length: function(_) {
      return this._contents.length;
    },
    get$isEmpty: function(_) {
      return this._contents.length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._contents.length !== 0;
    },
    write$1: function(_, obj) {
      this._contents += H.S(obj);
    },
    writeAll$2: function(objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0) {
        do
          this._contents += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        this._contents += H.S(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents += separator;
          this._contents += H.S(iterator.get$current());
        }
      }
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  },
  Symbol: {
    "^": "Object;"
  },
  Uri__uriEncode_byteToHex: {
    "^": "Closure:6;",
    call$2: function($byte, buffer) {
      var t1 = J.getInterceptor$n($byte);
      buffer._contents += H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", t1.$shr($byte, 4)));
      buffer._contents += H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", t1.$and($byte, 15)));
    }
  }
}],
["dart.dom.html", "dart:html", , W, {
  "^": "",
  Blob_Blob: function(blobParts, type, endings) {
    return new Blob(blobParts);
  },
  CssStyleDeclaration__camelCase: function(hyphenated) {
    return hyphenated.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, C.JS_CONST_s8I);
  },
  _JenkinsSmiHash_combine: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  _convertNativeToDart_Window: function(win) {
    if (win == null)
      return;
    return W._DOMWindowCrossFrame__createSafe(win);
  },
  _convertNativeToDart_EventTarget: function(e) {
    var $window;
    if (e == null)
      return;
    if ("postMessage" in e) {
      $window = W._DOMWindowCrossFrame__createSafe(e);
      if (!!J.getInterceptor($window).$isEventTarget)
        return $window;
      return;
    } else
      return e;
  },
  _convertNativeToDart_XHR_Response: function(o) {
    if (!!J.getInterceptor(o).$isDocument)
      return o;
    return P.convertNativeToDart_AcceptStructuredClone(o, true);
  },
  _wrapZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    return t1.bindUnaryCallback$2$runGuarded(callback, true);
  },
  querySelector: function(selectors) {
    return document.querySelector(selectors);
  },
  HtmlElement: {
    "^": "Element;",
    $isHtmlElement: 1,
    $isObject: 1,
    "%": "HTMLAppletElement|HTMLBRElement|HTMLBaseElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDialogElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLImageElement|HTMLLabelElement|HTMLLegendElement|HTMLMarqueeElement|HTMLModElement|HTMLOptGroupElement|HTMLParagraphElement|HTMLPictureElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement;HTMLElement"
  },
  _EntryArray: {
    "^": "Interceptor;",
    $isList: 1,
    $asList: function() {
      return [W.Entry];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [W.Entry];
    },
    "%": "EntryArray"
  },
  AnchorElement: {
    "^": "HtmlElement;type%",
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isInterceptor: 1,
    "%": "HTMLAnchorElement"
  },
  ApplicationCacheErrorEvent: {
    "^": "Event;message=,status=",
    "%": "ApplicationCacheErrorEvent"
  },
  AreaElement: {
    "^": "HtmlElement;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isInterceptor: 1,
    "%": "HTMLAreaElement"
  },
  Blob: {
    "^": "Interceptor;size=,type=",
    slice$3: function(receiver, start, end, contentType) {
      return receiver.slice(start, end, contentType);
    },
    slice$2: function($receiver, start, end) {
      return $receiver.slice(start, end);
    },
    $isBlob: 1,
    "%": ";Blob"
  },
  BodyElement: {
    "^": "HtmlElement;",
    get$onError: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "error", false), [null]);
    },
    $isEventTarget: 1,
    $isInterceptor: 1,
    "%": "HTMLBodyElement"
  },
  ButtonElement: {
    "^": "HtmlElement;name=,type%,value=",
    "%": "HTMLButtonElement"
  },
  CharacterData: {
    "^": "Node;data%,length=",
    $isInterceptor: 1,
    "%": "CDATASection|CharacterData|Comment|ProcessingInstruction|Text"
  },
  CompositionEvent: {
    "^": "UIEvent;data=",
    "%": "CompositionEvent"
  },
  CssStyleDeclaration: {
    "^": "Interceptor_CssStyleDeclarationBase;length=",
    getPropertyValue$1: function(receiver, propertyName) {
      var propValue = this._getPropertyValueHelper$1(receiver, propertyName);
      return propValue != null ? propValue : "";
    },
    _getPropertyValueHelper$1: function(receiver, propertyName) {
      if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
        return receiver.getPropertyValue(propertyName);
      else
        return receiver.getPropertyValue(P.Device_cssPrefix() + propertyName);
    },
    get$position: function(receiver) {
      return receiver.position;
    },
    "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
  },
  Interceptor_CssStyleDeclarationBase: {
    "^": "Interceptor+CssStyleDeclarationBase;"
  },
  CssStyleDeclarationBase: {
    "^": "Object;",
    get$position: function(receiver) {
      return this.getPropertyValue$1(receiver, "position");
    },
    get$size: function(receiver) {
      return this.getPropertyValue$1(receiver, "size");
    }
  },
  DeviceLightEvent: {
    "^": "Event;value=",
    "%": "DeviceLightEvent"
  },
  DirectoryEntry: {
    "^": "Entry;",
    createDirectory$2$exclusive: function(receiver, path, exclusive) {
      return this._getDirectory$2$options(receiver, path, P.LinkedHashMap_LinkedHashMap$_literal(["create", true, "exclusive", exclusive], null, null));
    },
    createDirectory$1: function($receiver, path) {
      return this.createDirectory$2$exclusive($receiver, path, false);
    },
    getDirectory$1: function(receiver, path) {
      return this._getDirectory$1(receiver, path);
    },
    createFile$2$exclusive: function(receiver, path, exclusive) {
      return this._getFile$2$options(receiver, path, P.LinkedHashMap_LinkedHashMap$_literal(["create", true, "exclusive", exclusive], null, null));
    },
    createFile$1: function($receiver, path) {
      return this.createFile$2$exclusive($receiver, path, false);
    },
    getFile$1: function(receiver, path) {
      return this._getFile$1(receiver, path);
    },
    createReader$0: function(receiver) {
      return receiver.createReader();
    },
    __getDirectory$4$errorCallback$options$successCallback: function(receiver, path, errorCallback, options, successCallback) {
      this.__getDirectory_1$4(receiver, path, P.convertDartToNative_Dictionary(options), successCallback, errorCallback);
      return;
    },
    __getDirectory_1$4: function(receiver, path, options, successCallback, errorCallback) {
      return receiver.getDirectory(path, options, H.convertDartClosureToJS(successCallback, 1), H.convertDartClosureToJS(errorCallback, 1));
    },
    _getDirectory$2$options: function(receiver, path, options) {
      var t1, completer;
      t1 = W.Entry;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      this.__getDirectory$4$errorCallback$options$successCallback(receiver, path, new W.DirectoryEntry__getDirectory_closure(completer), options, new W.DirectoryEntry__getDirectory_closure0(completer));
      return completer.future;
    },
    _getDirectory$1: function($receiver, path) {
      return this._getDirectory$2$options($receiver, path, null);
    },
    __getFile$4$errorCallback$options$successCallback: function(receiver, path, errorCallback, options, successCallback) {
      this.__getFile_1$4(receiver, path, P.convertDartToNative_Dictionary(options), successCallback, errorCallback);
      return;
    },
    __getFile_1$4: function(receiver, path, options, successCallback, errorCallback) {
      return receiver.getFile(path, options, H.convertDartClosureToJS(successCallback, 1), H.convertDartClosureToJS(errorCallback, 1));
    },
    _getFile$2$options: function(receiver, path, options) {
      var t1, completer;
      t1 = W.Entry;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      this.__getFile$4$errorCallback$options$successCallback(receiver, path, new W.DirectoryEntry__getFile_closure(completer), options, new W.DirectoryEntry__getFile_closure0(completer));
      return completer.future;
    },
    _getFile$1: function($receiver, path) {
      return this._getFile$2$options($receiver, path, null);
    },
    _removeRecursively$2: function(receiver, successCallback, errorCallback) {
      return receiver.removeRecursively(H.convertDartClosureToJS(successCallback, 0), H.convertDartClosureToJS(errorCallback, 1));
    },
    removeRecursively$0: function(receiver) {
      var completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      this._removeRecursively$2(receiver, new W.DirectoryEntry_removeRecursively_closure(completer), new W.DirectoryEntry_removeRecursively_closure0(completer));
      return completer.future;
    },
    $isDirectoryEntry: 1,
    $isEntry: 1,
    $isObject: 1,
    "%": "DirectoryEntry"
  },
  DirectoryEntry__getDirectory_closure0: {
    "^": "Closure:2;_html$_captured_completer_0",
    call$1: [function(value) {
      this._html$_captured_completer_0.complete$1(0, value);
    }, null, null, 2, 0, null, 22, "call"]
  },
  DirectoryEntry__getDirectory_closure: {
    "^": "Closure:2;_captured_completer_1",
    call$1: [function(error) {
      this._captured_completer_1.completeError$1(error);
    }, null, null, 2, 0, null, 24, "call"]
  },
  DirectoryEntry__getFile_closure0: {
    "^": "Closure:2;_html$_captured_completer_0",
    call$1: [function(value) {
      this._html$_captured_completer_0.complete$1(0, value);
    }, null, null, 2, 0, null, 22, "call"]
  },
  DirectoryEntry__getFile_closure: {
    "^": "Closure:2;_captured_completer_1",
    call$1: [function(error) {
      this._captured_completer_1.completeError$1(error);
    }, null, null, 2, 0, null, 24, "call"]
  },
  DirectoryEntry_removeRecursively_closure: {
    "^": "Closure:0;_html$_captured_completer_0",
    call$0: [function() {
      this._html$_captured_completer_0.complete$0(0);
    }, null, null, 0, 0, null, "call"]
  },
  DirectoryEntry_removeRecursively_closure0: {
    "^": "Closure:2;_captured_completer_1",
    call$1: [function(error) {
      this._captured_completer_1.completeError$1(error);
    }, null, null, 2, 0, null, 24, "call"]
  },
  DirectoryReader: {
    "^": "Interceptor;",
    _readEntries$2: function(receiver, successCallback, errorCallback) {
      return receiver.readEntries(H.convertDartClosureToJS(successCallback, 1), H.convertDartClosureToJS(errorCallback, 1));
    },
    readEntries$0: function(receiver) {
      var t1, completer;
      t1 = [P.List, W.Entry];
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      this._readEntries$2(receiver, new W.DirectoryReader_readEntries_closure(completer), new W.DirectoryReader_readEntries_closure0(completer));
      return completer.future;
    },
    "%": "DirectoryReader"
  },
  DirectoryReader_readEntries_closure: {
    "^": "Closure:2;_html$_captured_completer_0",
    call$1: [function(value) {
      this._html$_captured_completer_0.complete$1(0, value);
    }, null, null, 2, 0, null, 22, "call"]
  },
  DirectoryReader_readEntries_closure0: {
    "^": "Closure:2;_captured_completer_1",
    call$1: [function(error) {
      this._captured_completer_1.completeError$1(error);
    }, null, null, 2, 0, null, 24, "call"]
  },
  DivElement: {
    "^": "HtmlElement;",
    "%": ";HTMLDivElement"
  },
  Document: {
    "^": "Node;",
    get$onError: function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, "error", false), [null]);
    },
    $isDocument: 1,
    "%": "Document|HTMLDocument|XMLDocument"
  },
  DocumentFragment: {
    "^": "Node;",
    $isInterceptor: 1,
    "%": "DocumentFragment|ShadowRoot"
  },
  DomError: {
    "^": "Interceptor;message=,name=",
    "%": ";DOMError"
  },
  DomException: {
    "^": "Interceptor;message=",
    get$name: function(receiver) {
      var errorName = receiver.name;
      if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    },
    toString$0: function(receiver) {
      return String(receiver);
    },
    "%": "DOMException"
  },
  DomRectReadOnly: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=,x=,y=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = this.get$width(receiver);
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = this.get$height(receiver);
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(this.get$width(receiver));
      t4 = J.get$hashCode$(this.get$height(receiver));
      return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
    },
    get$topLeft: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point0(receiver.left, receiver.top), [null]);
    },
    $isRectangle: 1,
    $asRectangle: $.functionThatReturnsNull,
    "%": ";DOMRectReadOnly"
  },
  DomSettableTokenList: {
    "^": "DomTokenList;value=",
    "%": "DOMSettableTokenList"
  },
  DomTokenList: {
    "^": "Interceptor;length=",
    add$1: function(receiver, tokens) {
      return receiver.add(tokens);
    },
    "%": ";DOMTokenList"
  },
  Element: {
    "^": "Node;",
    get$classes: function(receiver) {
      return new W._ElementCssClassSet(receiver);
    },
    get$offset: function(receiver) {
      return P.Rectangle$(C.JSNumber_methods.round$0(receiver.offsetLeft), C.JSNumber_methods.round$0(receiver.offsetTop), C.JSNumber_methods.round$0(receiver.offsetWidth), C.JSNumber_methods.round$0(receiver.offsetHeight), null);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    getBoundingClientRect$0: function(receiver) {
      return receiver.getBoundingClientRect();
    },
    get$onClick: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "click", false), [null]);
    },
    get$onError: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "error", false), [null]);
    },
    get$onKeyDown: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "keydown", false), [null]);
    },
    $isElement: 1,
    $isInterceptor: 1,
    $isEventTarget: 1,
    "%": ";Element"
  },
  EmbedElement: {
    "^": "HtmlElement;name=,type%",
    "%": "HTMLEmbedElement"
  },
  Entry: {
    "^": "Interceptor;fullPath=,isDirectory=,isFile=,name=",
    _getMetadata$2: function(receiver, successCallback, errorCallback) {
      return receiver.getMetadata(H.convertDartClosureToJS(successCallback, 1), H.convertDartClosureToJS(errorCallback, 1));
    },
    getMetadata$0: function(receiver) {
      var t1, completer;
      t1 = W.Metadata;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      this._getMetadata$2(receiver, new W.Entry_getMetadata_closure(completer), new W.Entry_getMetadata_closure0(completer));
      return completer.future;
    },
    _getParent$2: function(receiver, successCallback, errorCallback) {
      return receiver.getParent(H.convertDartClosureToJS(successCallback, 1), H.convertDartClosureToJS(errorCallback, 1));
    },
    getParent$0: function(receiver) {
      var t1, completer;
      t1 = W.Entry;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      this._getParent$2(receiver, new W.Entry_getParent_closure(completer), new W.Entry_getParent_closure0(completer));
      return completer.future;
    },
    _html$_remove$2: function(receiver, successCallback, errorCallback) {
      return receiver.remove(H.convertDartClosureToJS(successCallback, 0), H.convertDartClosureToJS(errorCallback, 1));
    },
    remove$0: function(receiver) {
      var completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      this._html$_remove$2(receiver, new W.Entry_remove_closure(completer), new W.Entry_remove_closure0(completer));
      return completer.future;
    },
    toUrl$0: function(receiver) {
      return receiver.toURL();
    },
    $isEntry: 1,
    $isObject: 1,
    "%": ";Entry"
  },
  Entry_getMetadata_closure: {
    "^": "Closure:2;_html$_captured_completer_0",
    call$1: [function(value) {
      this._html$_captured_completer_0.complete$1(0, value);
    }, null, null, 2, 0, null, 22, "call"]
  },
  Entry_getMetadata_closure0: {
    "^": "Closure:2;_captured_completer_1",
    call$1: [function(error) {
      this._captured_completer_1.completeError$1(error);
    }, null, null, 2, 0, null, 24, "call"]
  },
  Entry_getParent_closure: {
    "^": "Closure:2;_html$_captured_completer_0",
    call$1: [function(value) {
      this._html$_captured_completer_0.complete$1(0, value);
    }, null, null, 2, 0, null, 22, "call"]
  },
  Entry_getParent_closure0: {
    "^": "Closure:2;_captured_completer_1",
    call$1: [function(error) {
      this._captured_completer_1.completeError$1(error);
    }, null, null, 2, 0, null, 24, "call"]
  },
  Entry_remove_closure: {
    "^": "Closure:0;_html$_captured_completer_0",
    call$0: [function() {
      this._html$_captured_completer_0.complete$0(0);
    }, null, null, 0, 0, null, "call"]
  },
  Entry_remove_closure0: {
    "^": "Closure:2;_captured_completer_1",
    call$1: [function(error) {
      this._captured_completer_1.completeError$1(error);
    }, null, null, 2, 0, null, 24, "call"]
  },
  ErrorEvent: {
    "^": "Event;error=,message=",
    "%": "ErrorEvent"
  },
  Event: {
    "^": "Interceptor;path=,type=",
    $isEvent: 1,
    $isObject: 1,
    "%": "AnimationPlayerEvent|AudioProcessingEvent|AutocompleteErrorEvent|BeforeUnloadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ExtendableEvent|FetchEvent|FontFaceSetLoadEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|MIDIConnectionEvent|MediaKeyNeededEvent|MediaQueryListEvent|MediaStreamEvent|MediaStreamTrackEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|RTCPeerConnectionIceEvent|RelatedEvent|SecurityPolicyViolationEvent|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent;ClipboardEvent|Event|InputEvent"
  },
  EventTarget: {
    "^": "Interceptor;",
    addEventListener$3: function(receiver, type, listener, useCapture) {
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, useCapture);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      if (listener != null)
        this._removeEventListener$3(receiver, type, listener, useCapture);
    },
    _addEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    _removeEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    $isEventTarget: 1,
    "%": "MediaStream;EventTarget"
  },
  FieldSetElement: {
    "^": "HtmlElement;name=,type=",
    "%": "HTMLFieldSetElement"
  },
  File: {
    "^": "Blob;name=",
    $isFile: 1,
    $isObject: 1,
    "%": "File"
  },
  FileEntry: {
    "^": "Entry;",
    _createWriter$2: function(receiver, successCallback, errorCallback) {
      return receiver.createWriter(H.convertDartClosureToJS(successCallback, 1), H.convertDartClosureToJS(errorCallback, 1));
    },
    createWriter$0: function(receiver) {
      var t1, completer;
      t1 = W.FileWriter;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      this._createWriter$2(receiver, new W.FileEntry_createWriter_closure(completer), new W.FileEntry_createWriter_closure0(completer));
      return completer.future;
    },
    _html$_file$2: function(receiver, successCallback, errorCallback) {
      return receiver.file(H.convertDartClosureToJS(successCallback, 1), H.convertDartClosureToJS(errorCallback, 1));
    },
    file$0: function(receiver) {
      var t1, completer;
      t1 = W.File;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      this._html$_file$2(receiver, new W.FileEntry_file_closure(completer), new W.FileEntry_file_closure0(completer));
      return completer.future;
    },
    $isFileEntry: 1,
    $isEntry: 1,
    $isObject: 1,
    "%": "FileEntry"
  },
  FileEntry_createWriter_closure: {
    "^": "Closure:2;_html$_captured_completer_0",
    call$1: [function(value) {
      this._html$_captured_completer_0.complete$1(0, value);
    }, null, null, 2, 0, null, 22, "call"]
  },
  FileEntry_createWriter_closure0: {
    "^": "Closure:2;_captured_completer_1",
    call$1: [function(error) {
      this._captured_completer_1.completeError$1(error);
    }, null, null, 2, 0, null, 24, "call"]
  },
  FileEntry_file_closure: {
    "^": "Closure:2;_html$_captured_completer_0",
    call$1: [function(value) {
      this._html$_captured_completer_0.complete$1(0, value);
    }, null, null, 2, 0, null, 22, "call"]
  },
  FileEntry_file_closure0: {
    "^": "Closure:2;_captured_completer_1",
    call$1: [function(error) {
      this._captured_completer_1.completeError$1(error);
    }, null, null, 2, 0, null, 24, "call"]
  },
  FileError: {
    "^": "DomError;",
    $isFileError: 1,
    $isObject: 1,
    "%": "FileError"
  },
  FileReader: {
    "^": "EventTarget;error=",
    get$result: function(receiver) {
      var res = receiver.result;
      if (!!J.getInterceptor(res).$isByteBuffer)
        return C.NativeByteBuffer_methods.asUint8List$2(res, 0, null);
      return res;
    },
    get$onError: function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, "error", false), [null]);
    },
    "%": "FileReader"
  },
  FileSystem: {
    "^": "Interceptor;name=,root=",
    $isFileSystem: 1,
    $isObject: 1,
    "%": "DOMFileSystem"
  },
  FileWriter: {
    "^": "EventTarget;error=,length=,position=",
    truncate$1: function(receiver, size) {
      return receiver.truncate(size);
    },
    write$1: function(receiver, data) {
      return receiver.write(data);
    },
    get$onError: function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, "error", false), [null]);
    },
    get$onWrite: function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, "write", false), [null]);
    },
    $isFileWriter: 1,
    $isObject: 1,
    "%": "FileWriter"
  },
  FormElement: {
    "^": "HtmlElement;length=,name=",
    "%": "HTMLFormElement"
  },
  HttpRequest: {
    "^": "HttpRequestEventTarget;status=",
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, async, user, password);
    },
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    "%": "XMLHttpRequest"
  },
  HttpRequestEventTarget: {
    "^": "EventTarget;",
    get$onError: function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, "error", false), [null]);
    },
    "%": ";XMLHttpRequestEventTarget"
  },
  IFrameElement: {
    "^": "HtmlElement;name=",
    "%": "HTMLIFrameElement"
  },
  ImageData: {
    "^": "Interceptor;data=",
    $isImageData: 1,
    "%": "ImageData"
  },
  InputElement: {
    "^": "HtmlElement;name=,size=,type%,value=",
    $isElement: 1,
    $isInterceptor: 1,
    $isEventTarget: 1,
    $isNode: 1,
    "%": "HTMLInputElement"
  },
  KeyboardEvent: {
    "^": "UIEvent;",
    get$keyCode: function(receiver) {
      return receiver.keyCode;
    },
    $isKeyboardEvent: 1,
    $isEvent: 1,
    $isObject: 1,
    "%": "KeyboardEvent"
  },
  KeygenElement: {
    "^": "HtmlElement;name=,type=",
    "%": "HTMLKeygenElement"
  },
  LIElement: {
    "^": "HtmlElement;value=",
    "%": "HTMLLIElement"
  },
  LinkElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLLinkElement"
  },
  MapElement: {
    "^": "HtmlElement;name=",
    "%": "HTMLMapElement"
  },
  MediaElement: {
    "^": "HtmlElement;error=",
    "%": "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement"
  },
  MediaKeyEvent: {
    "^": "Event;message=",
    "%": "MediaKeyEvent"
  },
  MediaKeyMessageEvent: {
    "^": "Event;message=",
    "%": "MediaKeyMessageEvent"
  },
  MenuElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLMenuElement"
  },
  MenuItemElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLMenuItemElement"
  },
  MessageEvent: {
    "^": "Event;",
    get$data: function(receiver) {
      return P.convertNativeToDart_AcceptStructuredClone(receiver.data, true);
    },
    "%": "MessageEvent"
  },
  MetaElement: {
    "^": "HtmlElement;name=",
    "%": "HTMLMetaElement"
  },
  Metadata: {
    "^": "Interceptor;size=",
    get$modificationTime: function(receiver) {
      return P.convertNativeToDart_DateTime(receiver.modificationTime);
    },
    $isObject: 1,
    "%": "Metadata"
  },
  MeterElement: {
    "^": "HtmlElement;value=",
    "%": "HTMLMeterElement"
  },
  MidiMessageEvent: {
    "^": "Event;data=",
    "%": "MIDIMessageEvent"
  },
  MouseEvent: {
    "^": "UIEvent;",
    get$offset: function(receiver) {
      var target, point;
      if (!!receiver.offsetX)
        return H.setRuntimeTypeInfo(new P.Point0(receiver.offsetX, receiver.offsetY), [null]);
      else {
        if (!J.getInterceptor(W._convertNativeToDart_EventTarget(receiver.target)).$isElement)
          throw H.wrapException(P.UnsupportedError$("offsetX is only supported on elements"));
        target = W._convertNativeToDart_EventTarget(receiver.target);
        point = H.setRuntimeTypeInfo(new P.Point0(receiver.clientX, receiver.clientY), [null]).$sub(0, J.get$topLeft$x(J.getBoundingClientRect$0$x(target)));
        return H.setRuntimeTypeInfo(new P.Point0(J.toInt$0$n(point.x), J.toInt$0$n(point.y)), [null]);
      }
    },
    $isMouseEvent: 1,
    $isEvent: 1,
    $isObject: 1,
    "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
  },
  Navigator: {
    "^": "Interceptor;",
    $isInterceptor: 1,
    "%": "Navigator"
  },
  NavigatorUserMediaError: {
    "^": "Interceptor;message=,name=",
    "%": "NavigatorUserMediaError"
  },
  Node: {
    "^": "EventTarget;parent:parentElement=",
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString$0(receiver) : value;
    },
    $isNode: 1,
    $isObject: 1,
    "%": ";Node"
  },
  NodeList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "NodeList|RadioNodeList"
  },
  Interceptor_ListMixin: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "^": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    }
  },
  OListElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLOListElement"
  },
  ObjectElement: {
    "^": "HtmlElement;data%,name=,type%",
    "%": "HTMLObjectElement"
  },
  OptionElement: {
    "^": "HtmlElement;index=,value=",
    "%": "HTMLOptionElement"
  },
  OutputElement: {
    "^": "HtmlElement;name=,type=,value=",
    "%": "HTMLOutputElement"
  },
  ParamElement: {
    "^": "HtmlElement;name=,value=",
    "%": "HTMLParamElement"
  },
  PluginPlaceholderElement: {
    "^": "DivElement;message=",
    "%": "PluginPlaceholderElement"
  },
  PositionError: {
    "^": "Interceptor;message=",
    "%": "PositionError"
  },
  ProgressElement: {
    "^": "HtmlElement;position=,value=",
    "%": "HTMLProgressElement"
  },
  ProgressEvent: {
    "^": "Event;",
    $isProgressEvent: 1,
    $isEvent: 1,
    $isObject: 1,
    "%": "ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent"
  },
  PushEvent: {
    "^": "Event;data=",
    "%": "PushEvent"
  },
  ScriptElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLScriptElement"
  },
  SelectElement: {
    "^": "HtmlElement;length=,name=,size=,type=,value=",
    "%": "HTMLSelectElement"
  },
  SourceElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLSourceElement"
  },
  SpeechRecognitionError: {
    "^": "Event;error=,message=",
    "%": "SpeechRecognitionError"
  },
  SpeechSynthesisEvent: {
    "^": "Event;name=",
    "%": "SpeechSynthesisEvent"
  },
  StyleElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLStyleElement"
  },
  TextAreaElement: {
    "^": "HtmlElement;name=,type=,value=",
    "%": "HTMLTextAreaElement"
  },
  TextEvent: {
    "^": "UIEvent;data=",
    "%": "TextEvent"
  },
  UIEvent: {
    "^": "Event;",
    "%": "FocusEvent|SVGZoomEvent|TouchEvent;UIEvent"
  },
  Window: {
    "^": "EventTarget;name=,status=",
    get$parent: function(receiver) {
      return W._convertNativeToDart_Window(receiver.parent);
    },
    __requestFileSystem$4: function(receiver, type, size, successCallback, errorCallback) {
      return receiver.webkitRequestFileSystem(type, size, H.convertDartClosureToJS(successCallback, 1), H.convertDartClosureToJS(errorCallback, 1));
    },
    _requestFileSystem$2: function(receiver, type, size) {
      var t1, completer;
      t1 = W.FileSystem;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      this.__requestFileSystem$4(receiver, type, size, new W.Window__requestFileSystem_closure(completer), new W.Window__requestFileSystem_closure0(completer));
      return completer.future;
    },
    _resolveLocalFileSystemUrl$3: function(receiver, url, successCallback, errorCallback) {
      return receiver.webkitResolveLocalFileSystemURL(url, H.convertDartClosureToJS(successCallback, 1), H.convertDartClosureToJS(errorCallback, 1));
    },
    resolveLocalFileSystemUrl$1: function(receiver, url) {
      var t1, completer;
      t1 = W.Entry;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      this._resolveLocalFileSystemUrl$3(receiver, url, new W.Window_resolveLocalFileSystemUrl_closure(completer), new W.Window_resolveLocalFileSystemUrl_closure0(completer));
      return completer.future;
    },
    get$onError: function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, "error", false), [null]);
    },
    $isWindow: 1,
    $isInterceptor: 1,
    $isEventTarget: 1,
    "%": "DOMWindow|Window"
  },
  Window__requestFileSystem_closure: {
    "^": "Closure:2;_html$_captured_completer_0",
    call$1: [function(value) {
      this._html$_captured_completer_0.complete$1(0, value);
    }, null, null, 2, 0, null, 22, "call"]
  },
  Window__requestFileSystem_closure0: {
    "^": "Closure:2;_captured_completer_1",
    call$1: [function(error) {
      this._captured_completer_1.completeError$1(error);
    }, null, null, 2, 0, null, 24, "call"]
  },
  Window_resolveLocalFileSystemUrl_closure: {
    "^": "Closure:2;_html$_captured_completer_0",
    call$1: [function(value) {
      this._html$_captured_completer_0.complete$1(0, value);
    }, null, null, 2, 0, null, 22, "call"]
  },
  Window_resolveLocalFileSystemUrl_closure0: {
    "^": "Closure:2;_captured_completer_1",
    call$1: [function(error) {
      this._captured_completer_1.completeError$1(error);
    }, null, null, 2, 0, null, 24, "call"]
  },
  _Attr: {
    "^": "Node;name=,value=",
    "%": "Attr"
  },
  _ClientRect: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.width;
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.height;
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(receiver.width);
      t4 = J.get$hashCode$(receiver.height);
      return W._JenkinsSmiHash_finish(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4));
    },
    get$topLeft: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point0(receiver.left, receiver.top), [null]);
    },
    $isRectangle: 1,
    $asRectangle: $.functionThatReturnsNull,
    "%": "ClientRect"
  },
  _DocumentType: {
    "^": "Node;",
    $isInterceptor: 1,
    "%": "DocumentType"
  },
  _DomRect: {
    "^": "DomRectReadOnly;",
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    },
    get$x: function(receiver) {
      return receiver.x;
    },
    get$y: function(receiver) {
      return receiver.y;
    },
    "%": "DOMRect"
  },
  _HTMLFrameSetElement: {
    "^": "HtmlElement;",
    $isEventTarget: 1,
    $isInterceptor: 1,
    "%": "HTMLFrameSetElement"
  },
  _NamedNodeMap: {
    "^": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  Interceptor_ListMixin0: {
    "^": "Interceptor+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "^": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    }
  },
  _ElementCssClassSet: {
    "^": "CssClassSetImpl;_html$_element",
    readClasses$0: function() {
      var s, t1, trimmed;
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      for (t1 = this._html$_element.className.split(" "), t1 = H.setRuntimeTypeInfo(new J.ArrayIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        trimmed = J.trim$0$s(t1.__interceptors$_current);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._html$_element.className = s.join$1(0, " ");
    },
    get$length: function(_) {
      return this._html$_element.classList.length;
    },
    get$isEmpty: function(_) {
      return this._html$_element.classList.length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._html$_element.classList.length !== 0;
    },
    contains$1: function(_, value) {
      return typeof value === "string" && this._html$_element.classList.contains(value);
    },
    add$1: function(_, value) {
      var list, t1;
      list = this._html$_element.classList;
      t1 = list.contains(value);
      list.add(value);
      return !t1;
    },
    remove$1: function(_, value) {
      var list, removed, t1;
      list = this._html$_element.classList;
      removed = list.contains(value);
      list.remove(value);
      t1 = removed;
      return t1;
    }
  },
  _EventStream: {
    "^": "Stream;_target,_eventType,_useCapture",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }
  },
  _ElementEventStreamImpl: {
    "^": "_EventStream;_target,_eventType,_useCapture"
  },
  _EventStreamSubscription: {
    "^": "StreamSubscription;_pauseCount,_target,_eventType,_html$_onData,_useCapture",
    cancel$0: function() {
      if (this._target == null)
        return;
      this._unlisten$0();
      this._target = null;
      this._html$_onData = null;
      return;
    },
    onError$1: [function(_, handleError) {
    }, "call$1", "get$onError", 2, 0, 18],
    pause$1: function(_, resumeSignal) {
      if (this._target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    get$isPaused: function() {
      return this._pauseCount > 0;
    },
    resume$0: function() {
      if (this._target == null || this._pauseCount <= 0)
        return;
      --this._pauseCount;
      this._tryResume$0();
    },
    _tryResume$0: function() {
      var t1 = this._html$_onData;
      if (t1 != null && this._pauseCount <= 0)
        J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    },
    _unlisten$0: function() {
      var t1 = this._html$_onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    }
  },
  ImmutableListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return H.setRuntimeTypeInfo(new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null), [H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)]);
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    $isList: 1,
    $asList: null,
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: null
  },
  FixedSizeListIterator: {
    "^": "Object;_array,_length,_position,_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._length;
      if (nextPosition < t1) {
        this._current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._current;
    }
  },
  _DOMWindowCrossFrame: {
    "^": "Object;_window",
    get$parent: function(_) {
      return W._DOMWindowCrossFrame__createSafe(this._window.parent);
    },
    addEventListener$3: function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    removeEventListener$3: function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    $isEventTarget: 1,
    $isInterceptor: 1,
    static: {_DOMWindowCrossFrame__createSafe: function(w) {
        if (w === window)
          return w;
        else
          return new W._DOMWindowCrossFrame(w);
      }}
  }
}],
["dart.dom.indexed_db", "dart:indexed_db", , P, {
  "^": "",
  KeyRange: {
    "^": "Interceptor;",
    $isKeyRange: 1,
    "%": "IDBKeyRange"
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  "^": "",
  AElement: {
    "^": "GraphicsElement;",
    $isInterceptor: 1,
    "%": "SVGAElement"
  },
  AltGlyphElement: {
    "^": "TextPositioningElement;",
    $isInterceptor: 1,
    "%": "SVGAltGlyphElement"
  },
  AnimationElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement"
  },
  FEBlendElement: {
    "^": "SvgElement;result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "^": "SvgElement;type=,result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "^": "SvgElement;result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "^": "SvgElement;result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "^": "SvgElement;result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "^": "SvgElement;result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "^": "SvgElement;result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "^": "SvgElement;result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "^": "SvgElement;result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "^": "SvgElement;result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "^": "SvgElement;result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "^": "SvgElement;result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "^": "SvgElement;result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "^": "SvgElement;result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "^": "SvgElement;result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "^": "SvgElement;type=,result=,x=,y=",
    $isInterceptor: 1,
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "^": "SvgElement;x=,y=",
    $isInterceptor: 1,
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "^": "GraphicsElement;x=,y=",
    "%": "SVGForeignObjectElement"
  },
  GeometryElement: {
    "^": "GraphicsElement;",
    "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
  },
  GraphicsElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "^": "GraphicsElement;x=,y=",
    $isInterceptor: 1,
    "%": "SVGImageElement"
  },
  MarkerElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGMarkerElement"
  },
  MaskElement: {
    "^": "SvgElement;x=,y=",
    $isInterceptor: 1,
    "%": "SVGMaskElement"
  },
  PatternElement: {
    "^": "SvgElement;x=,y=",
    $isInterceptor: 1,
    "%": "SVGPatternElement"
  },
  RectElement: {
    "^": "GeometryElement;x=,y=",
    "%": "SVGRectElement"
  },
  ScriptElement0: {
    "^": "SvgElement;type%",
    $isInterceptor: 1,
    "%": "SVGScriptElement"
  },
  StyleElement0: {
    "^": "SvgElement;type%",
    "%": "SVGStyleElement"
  },
  _AttributeClassSet: {
    "^": "CssClassSetImpl;_element",
    readClasses$0: function() {
      var classname, s, t1, trimmed;
      classname = this._element.getAttribute("class");
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      if (classname == null)
        return s;
      for (t1 = classname.split(" "), t1 = H.setRuntimeTypeInfo(new J.ArrayIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        trimmed = J.trim$0$s(t1.__interceptors$_current);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._element.setAttribute("class", s.join$1(0, " "));
    }
  },
  SvgElement: {
    "^": "Element;",
    get$classes: function(receiver) {
      return new P._AttributeClassSet(receiver);
    },
    get$onClick: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "click", false), [null]);
    },
    get$onError: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "error", false), [null]);
    },
    get$onKeyDown: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "keydown", false), [null]);
    },
    $isEventTarget: 1,
    $isInterceptor: 1,
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGComponentTransferFunctionElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMetadataElement|SVGMissingGlyphElement|SVGStopElement|SVGTitleElement|SVGVKernElement;SVGElement"
  },
  SvgSvgElement: {
    "^": "GraphicsElement;x=,y=",
    $isInterceptor: 1,
    "%": "SVGSVGElement"
  },
  SymbolElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGSymbolElement"
  },
  TextContentElement: {
    "^": "GraphicsElement;",
    "%": ";SVGTextContentElement"
  },
  TextPathElement: {
    "^": "TextContentElement;",
    $isInterceptor: 1,
    "%": "SVGTextPathElement"
  },
  TextPositioningElement: {
    "^": "TextContentElement;x=,y=",
    "%": "SVGTSpanElement|SVGTextElement;SVGTextPositioningElement"
  },
  UseElement: {
    "^": "GraphicsElement;x=,y=",
    $isInterceptor: 1,
    "%": "SVGUseElement"
  },
  ViewElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGViewElement"
  },
  _GradientElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"
  },
  _SVGCursorElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGCursorElement"
  },
  _SVGFEDropShadowElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGFEDropShadowElement"
  },
  _SVGGlyphRefElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGGlyphRefElement"
  },
  _SVGMPathElement: {
    "^": "SvgElement;",
    $isInterceptor: 1,
    "%": "SVGMPathElement"
  }
}],
["dart.dom.web_audio", "dart:web_audio", , P, {
  "^": ""
}],
["dart.dom.web_gl", "dart:web_gl", , P, {
  "^": ""
}],
["dart.dom.web_sql", "dart:web_sql", , P, {
  "^": "",
  SqlError: {
    "^": "Interceptor;message=",
    "%": "SQLError"
  }
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  Capability: {
    "^": "Object;"
  }
}],
["dart.js", "dart:js", , P, {
  "^": "",
  _callDartFunction: [function(callback, captureThis, $self, $arguments) {
    var arguments0, dartArgs;
    if (captureThis === true) {
      arguments0 = [$self];
      C.JSArray_methods.addAll$1(arguments0, $arguments);
      $arguments = arguments0;
    }
    dartArgs = P.List_List$from(J.map$1$ax($arguments, P._convertToDart$closure()), true, null);
    return P._convertToJS(H.Primitives_applyFunctionWithPositionalArguments(callback, dartArgs));
  }, null, null, 8, 0, null, 20, 34, 35, 36],
  _defineProperty: function(o, $name, value) {
    var exception;
    if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name))
      try {
        Object.defineProperty(o, $name, {value: value});
        return true;
      } catch (exception) {
        H.unwrapException(exception);
      }
    return false;
  },
  _getOwnProperty: function(o, $name) {
    if (Object.prototype.hasOwnProperty.call(o, $name))
      return o[$name];
    return;
  },
  _convertToJS: [function(o) {
    var t1;
    if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
      return o;
    else {
      t1 = J.getInterceptor(o);
      if (!!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow)
        return o;
      else if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      else if (!!t1.$isJsObject)
        return o._jsObject;
      else if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      else
        return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.get$_dartProxyCtor()));
    }
  }, "call$1", "_convertToJS$closure", 2, 0, 2, 37],
  _getJsProxy: function(o, propertyName, createProxy) {
    var jsProxy = P._getOwnProperty(o, propertyName);
    if (jsProxy == null) {
      jsProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, jsProxy);
    }
    return jsProxy;
  },
  _convertToDart: [function(o) {
    var t1;
    if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
      return o;
    else {
      if (o instanceof Object) {
        t1 = J.getInterceptor(o);
        t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
      } else
        t1 = false;
      if (t1)
        return o;
      else if (o instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(o.getTime(), false);
      else if (o.constructor === $.get$_dartProxyCtor())
        return o.o;
      else
        return P._wrapToDart(o);
    }
  }, "call$1", "_convertToDart$closure", 2, 0, 74, 37],
  _wrapToDart: function(o) {
    if (typeof o == "function")
      return P._getDartProxy(o, $.get$_DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
    else if (o instanceof Array)
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
    else
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
  },
  _getDartProxy: function(o, propertyName, createProxy) {
    var dartProxy = P._getOwnProperty(o, propertyName);
    if (dartProxy == null || !(o instanceof Object)) {
      dartProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, dartProxy);
    }
    return dartProxy;
  },
  JsObject: {
    "^": "Object;_jsObject",
    $index: ["super$JsObject$$index", function(_, property) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      return P._convertToDart(this._jsObject[property]);
    }],
    $indexSet: ["super$JsObject$$indexSet", function(_, property, value) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      this._jsObject[property] = P._convertToJS(value);
    }],
    get$hashCode: function(_) {
      return 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.JsObject && this._jsObject === other._jsObject;
    },
    deleteProperty$1: function(property) {
      delete this._jsObject[property];
    },
    toString$0: function(_) {
      var t1, exception;
      try {
        t1 = String(this._jsObject);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return this.super$Object$toString$0(this);
      }
    },
    callMethod$2: function(method, args) {
      var t1, t2;
      if (typeof method !== "string" && typeof method !== "number")
        throw H.wrapException(P.ArgumentError$("method is not a String or num"));
      t1 = this._jsObject;
      t2 = args == null ? null : P.List_List$from(J.map$1$ax(args, P._convertToJS$closure()), true, null);
      return P._convertToDart(t1[method].apply(t1, t2));
    },
    static: {JsObject_JsObject: function($constructor, $arguments) {
        var constr, args, factoryFunction;
        constr = P._convertToJS($constructor);
        if ($arguments == null)
          return P._wrapToDart(new constr());
        args = [null];
        C.JSArray_methods.addAll$1(args, H.setRuntimeTypeInfo(new H.MappedListIterable($arguments, P._convertToJS$closure()), [null, null]));
        factoryFunction = constr.bind.apply(constr, args);
        String(factoryFunction);
        return P._wrapToDart(new factoryFunction());
      }, JsObject_JsObject$jsify: function(object) {
        return P._wrapToDart(P.JsObject__convertDataTree(object));
      }, JsObject__convertDataTree: function(data) {
        return new P.JsObject__convertDataTree__convert(H.setRuntimeTypeInfo(new P._IdentityHashMap(0, null, null, null, null), [null, null])).call$1(data);
      }}
  },
  JsObject__convertDataTree__convert: {
    "^": "Closure:2;_captured__convertedObjects_0",
    call$1: [function(o) {
      var t1, t2, convertedMap, key, convertedList;
      t1 = this._captured__convertedObjects_0;
      if (t1.containsKey$1(o))
        return t1.$index(0, o);
      t2 = J.getInterceptor(o);
      if (!!t2.$isMap) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = J.get$iterator$ax(o.get$keys()); t1.moveNext$0();) {
          key = t1.get$current();
          convertedMap[key] = this.call$1(t2.$index(o, key));
        }
        return convertedMap;
      } else if (!!t2.$isIterable) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        C.JSArray_methods.addAll$1(convertedList, t2.map$1(o, this));
        return convertedList;
      } else
        return P._convertToJS(o);
    }, null, null, 2, 0, null, 37, "call"]
  },
  JsFunction: {
    "^": "JsObject;_jsObject",
    apply$2$thisArg: function(args, thisArg) {
      var t1, t2;
      t1 = P._convertToJS(thisArg);
      t2 = P.List_List$from(H.setRuntimeTypeInfo(new H.MappedListIterable(args, P._convertToJS$closure()), [null, null]), true, null);
      return P._convertToDart(this._jsObject.apply(t1, t2));
    },
    apply$1: function(args) {
      return this.apply$2$thisArg(args, null);
    }
  },
  JsArray: {
    "^": "JsObject_ListMixin;_jsObject",
    $index: function(_, index) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          t1 = index < 0 || index >= this.get$length(this);
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
      }
      return this.super$JsObject$$index(this, index);
    },
    $indexSet: function(_, index, value) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          t1 = index < 0 || index >= this.get$length(this);
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, this.get$length(this), null, null));
      }
      this.super$JsObject$$indexSet(this, index, value);
    },
    get$length: function(_) {
      var len = this._jsObject.length;
      if (typeof len === "number" && len >>> 0 === len)
        return len;
      throw H.wrapException(P.StateError$("Bad JsArray length"));
    },
    set$length: function(_, $length) {
      this.super$JsObject$$indexSet(this, "length", $length);
    },
    add$1: function(_, value) {
      this.callMethod$2("push", [value]);
    }
  },
  JsObject_ListMixin: {
    "^": "JsObject+ListMixin;",
    $isList: 1,
    $asList: null,
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: null
  },
  _convertToJS_closure: {
    "^": "Closure:2;",
    call$1: function(o) {
      var jsFunction = function(_call, f, captureThis) {
        return function() {
          return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunction, o, false);
      P._defineProperty(jsFunction, $.get$_DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    }
  },
  _convertToJS_closure0: {
    "^": "Closure:2;_captured_ctor_0",
    call$1: function(o) {
      return new this._captured_ctor_0(o);
    }
  },
  _wrapToDart_closure: {
    "^": "Closure:2;",
    call$1: function(o) {
      return new P.JsFunction(o);
    }
  },
  _wrapToDart_closure0: {
    "^": "Closure:2;",
    call$1: function(o) {
      return H.setRuntimeTypeInfo(new P.JsArray(o), [null]);
    }
  },
  _wrapToDart_closure1: {
    "^": "Closure:2;",
    call$1: function(o) {
      return new P.JsObject(o);
    }
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  _JenkinsSmiHash_combine0: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish0: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  max: function(a, b) {
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (isNaN(b))
        return b;
      return a;
    }
    if (b === 0 && C.JSInt_methods.get$isNegative(a))
      return b;
    return a;
  },
  _JSRandom: {
    "^": "Object;",
    nextInt$1: function(max) {
      if (max <= 0 || max > 4294967296)
        throw H.wrapException(P.RangeError$("max must be in range 0 < max \u2264 2^32, was " + max));
      return Math.random() * max >>> 0;
    }
  },
  Point0: {
    "^": "Object;x>,y>",
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!(other instanceof P.Point0))
        return false;
      t1 = this.x;
      t2 = other.x;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this.y;
        t2 = other.y;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.x);
      t2 = J.get$hashCode$(this.y);
      return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
    },
    $add: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this.y;
      t2 = t2.get$y(other);
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new P.Point0(t1 + t3, t4 + t2);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this.y;
      t2 = t2.get$y(other);
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new P.Point0(t1 - t3, t4 - t2);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $mul: function(_, factor) {
      var t1, t2;
      t1 = this.x;
      if (typeof t1 !== "number")
        return t1.$mul();
      t2 = this.y;
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 = new P.Point0(t1 * factor, t2 * factor);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    }
  },
  _RectangleBase: {
    "^": "Object;",
    get$right: function(_) {
      return this.get$left(this) + this.width;
    },
    get$bottom: function(_) {
      return this.get$top(this) + this.height;
    },
    toString$0: function(_) {
      return "Rectangle (" + this.get$left(this) + ", " + this.top + ") " + this.width + " x " + this.height;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      if (this.get$left(this) === t1.get$left(other)) {
        t2 = this.top;
        t1 = t2 === t1.get$top(other) && this.left + this.width === t1.get$right(other) && t2 + this.height === t1.get$bottom(other);
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = this.top;
      return P._JenkinsSmiHash_finish0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, this.get$left(this) & 0x1FFFFFFF), t1 & 0x1FFFFFFF), this.left + this.width & 0x1FFFFFFF), t1 + this.height & 0x1FFFFFFF));
    },
    get$topLeft: function(_) {
      var t1 = new P.Point0(this.get$left(this), this.top);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  Rectangle: {
    "^": "_RectangleBase;left>,top>,width>,height>",
    $asRectangle: null,
    static: {Rectangle$: function(left, $top, width, height, $T) {
        var t1 = width < 0 ? -width * 0 : width;
        return H.setRuntimeTypeInfo(new P.Rectangle(left, $top, t1, height < 0 ? -height * 0 : height), [$T]);
      }}
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  _checkLength: function($length) {
    if (typeof $length !== "number" || Math.floor($length) !== $length)
      throw H.wrapException(P.ArgumentError$("Invalid length " + H.S($length)));
    return $length;
  },
  _checkViewArguments: function(buffer, offsetInBytes, $length) {
    if (typeof offsetInBytes !== "number" || Math.floor(offsetInBytes) !== offsetInBytes)
      throw H.wrapException(P.ArgumentError$("Invalid view offsetInBytes " + H.S(offsetInBytes)));
    if ($length != null && (typeof $length !== "number" || Math.floor($length) !== $length))
      throw H.wrapException(P.ArgumentError$("Invalid view length " + H.S($length)));
  },
  _ensureNativeList: function(list) {
    var t1, t2, result, i, t3;
    t1 = J.getInterceptor(list);
    if (!!t1.$isJSIndexable)
      return list;
    t2 = t1.get$length(list);
    if (typeof t2 !== "number")
      return H.iae(t2);
    result = Array(t2);
    result.fixed$length = Array;
    t2 = result.length;
    i = 0;
    while (true) {
      t3 = t1.get$length(list);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(i < t3))
        break;
      t3 = t1.$index(list, i);
      if (i >= t2)
        return H.ioore(result, i);
      result[i] = t3;
      ++i;
    }
    return result;
  },
  NativeByteData_NativeByteData$view: function(buffer, offsetInBytes, $length) {
    H._checkViewArguments(buffer, offsetInBytes, $length);
    return new DataView(buffer, offsetInBytes);
  },
  NativeByteBuffer: {
    "^": "Interceptor;",
    get$runtimeType: function(receiver) {
      return C.Type_wAg;
    },
    asUint8List$2: function(receiver, offsetInBytes, $length) {
      H._checkViewArguments(receiver, offsetInBytes, $length);
      return $length == null ? new Uint8Array(receiver, offsetInBytes) : new Uint8Array(receiver, offsetInBytes, $length);
    },
    $isNativeByteBuffer: 1,
    $isByteBuffer: 1,
    "%": "ArrayBuffer"
  },
  NativeTypedData: {
    "^": "Interceptor;buffer=",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length)) {
        if (!!this.$isList)
          if ($length === receiver.length)
            throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
        throw H.wrapException(P.RangeError$range(index, 0, $length - 1, null, null));
      } else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    _checkIndex$2: function(receiver, index, $length) {
      if (index >>> 0 !== index || index >= $length)
        this._invalidIndex$2(receiver, index, $length);
    },
    _checkSublistArguments$3: function(receiver, start, end, $length) {
      var t1 = $length + 1;
      this._checkIndex$2(receiver, start, t1);
      if (end == null)
        return $length;
      this._checkIndex$2(receiver, end, t1);
      if (J.$gt$n(start, end))
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      return end;
    },
    $isNativeTypedData: 1,
    $isTypedData: 1,
    "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  NativeByteData: {
    "^": "NativeTypedData;",
    get$runtimeType: function(receiver) {
      return C.Type_oGP;
    },
    $isByteData: 1,
    $isTypedData: 1,
    "%": "DataView"
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var t1, count, sourceLength;
      t1 = receiver.length + 1;
      this._checkIndex$2(receiver, start, t1);
      this._checkIndex$2(receiver, end, t1);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (typeof skipCount !== "number")
        return skipCount.$lt();
      if (skipCount < 0)
        throw H.wrapException(P.ArgumentError$(skipCount));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: 1,
    $isJSIndexable: 1
  },
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    }
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [P.$double];
    }
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange$4(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [P.$int];
    }
  },
  NativeTypedArray_ListMixin0: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [P.$int];
    }
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  },
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    get$runtimeType: function(receiver) {
      return C.Type_Art;
    },
    sublist$2: function(receiver, start, end) {
      return new Float32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: 1,
    $isList: 1,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [P.$double];
    },
    "%": "Float32Array"
  },
  NativeFloat64List: {
    "^": "NativeTypedArrayOfDouble;",
    get$runtimeType: function(receiver) {
      return C.Type_ckn;
    },
    sublist$2: function(receiver, start, end) {
      return new Float64Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: 1,
    $isList: 1,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [P.$double];
    },
    "%": "Float64Array"
  },
  NativeInt16List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_UoK;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Int16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: 1,
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Int16Array"
  },
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_dTZ;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Int32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: 1,
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Int32Array"
  },
  NativeInt8List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_mp3;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Int8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: 1,
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Int8Array"
  },
  NativeUint16List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_CAk;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint16Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: 1,
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Uint16Array"
  },
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_irB;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: 1,
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "Uint32Array"
  },
  NativeUint8ClampedList: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_QuW;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8ClampedArray(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isTypedData: 1,
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [P.$int];
    },
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_6L0;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, this._checkSublistArguments$3(receiver, start, end, receiver.length)));
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    $isNativeUint8List: 1,
    $isUint8List: 1,
    $isTypedData: 1,
    $isList: 1,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [P.$int];
    },
    "%": ";Uint8Array"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log != "undefined") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["git.commands.clone", "package:hetimagit/src/git/commands/clone.dart", , R, {
  "^": "",
  Clone: {
    "^": "Object;_stopwatch,_clone$_cancel,_options",
    get$root: function(_) {
      return this._options.root;
    },
    _clone$0: function() {
      var t1, t2, t3, fetcher;
      t1 = this._options;
      t2 = t1.repoUrl;
      t3 = J.getInterceptor$asx(t2);
      if (t3.contains$1(t2, "@bitbucket.org") || t3.startsWith$1(t2, "https://bitbucket.org"))
        throw H.wrapException(O.GitException$("git.bitbucket_repo_not_supported", null, false));
      t2 = t1.store;
      t3 = t1.repoUrl;
      fetcher = new U.HttpFetcher(t2, "origin", t3, t1.username, t1.password, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null), P.LinkedHashMap_LinkedHashMap$_empty(null, null));
      t1 = J.replaceAll$2$s(t3, "?.*", "");
      H.checkString("");
      fetcher.url = H.stringReplaceAllUnchecked(t1, "/$", "");
      fetcher.urlOptions = fetcher._queryParams$1(t3);
      return fetcher.isValidRepoUrl$0().then$1(new R.Clone__clone_closure(this, fetcher));
    },
    startClone$1: function(fetcher) {
      var t1, t2, t3;
      t1 = this._options;
      t2 = t1.root;
      t3 = "startClone 001 " + H.S(t2) + " ";
      t1 = t1.store;
      P.print(t3 + H.Primitives_objectToString(t1));
      return this._checkDirectory$3(t2, t1, true).then$1(new R.Clone_startClone_closure(this, fetcher));
    },
    _cleanup$0: function() {
      var t1 = this._options.root;
      P.print("### listFiles " + H.S(t1));
      t1 = J.createReader$0$x(t1);
      return (t1 && C.DirectoryReader_methods).readEntries$0(t1).then$1(new R.Clone__cleanup_closure());
    },
    _createCurrentTreeFromPack$3: [function(dir, store, headSha) {
      return store.retrieveObject$2(headSha, "commit").then$1(new R.Clone__createCurrentTreeFromPack_closure(dir, store));
    }, "call$3", "get$_createCurrentTreeFromPack", 6, 0, 25, 38, 39, 40],
    _checkDirectory$3: function(dir, store, uninitializedOk) {
      var t1;
      P.print("_checkDirectory 001");
      P.print("### listFiles " + H.S(dir));
      t1 = J.createReader$0$x(dir);
      return (t1 && C.DirectoryReader_methods).readEntries$0(t1).then$1(new R.Clone__checkDirectory_closure(store, uninitializedOk));
    },
    _createInitialConfig$2: function(shallow, localHeadRef) {
      var t1, t2, config, configStr;
      t1 = this._options;
      t2 = t1.store;
      config = t2.config;
      J.set$url$x(config, t1.repoUrl);
      config.set$time(new P.DateTime(Date.now(), false));
      t1.depth;
      if (shallow != null)
        config.set$shallow(shallow);
      if (localHeadRef != null)
        J.$indexSet$ax(config.get$remoteHeads(), J.get$name$x(localHeadRef), localHeadRef.get$sha());
      configStr = t2.config.toJson$0();
      return B.FileOps_createFileWithContent(t2._rootDir, ".git/config.json", configStr, "Text");
    },
    _processClone$3: [function(gitDir, localHeadRef, fetcher) {
      return this._createHeadAndRef$2(gitDir, localHeadRef).then$1(new R.Clone__processClone_closure(this, localHeadRef, fetcher));
    }, "call$3", "get$_processClone", 6, 0, 26, 41, 42, 43],
    _createHeadAndRef$2: function(gitDir, localHeadRef) {
      return B.FileOps_createFileWithContent(gitDir, "HEAD", "ref: " + H.S(J.get$name$x(localHeadRef)) + "\n", "Text").then$1(new R.Clone__createHeadAndRef_closure(gitDir, localHeadRef));
    },
    _callMethod$3: function(func, args, message) {
      var t1 = H.Primitives_applyFunctionWithPositionalArguments(func, args);
      return t1.then$1(new R.Clone__callMethod_closure(this, message));
    },
    _callMethod$2: function(func, args) {
      return this._callMethod$3(func, args, null);
    }
  },
  Clone__clone_closure: {
    "^": "Closure:2;_clone$_captured_this_0,_captured_fetcher_1",
    call$1: [function(isValid) {
      var t1, t2;
      if (isValid === true) {
        t1 = this._clone$_captured_this_0;
        return t1.startClone$1(this._captured_fetcher_1).catchError$1(new R.Clone__clone__closure(t1));
      } else {
        t1 = this._clone$_captured_this_0;
        t2 = t1._options;
        if (!J.endsWith$1$s(t2.repoUrl, ".git")) {
          t2.repoUrl = J.$add$ns(t2.repoUrl, ".git");
          return t1._clone$0();
        } else
          throw H.wrapException(O.GitException$("git.invalid_repo_url", null, false));
      }
    }, null, null, 2, 0, null, 44, "call"]
  },
  Clone__clone__closure: {
    "^": "Closure:2;_clone$_captured_this_2",
    call$1: [function(e) {
      return this._clone$_captured_this_2._cleanup$0().whenComplete$1(new R.Clone__clone___closure(e));
    }, null, null, 2, 0, null, 3, "call"]
  },
  Clone__clone___closure: {
    "^": "Closure:0;_clone$_captured_e_3",
    call$0: [function() {
      return H.throwExpression(this._clone$_captured_e_3);
    }, null, null, 0, 0, null, "call"]
  },
  Clone_startClone_closure: {
    "^": "Closure:2;_clone$_captured_this_1,_captured_fetcher_2",
    call$1: [function(_) {
      var t1;
      P.print("startClone 002");
      t1 = this._clone$_captured_this_1;
      return J.createDirectory$1$x(t1._options.root, ".git").then$1(new R.Clone_startClone__closure(t1, this._captured_fetcher_2));
    }, null, null, 2, 0, null, 26, "call"]
  },
  Clone_startClone__closure: {
    "^": "Closure:27;_clone$_captured_this_3,_captured_fetcher_4",
    call$1: [function(gitDir) {
      var t1, t2;
      P.print("startClone 003");
      t1 = this._clone$_captured_this_3;
      t2 = this._captured_fetcher_4;
      return t1._callMethod$2(t2.get$fetchUploadRefs(), []).then$1(new R.Clone_startClone___closure(t1, t2, gitDir)).whenComplete$1(new R.Clone_startClone___closure0(t1));
    }, null, null, 2, 0, null, 41, "call"]
  },
  Clone_startClone___closure: {
    "^": "Closure:28;_clone$_captured_this_5,_captured_fetcher_6,_clone$_captured_gitDir_7",
    call$1: [function(refs) {
      var t1, t2;
      t1 = {};
      P.print("startClone 004");
      t2 = this._clone$_captured_this_5;
      $.get$logger().info$1(t2._stopwatch.finishCurrentTask$1("fetchUploadRefs"));
      if (J.get$isEmpty$asx(refs) === true)
        return t2._createInitialConfig$2(null, null);
      t1._captured_remoteHeadRef_0 = null;
      t1._captured_localHeadRef_1 = null;
      t1._captured_remoteHead_2 = null;
      return t2._callMethod$2(t2._options.store.get$writeRemoteRefs(), [refs]).then$1(new R.Clone_startClone____closure(t1, t2, this._captured_fetcher_6, this._clone$_captured_gitDir_7, refs));
    }, null, null, 2, 0, null, 45, "call"]
  },
  Clone_startClone____closure: {
    "^": "Closure:2;_clone$_box_0,_clone$_captured_this_8,_captured_fetcher_9,_captured_gitDir_10,_captured_refs_11",
    call$1: [function(_) {
      var t1, t2;
      P.print("startClone 005");
      t1 = this._clone$_box_0;
      t2 = this._clone$_captured_this_8;
      J.forEach$1$ax(this._captured_refs_11, new R.Clone_startClone_____closure(t1, t2));
      if (t1._captured_localHeadRef_1 == null)
        if (t2._options.branchName == null)
          return;
        else
          t1._captured_localHeadRef_1 = t1._captured_remoteHeadRef_0;
      $.get$logger().info$1(t2._stopwatch.finishCurrentTask$1("_writeRefs"));
      return t2._callMethod$2(t2.get$_processClone(), [this._captured_gitDir_10, t1._captured_localHeadRef_1, this._captured_fetcher_9]);
    }, null, null, 2, 0, null, 26, "call"]
  },
  Clone_startClone_____closure: {
    "^": "Closure:29;_clone$_box_0,_captured_this_12",
    call$1: [function(ref) {
      var t1 = J.getInterceptor$x(ref);
      if (J.$eq(t1.get$name(ref), "HEAD"))
        this._clone$_box_0._captured_remoteHead_2 = ref.get$sha();
      else if (J.$eq(t1.get$name(ref), C.JSString_methods.$add("refs/heads/", this._captured_this_12._options.branchName)))
        this._clone$_box_0._captured_localHeadRef_1 = ref;
      else if (J.indexOf$1$asx(t1.get$name(ref), "refs/heads/") === 0) {
        t1 = this._clone$_box_0;
        if (J.$eq(ref.get$sha(), t1._captured_remoteHead_2))
          t1._captured_remoteHeadRef_0 = ref;
      }
    }, null, null, 2, 0, null, 46, "call"]
  },
  Clone_startClone___closure0: {
    "^": "Closure:0;_captured_this_13",
    call$0: [function() {
      var t1, t2, t3, t4, t5, t6, output;
      P.print("startClone 006");
      t1 = $.get$logger();
      t2 = this._captured_this_13._stopwatch;
      t3 = t2._utils0$_stopwatch;
      t3.stop$0(0);
      t4 = t2.name + " total: ";
      t5 = $.get$_nf();
      t6 = t2._previousTaskTime;
      t3 = J.$tdiv$n(J.$mul$ns(t3.get$elapsedTicks(), 1000), $.Stopwatch__frequency);
      if (typeof t3 !== "number")
        return H.iae(t3);
      output = t4 + t5.format$1(0, t6 + t3) + "ms";
      if (t2.printToStdout)
        P.print(output);
      t1.info$1(output);
    }, null, null, 0, 0, null, "call"]
  },
  Clone__cleanup_closure: {
    "^": "Closure:2;",
    call$1: [function(entries) {
      return P.Future_forEach(entries, new R.Clone__cleanup__closure());
    }, null, null, 2, 0, null, 47, "call"]
  },
  Clone__cleanup__closure: {
    "^": "Closure:30;",
    call$1: function(entry) {
      var t1 = J.getInterceptor$x(entry);
      if (t1.get$isDirectory(entry) === true)
        return t1.removeRecursively$0(H.interceptedTypeCast(entry, "$isDirectoryEntry"));
      else
        return t1.remove$0(entry);
    }
  },
  Clone__createCurrentTreeFromPack_closure: {
    "^": "Closure:2;_captured_dir_0,_captured_store_1",
    call$1: [function(commit) {
      return V.ObjectUtils_expandTree(this._captured_dir_0, this._captured_store_1, commit.get$treeSha());
    }, null, null, 2, 0, null, 48, "call"]
  },
  Clone__checkDirectory_closure: {
    "^": "Closure:31;_captured_store_0,_captured_uninitializedOk_1",
    call$1: [function(entries) {
      var t1, t2;
      P.print("_checkDirectory 002");
      t1 = J.getInterceptor$asx(entries);
      if (J.$eq(t1.get$length(entries), 0) && this._captured_uninitializedOk_1) {
        P.print("_checkDirectory 003");
        return;
      } else if (J.$eq(t1.get$length(entries), 0)) {
        P.print("_checkDirectory 004");
        throw H.wrapException(O.GitException$("git.clone_dir_not_initialized", null, false));
      } else if (!J.$eq(t1.get$length(entries), 1) || J.get$isFile$x(t1.get$first(entries)) === true || !J.$eq(J.get$name$x(t1.get$first(entries)), ".git")) {
        P.print("_checkDirectory 005");
        throw H.wrapException(O.GitException$("git.clone_dir_not_empty", null, false));
      } else {
        P.print("_checkDirectory 006");
        t1 = this._captured_store_0;
        t2 = t1.objectDir;
        P.print("### listFiles " + H.S(t2));
        t2 = J.createReader$0$x(t2);
        return (t2 && C.DirectoryReader_methods).readEntries$0(t2).then$1(new R.Clone__checkDirectory__closure(t1));
      }
    }, null, null, 2, 0, null, 47, "call"]
  },
  Clone__checkDirectory__closure: {
    "^": "Closure:31;_captured_store_2",
    call$1: [function(entries) {
      var t1;
      P.print("_checkDirectory 007");
      t1 = J.getInterceptor$asx(entries);
      if (J.$gt$n(t1.get$length(entries), 1)) {
        P.print("_checkDirectory 008");
        throw H.wrapException(O.GitException$("git.clone_dir_in_use", null, false));
      } else if (J.$eq(t1.get$length(entries), 1)) {
        P.print("_checkDirectory 009");
        if (J.$eq(J.get$name$x(t1.get$first(entries)), "pack"))
          return J.getDirectory$1$x(this._captured_store_2.objectDir, "pack").then$1(new R.Clone__checkDirectory___closure());
      }
    }, null, null, 2, 0, null, 47, "call"]
  },
  Clone__checkDirectory___closure: {
    "^": "Closure:2;",
    call$1: [function(packDir) {
      var t1;
      P.print("### listFiles " + H.S(packDir));
      t1 = J.createReader$0$x(packDir);
      return (t1 && C.DirectoryReader_methods).readEntries$0(t1).then$1(new R.Clone__checkDirectory____closure());
    }, null, null, 2, 0, null, 49, "call"]
  },
  Clone__checkDirectory____closure: {
    "^": "Closure:2;",
    call$1: [function(entries) {
      if (J.$gt$n(J.get$length$asx(entries), 0))
        throw H.wrapException(O.GitException$("git.clone_dir_in_use", null, false));
      else
        return;
    }, null, null, 2, 0, null, 47, "call"]
  },
  Clone__processClone_closure: {
    "^": "Closure:2;_clone$_captured_this_0,_captured_localHeadRef_1,_captured_fetcher_2",
    call$1: [function(_) {
      var t1, t2;
      t1 = this._clone$_captured_this_0;
      t2 = this._captured_localHeadRef_1;
      return t1._callMethod$3(this._captured_fetcher_2.get$fetchRef(), [[t2.get$sha()], null, null, t1._options.depth, null, V.nopFunction$closure(), V.nopFunction$closure(), t1._clone$_cancel], "create HEAD").then$1(new R.Clone__processClone__closure(t1, t2));
    }, null, null, 2, 0, null, 26, "call"]
  },
  Clone__processClone__closure: {
    "^": "Closure:32;_clone$_captured_this_3,_captured_localHeadRef_4",
    call$1: [function(result) {
      var t1 = this._clone$_captured_this_3;
      return t1._callMethod$3(R.Pack_createPackFiles$closure(), [t1._options.store, result], "createPackFiles").then$1(new R.Clone__processClone___closure(t1, this._captured_localHeadRef_4, result));
    }, null, null, 2, 0, null, 50, "call"]
  },
  Clone__processClone___closure: {
    "^": "Closure:2;_clone$_captured_this_5,_captured_localHeadRef_6,_captured_result_7",
    call$1: [function(_) {
      var t1, t2, t3;
      t1 = this._clone$_captured_this_5;
      t2 = t1._options;
      t3 = this._captured_localHeadRef_6;
      return t1._callMethod$3(t1.get$_createCurrentTreeFromPack(), [t2.root, t2.store, t3.get$sha()], "createCurrentTreeFromPack").then$1(new R.Clone__processClone____closure(t1, t3, this._captured_result_7));
    }, null, null, 2, 0, null, 26, "call"]
  },
  Clone__processClone____closure: {
    "^": "Closure:2;_clone$_captured_this_8,_captured_localHeadRef_9,_clone$_captured_result_10",
    call$1: [function(_) {
      return this._clone$_captured_this_8._createInitialConfig$2(this._clone$_captured_result_10.get$shallow(), this._captured_localHeadRef_9).then$1(new R.Clone__processClone_____closure());
    }, null, null, 2, 0, null, 26, "call"]
  },
  Clone__processClone_____closure: {
    "^": "Closure:2;",
    call$1: [function(_) {
    }, null, null, 2, 0, null, 26, "call"]
  },
  Clone__createHeadAndRef_closure: {
    "^": "Closure:2;_captured_gitDir_0,_captured_localHeadRef_1",
    call$1: [function(_) {
      var t1 = this._captured_localHeadRef_1;
      return B.FileOps_createFileWithContent(this._captured_gitDir_0, J.get$name$x(t1), t1.get$sha(), "Text");
    }, null, null, 2, 0, null, 26, "call"]
  },
  Clone__callMethod_closure: {
    "^": "Closure:2;_clone$_captured_this_0,_captured_message_1",
    call$1: [function(result) {
      var t1, t2;
      t1 = this._clone$_captured_this_0;
      t1._clone$_cancel.check$0();
      t2 = this._captured_message_1;
      if (t2 != null)
        $.get$logger().info$1(t1._stopwatch.finishCurrentTask$1(t2));
      return result;
    }, null, null, 2, 0, null, 50, "call"]
  },
  CloneCancel: {
    "^": "Cancel;_utils1$_cancel,_errorCode,canIgnore",
    performCancel$0: function() {
      throw H.wrapException(O.GitException$("git.clone_cancel", null, false));
    }
  }
}],
["git.commands.index", "package:hetimagit/src/git/commands/index.dart", , M, {
  "^": "",
  Index: {
    "^": "Object;_store,_statusIdx,_indexDirty,_writingIndex,_writeIndexTimer,_writeIndexCompleter,_flushing",
    createIndexForEntry$1: function($status) {
      var t1, oldStatus;
      t1 = $status.path;
      if (this._statusIdx.containsKey$1(t1))
        this._statusIdx.remove$1(0, t1);
      $status.type = "COMMITTED";
      oldStatus = this._statusIdx.$index(0, $status.path);
      if (oldStatus != null) {
        $status.headSha = oldStatus.headSha;
        if (!$status.compareTo$1(0, oldStatus)) {
          t1 = oldStatus.type;
          switch (t1) {
            case "COMMITTED":
              $status.type = "MODIFIED";
              break;
            case "STAGED":
              if (!J.$eq($status.headSha, $status.sha))
                $status.type = "STAGED";
              else
                $status.type = "COMMITTED";
              break;
            case "MODIFIED":
              if (!J.$eq($status.headSha, $status.sha))
                $status.type = "MODIFIED";
              else
                $status.type = "COMMITTED";
              break;
            case "UNTRACKED":
              H.throwExpression(O.GitException$("git.file_status_type_unknown", "Unknown file status type: " + H.S(t1), false));
            default:
              H.throwExpression(O.GitException$("git.file_status_type_unknown", "Unknown file status type: " + H.S(t1), false));
          }
        } else
          $status.type = oldStatus.type;
      }
      this._statusIdx.$indexSet(0, $status.path, $status);
      this._scheduleWriteIndex$0();
    },
    _writeIndex$0: function() {
      this._writingIndex = true;
      this._writeIndexCompleter = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      var out = C.JsonCodec_null_null.encode$1(this.statusIdxToMap$0());
      return J.getDirectory$1$x(this._store._rootDir, ".git/").then$1(new M.Index__writeIndex_closure(this, out));
    },
    _scheduleWriteIndex$0: function() {
      this._indexDirty = true;
      if (this._writingIndex)
        return;
      var t1 = this._writeIndexTimer;
      if (t1 != null) {
        t1.cancel$0();
        this._writeIndexTimer = null;
      }
      this._writeIndexTimer = P.Timer_Timer(C.Duration_2000000, new M.Index__scheduleWriteIndex_closure(this));
    },
    statusIdxToMap$0: function() {
      var m = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      this._statusIdx.forEach$1(0, new M.Index_statusIdxToMap_closure(m));
      return m;
    }
  },
  Index__writeIndex_closure: {
    "^": "Closure:27;_index0$_captured_this_0,_captured_out_1",
    call$1: [function(entry) {
      return B.FileOps_createFileWithContent(entry, "index2", this._captured_out_1, "Text").then$1(new M.Index__writeIndex__closure(this._index0$_captured_this_0));
    }, null, null, 2, 0, null, 51, "call"]
  },
  Index__writeIndex__closure: {
    "^": "Closure:2;_index0$_captured_this_2",
    call$1: [function(_) {
      var t1, completer;
      t1 = this._index0$_captured_this_2;
      completer = t1._writeIndexCompleter;
      t1._writeIndexCompleter = null;
      t1._writingIndex = false;
      completer.complete$0(0);
    }, null, null, 2, 0, null, 26, "call"]
  },
  Index__scheduleWriteIndex_closure: {
    "^": "Closure:0;_index0$_captured_this_0",
    call$0: function() {
      var t1 = this._index0$_captured_this_0;
      t1._writeIndexTimer = null;
      t1._indexDirty = false;
      t1._writeIndex$0().then$1(new M.Index__scheduleWriteIndex__closure(t1));
    }
  },
  Index__scheduleWriteIndex__closure: {
    "^": "Closure:2;_index0$_captured_this_1",
    call$1: [function(_) {
      var t1 = this._index0$_captured_this_1;
      if (t1._indexDirty && !t1._flushing)
        t1._scheduleWriteIndex$0();
    }, null, null, 2, 0, null, 26, "call"]
  },
  Index_statusIdxToMap_closure: {
    "^": "Closure:33;_captured_m_0",
    call$2: function(key, $status) {
      this._captured_m_0.$indexSet(0, key, $status.toMap$0());
    }
  },
  FileStatus: {
    "^": "Object;path>,headSha,permission<,sha<,size>,deleted,modificationTime>,type*",
    compareTo$1: function(_, $status) {
      var t1 = J.getInterceptor$x($status);
      return J.$eq(t1.get$path($status), this.path) && J.$eq($status.get$sha(), this.sha) && J.$eq(t1.get$size($status), this.size);
    },
    toMap$0: function() {
      return P.LinkedHashMap_LinkedHashMap$_literal(["path", this.path, "headSha", this.headSha, "sha", this.sha, "size", this.size, "modificationTime", this.modificationTime, "permission", this.permission, "type", this.type, "deleted", this.deleted], null, null);
    },
    toString$0: function(_) {
      return "[" + H.S(this.path) + " " + H.S(this.type) + "]";
    },
    FileStatus$0: function() {
      this.type = "UNTRACKED";
      this.permission = $.Permissions_FILE_NON_EXECUTABLE;
    },
    static: {FileStatus$: function() {
        var t1 = new M.FileStatus(null, null, null, null, null, false, null, null);
        t1.FileStatus$0();
        return t1;
      }}
  }
}],
["git.commands.utils", "utils.dart", , G, {
  "^": "",
  GitLocation: {
    "^": "Object;_utils$_name,entry",
    get$name: function(_) {
      return this._utils$_name;
    },
    init$0: function() {
      P.print("#### GitLocation#init");
      return N.getLocalDataDir("git").then$1(new G.GitLocation_init_closure(this)).catchError$1(new G.GitLocation_init_closure0());
    },
    _safeDelete$1: function(dir) {
      return J.removeRecursively$0$x(dir).catchError$1(new G.GitLocation__safeDelete_closure());
    }
  },
  GitLocation_init_closure: {
    "^": "Closure:27;_utils$_captured_this_0",
    call$1: [function(gitDir) {
      var t1, t2;
      t1 = this._utils$_captured_this_0;
      t2 = J.getInterceptor$x(gitDir);
      P.print("#### GitLocation 001 " + t1._utils$_name + " " + H.S(t2.get$fullPath(gitDir)));
      return t2.getDirectory$1(gitDir, t1._utils$_name).then$1(new G.GitLocation_init__closure(t1, gitDir)).catchError$1(new G.GitLocation_init__closure0(t1, gitDir));
    }, null, null, 2, 0, null, 41, "call"]
  },
  GitLocation_init__closure: {
    "^": "Closure:2;_utils$_captured_this_1,_captured_gitDir_2",
    call$1: [function(dir) {
      var t1;
      P.print("#### GitLocation 002 " + H.S(J.get$fullPath$x(dir)));
      t1 = this._utils$_captured_this_1;
      return t1._safeDelete$1(dir).then$1(new G.GitLocation_init___closure0(t1, this._captured_gitDir_2));
    }, null, null, 2, 0, null, 38, "call"]
  },
  GitLocation_init___closure0: {
    "^": "Closure:2;_captured_this_3,_captured_gitDir_4",
    call$1: [function(_) {
      var t1;
      P.print("#### GitLocation 003 " + H.S(_));
      t1 = this._captured_this_3;
      return J.createDirectory$1$x(this._captured_gitDir_4, t1._utils$_name).then$1(new G.GitLocation_init____closure(t1));
    }, null, null, 2, 0, null, 26, "call"]
  },
  GitLocation_init____closure: {
    "^": "Closure:2;_captured_this_5",
    call$1: [function(d) {
      P.print("#### createdDirectory " + H.S(d));
      this._captured_this_5.entry = d;
    }, null, null, 2, 0, null, 52, "call"]
  },
  GitLocation_init__closure0: {
    "^": "Closure:2;_captured_this_6,_captured_gitDir_7",
    call$1: [function(e) {
      var t1;
      P.print("#### createdDirectory ERROR " + H.S(e));
      t1 = this._captured_this_6;
      return J.createDirectory$1$x(this._captured_gitDir_7, t1._utils$_name).then$1(new G.GitLocation_init___closure(t1));
    }, null, null, 2, 0, null, 3, "call"]
  },
  GitLocation_init___closure: {
    "^": "Closure:2;_captured_this_8",
    call$1: [function(d) {
      P.print("#### createdDirectory ERROR [2] " + H.S(d));
      this._captured_this_8.entry = d;
    }, null, null, 2, 0, null, 52, "call"]
  },
  GitLocation_init_closure0: {
    "^": "Closure:34;",
    call$1: [function(e) {
      P.print("###" + H.S(e) + " " + H.S(J.get$message$x(e)));
    }, null, null, 2, 0, null, 3, "call"]
  },
  GitLocation__safeDelete_closure: {
    "^": "Closure:2;",
    call$1: [function(e) {
      return;
    }, null, null, 2, 0, null, 3, "call"]
  }
}],
["git.config", "package:hetimagit/src/git/config.dart", , O, {
  "^": "",
  Config: {
    "^": "Object;url',shallow@,remoteHeads<,time?",
    toMap$0: function() {
      return P.LinkedHashMap_LinkedHashMap$_literal(["url", this.url, "shallow", this.shallow, "remoteHeads", this.remoteHeads, "time", this.time.millisecondsSinceEpoch], null, null);
    },
    toJson$0: function() {
      return C.JsonCodec_null_null.encode$1(this.toMap$0());
    }
  }
}],
["git.exception", "package:hetimagit/src/git/exception.dart", , O, {
  "^": "",
  GitException: {
    "^": "Object;errorCode,message>,canIgnore",
    toString$0: function(_) {
      var t1, t2;
      t1 = this.message;
      t2 = this.errorCode;
      return t1 == null ? "GitException: " + t2 : "GitException: " + H.S(t1) + " (" + t2 + ")";
    },
    static: {GitException$: function(errorCode, message, canIgnore) {
        return new O.GitException(errorCode, message, canIgnore);
      }}
  }
}],
["git.fast_sha", "package:hetimagit/src/git/fast_sha.dart", , Z, {
  "^": "",
  FastSha: {
    "^": "Object;_currentChunk,_w,_lengthInBytes,_pendingData,_h0,_h1,_h2,_h3,_h4,_digestCalled,_cvtBytes",
    add$1: function(_, data) {
      var t1, t2;
      if (this._digestCalled)
        throw H.wrapException(P.StateError$("Hash update method called after digest was retrieved"));
      t1 = this._lengthInBytes;
      t2 = J.get$length$asx(data);
      if (typeof t2 !== "number")
        return H.iae(t2);
      this._lengthInBytes = t1 + t2;
      C.JSArray_methods.addAll$1(this._pendingData, data);
      this._iterate$0();
    },
    close$0: function(_) {
      if (this._digestCalled)
        return this._resultAsBytes$0();
      this._digestCalled = true;
      this._finalizeData$0();
      this._iterate$0();
      return this._resultAsBytes$0();
    },
    _updateHash$0: function() {
      var a, b, c, d, e, t1, t2, i, n, t, c0, a0;
      a = (this._h0 & 4294967295) >>> 0;
      b = (this._h1 & 4294967295) >>> 0;
      c = (this._h2 & 4294967295) >>> 0;
      d = (this._h3 & 4294967295) >>> 0;
      e = (this._h4 & 4294967295) >>> 0;
      for (t1 = this._w, t2 = this._currentChunk, i = 0; i < 80; ++i, e = d, d = c, c = c0, b = a, a = a0) {
        if (i < 16)
          t1[i] = t2[i];
        else {
          n = t1[i - 3] ^ t1[i - 8] ^ t1[i - 14] ^ t1[i - 16];
          t1[i] = (n << 1 & 4294967295 | (n & 4294967295) >>> 31) >>> 0;
        }
        t = this._add32$2(this._add32$2((a << 5 & 4294967295 | (a & 4294967295) >>> 27) >>> 0, e), t1[i]);
        if (i < 20)
          t = this._add32$2(this._add32$2(t, (b & c | ~b & d) >>> 0), 1518500249);
        else if (i < 40)
          t = this._add32$2(this._add32$2(t, (b ^ c ^ d) >>> 0), 1859775393);
        else
          t = i < 60 ? this._add32$2(this._add32$2(t, (b & c | b & d | c & d) >>> 0), 2400959708) : this._add32$2(this._add32$2(t, (b ^ c ^ d) >>> 0), 3395469782);
        c0 = (b << 30 & 4294967295 | (b & 4294967295) >>> 2) >>> 0;
        a0 = (t & 4294967295) >>> 0;
      }
      this._h0 = (this._add32$2(a, this._h0) & 4294967295) >>> 0;
      this._h1 = (this._add32$2(b, this._h1) & 4294967295) >>> 0;
      this._h2 = (this._add32$2(c, this._h2) & 4294967295) >>> 0;
      this._h3 = (this._add32$2(d, this._h3) & 4294967295) >>> 0;
      this._h4 = (this._add32$2(e, this._h4) & 4294967295) >>> 0;
    },
    _add32$2: function(x, y) {
      var lsw = (x & 65535) + (y & 65535);
      return ((x >>> 16) + (y >>> 16) + (lsw >>> 16) << 16 | lsw & 65535) >>> 0;
    },
    _resultAsBytes$0: function() {
      var result = [];
      C.JSArray_methods.addAll$1(result, this._wordToBytes$1(this._h0));
      C.JSArray_methods.addAll$1(result, this._wordToBytes$1(this._h1));
      C.JSArray_methods.addAll$1(result, this._wordToBytes$1(this._h2));
      C.JSArray_methods.addAll$1(result, this._wordToBytes$1(this._h3));
      C.JSArray_methods.addAll$1(result, this._wordToBytes$1(this._h4));
      return result;
    },
    _bytesToChunk$1: function(dataIndex) {
      var t1, wordIndex, t2, t3, w3, t4, w2, w1, w0;
      for (t1 = this._currentChunk, wordIndex = 0; wordIndex < 16; ++wordIndex) {
        t2 = this._pendingData;
        t3 = t2.length;
        if (dataIndex >= t3)
          return H.ioore(t2, dataIndex);
        w3 = t2[dataIndex];
        t4 = dataIndex + 1;
        if (t4 >= t3)
          return H.ioore(t2, t4);
        w2 = t2[t4];
        t4 = dataIndex + 2;
        if (t4 >= t3)
          return H.ioore(t2, t4);
        w1 = t2[t4];
        t4 = dataIndex + 3;
        if (t4 >= t3)
          return H.ioore(t2, t4);
        w0 = t2[t4];
        dataIndex += 4;
        t1[wordIndex] = ((J.$and$n(w3, 255) << 24 | J.$and$n(w2, 255) << 16 | J.$and$n(w1, 255) << 8 | J.$and$n(w0, 255)) & 4294967295) >>> 0;
      }
    },
    _wordToBytes$1: function(word) {
      var t1 = this._cvtBytes;
      t1[0] = word >>> 24 & 255;
      t1[1] = word >>> 16 & 255;
      t1[2] = word >>> 8 & 255;
      t1[3] = word & 255;
      return t1;
    },
    _iterate$0: function() {
      var len, index, t1;
      len = this._pendingData.length;
      if (len >= 64) {
        for (index = 0; t1 = len - index, t1 >= 64; index += 64) {
          this._bytesToChunk$1(index);
          this._updateHash$0();
        }
        if (t1 > 0)
          this._pendingData = C.JSArray_methods.sublist$2(this._pendingData, index, len);
        else
          this._pendingData = [];
      }
    },
    _finalizeData$0: function() {
      var contentsLength, zeroPadding, i, t1;
      this._pendingData.push(128);
      contentsLength = this._lengthInBytes + 9;
      zeroPadding = ((contentsLength + 64 - 1 & -64) >>> 0) - contentsLength;
      for (i = 0; i < zeroPadding; ++i)
        this._pendingData.push(0);
      t1 = this._lengthInBytes;
      C.JSArray_methods.addAll$1(this._pendingData, this._wordToBytes$1(0));
      C.JSArray_methods.addAll$1(this._pendingData, this._wordToBytes$1((t1 * 8 & 4294967295) >>> 0));
    },
    FastSha$0: function() {
      this._h0 = 1732584193;
      this._h1 = 4023233417;
      this._h2 = 2562383102;
      this._h3 = 271733878;
      this._h4 = 3285377520;
    },
    static: {FastSha$: function() {
        var t1 = new Z.FastSha(new Uint32Array(H._checkLength(16)), new Uint32Array(H._checkLength(80)), 0, [], null, null, null, null, null, false, new Uint8Array(H._checkLength(4)));
        t1.FastSha$0();
        return t1;
      }}
  }
}],
["git.file_operations", "package:hetimagit/src/git/file_operations.dart", , B, {
  "^": "",
  FileOps_createDirectoryRecursive: function(dir, path) {
    var t1, t2, t3, pathParts;
    t1 = {};
    t2 = path.length;
    t3 = t2 - 1;
    if (t3 < 0)
      return H.ioore(path, t3);
    pathParts = (path[t3] === "/" ? C.JSString_methods.substring$2(path, 0, t3) : path).split("/");
    t1._captured_i_0 = 0;
    return new B.FileOps_createDirectoryRecursive_createDirectories(t1, pathParts).call$1(dir);
  },
  FileOps_createFileWithContent: function(root, path, $content, type) {
    var t1, pathParts;
    t1 = J.getInterceptor$asx(path);
    if (J.$eq(t1.$index(path, 0), "/"))
      path = t1.substring$1(path, 1);
    t1 = J.getInterceptor$s(path);
    pathParts = t1.split$1(path, "/");
    if (pathParts.length !== 1)
      return B.FileOps_createDirectoryRecursive(root, t1.substring$2(path, 0, t1.lastIndexOf$1(path, "/"))).then$1(new B.FileOps_createFileWithContent_closure($content, type, pathParts));
    else
      return B.FileOps__createFile(root, path, $content, type);
  },
  FileOps_readBlob: function(blob, type) {
    var completer, reader, t1;
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
    reader = P.JsObject_JsObject(J.$index$asx($.get$context(), "FileReader"), null);
    t1 = J.getInterceptor$ax(reader);
    t1.$indexSet(reader, "onload", new B.FileOps_readBlob_closure(completer, reader));
    t1.$indexSet(reader, "onerror", new B.FileOps_readBlob_closure0(completer));
    reader.callMethod$2("readAs" + type, [blob]);
    return completer.future;
  },
  FileOps__createFile: function(dir, fileName, $content, type) {
    var t1 = {};
    t1._captured_content_0 = $content;
    if (type !== "Text" && type !== "blob")
      return P.Future_Future$error(new P.UnsupportedError("Writing of content type " + type + " is not supported."), null, null);
    return J.createFile$1$x(dir, fileName).then$1(new B.FileOps__createFile_closure(t1, type));
  },
  FileOps__writeBlob: function(entry, blob) {
    var completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
    J.createWriter$0$x(entry).then$1(new B.FileOps__writeBlob_closure(blob, completer));
    return completer.future;
  },
  FileOps_createDirectoryRecursive_createDirectories: {
    "^": "Closure:27;_file_operations$_box_0,_captured_pathParts_1",
    call$1: function(dir) {
      var t1, t2, t3;
      t1 = this._captured_pathParts_1;
      t2 = this._file_operations$_box_0;
      t3 = t2._captured_i_0;
      if (t3 >= t1.length)
        return H.ioore(t1, t3);
      return J.createDirectory$1$x(dir, t1[t3]).then$1(new B.FileOps_createDirectoryRecursive_createDirectories_closure(t2, t1, this));
    }
  },
  FileOps_createDirectoryRecursive_createDirectories_closure: {
    "^": "Closure:27;_file_operations$_box_0,_captured_pathParts_2,_captured_createDirectories_3",
    call$1: [function(dir) {
      if (++this._file_operations$_box_0._captured_i_0 === this._captured_pathParts_2.length)
        return dir;
      return this._captured_createDirectories_3.call$1(dir);
    }, null, null, 2, 0, null, 38, "call"]
  },
  FileOps_createFileWithContent_closure: {
    "^": "Closure:2;_captured_content_0,_captured_type_1,_captured_pathParts_2",
    call$1: [function(dir) {
      var t1, t2, t3;
      t1 = this._captured_pathParts_2;
      t2 = t1.length;
      t3 = t2 - 1;
      if (t3 < 0)
        return H.ioore(t1, t3);
      return B.FileOps__createFile(dir, t1[t3], this._captured_content_0, this._captured_type_1);
    }, null, null, 2, 0, null, 38, "call"]
  },
  FileOps_readBlob_closure: {
    "^": "Closure:2;_file_operations$_captured_completer_0,_file_operations$_captured_reader_1",
    call$1: [function($event) {
      var result, t1;
      result = J.$index$asx(this._file_operations$_captured_reader_1, "result");
      t1 = J.getInterceptor(result);
      if (!!t1.$isJsObject)
        result = new Uint8Array(H._ensureNativeList(new Z.ArrayBuffer(result).getBytes$0()));
      else if (!!t1.$isByteBuffer)
        result = t1.asUint8List$2(result, 0, null);
      this._file_operations$_captured_completer_0.complete$1(0, result);
    }, null, null, 2, 0, null, 53, "call"]
  },
  FileOps_readBlob_closure0: {
    "^": "Closure:2;_file_operations$_captured_completer_2",
    call$1: [function(domError) {
      this._file_operations$_captured_completer_2.completeError$1(domError);
    }, null, null, 2, 0, null, 54, "call"]
  },
  FileOps__createFile_closure: {
    "^": "Closure:35;_file_operations$_box_0,_captured_type_1",
    call$1: [function(entry) {
      var t1 = this._captured_type_1;
      if (t1 === "Text")
        return B.FileOps__writeBlob(entry, W.Blob_Blob([this._file_operations$_box_0._captured_content_0], null, null)).then$1(new B.FileOps__createFile__closure(entry));
      else if (t1 === "blob")
        return B.FileOps__writeBlob(entry, W.Blob_Blob([new Uint8Array(H._ensureNativeList(this._file_operations$_box_0._captured_content_0))], null, null)).then$1(new B.FileOps__createFile__closure0(entry));
    }, null, null, 2, 0, null, 51, "call"]
  },
  FileOps__createFile__closure1: {
    "^": "Closure:2;_captured_entry_2",
    call$1: function(_) {
      return this._captured_entry_2;
    }
  },
  FileOps__createFile__closure2: {
    "^": "Closure:2;_captured_entry_3",
    call$1: function(_) {
      return this._captured_entry_3;
    }
  },
  FileOps__createFile__closure: {
    "^": "Closure:2;_captured_entry_4",
    call$1: [function(_) {
      return this._captured_entry_4;
    }, null, null, 2, 0, null, 26, "call"]
  },
  FileOps__createFile__closure0: {
    "^": "Closure:2;_captured_entry_5",
    call$1: [function(_) {
      return this._captured_entry_5;
    }, null, null, 2, 0, null, 26, "call"]
  },
  FileOps__writeBlob_closure: {
    "^": "Closure:36;_captured_blob_1,_file_operations$_captured_completer_2",
    call$1: [function(writer) {
      var t1, t2, t3, t4, writeSubscription;
      t1 = {};
      t1._captured_writeSubscription_0 = null;
      t2 = J.getInterceptor$x(writer);
      t3 = t2.get$onWrite(writer);
      t4 = this._file_operations$_captured_completer_2;
      writeSubscription = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t3._target, t3._eventType, W._wrapZone(new B.FileOps__writeBlob__closure(t1, t4, writer)), t3._useCapture), [H.getTypeArgumentByIndex(t3, 0)]);
      writeSubscription._tryResume$0();
      t1._captured_writeSubscription_0 = writeSubscription;
      t2.get$onError(writer).listen$1(t4.get$completeError());
      t2.write$1(writer, this._captured_blob_1);
    }, null, null, 2, 0, null, 55, "call"]
  },
  FileOps__writeBlob__closure: {
    "^": "Closure:2;_file_operations$_box_0,_captured_completer_3,_captured_writer_4",
    call$1: [function(_) {
      var t1, t2;
      this._file_operations$_box_0._captured_writeSubscription_0.cancel$0();
      t1 = this._captured_writer_4;
      t2 = J.getInterceptor$x(t1);
      t2.truncate$1(t1, t2.get$position(t1));
      this._captured_completer_3.complete$0(0);
    }, null, null, 2, 0, null, 26, "call"]
  }
}],
["git.http_fetcher", "package:hetimagit/src/git/http_fetcher.dart", , U, {
  "^": "",
  _createUint8List: function(response) {
    var t1 = J.getInterceptor(response);
    if (!!t1.$isUint8List)
      return response;
    if (!!t1.$isByteBuffer)
      return t1.asUint8List$2(response, 0, null);
    throw H.wrapException("unexpected type for _createUint8List(): " + H.S(t1.get$runtimeType(response)));
  },
  HttpFetcher: {
    "^": "Object;store,name>,repoUrl,username,password,url',urlOptions,refs",
    fetchUploadRefs$0: [function() {
      return this._fetchRefs$1("git-upload-pack");
    }, "call$0", "get$fetchUploadRefs", 0, 0, 37],
    fetchRef$8: [function(wantRefs, haveRefs, shallow, depth, moreHaves, noCommon, progress, cancel) {
      var completer, url, body, xhr, t1;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      url = this._makeUri$2("/git-upload-pack", P.LinkedHashMap_LinkedHashMap$_empty(null, null));
      body = this._refWantRequst$5(wantRefs, haveRefs, shallow, depth, moreHaves);
      xhr = new XMLHttpRequest();
      C.HttpRequest_methods.open$5$async$password$user(xhr, "POST", url, true, this.password, this.username);
      xhr.responseType = "arraybuffer";
      xhr.setRequestHeader("Content-Type", "application/x-git-upload-pack-request");
      t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, "load", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.HttpFetcher_fetchRef_closure(this, haveRefs, moreHaves, noCommon, cancel, completer, xhr, null)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, "error", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.HttpFetcher_fetchRef_closure0(completer, xhr)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, "abort", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.HttpFetcher_fetchRef_closure1(completer, xhr)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      xhr.send(body);
      return completer.future;
    }, "call$8", "get$fetchRef", 14, 2, 38, 23, 56, 57, 58, 59, 60, 61, 62, 63],
    _queryParams$1: function(uri) {
      var parts, params;
      parts = J.split$1$s(uri, "?");
      if (parts.length < 2)
        return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      params = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      C.JSArray_methods.forEach$1(J.split$1$s(parts[1], "&"), new U.HttpFetcher__queryParams_closure(params));
      return params;
    },
    _doGet$1: function(url) {
      var completer, xhr, t1;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      xhr = new XMLHttpRequest();
      C.HttpRequest_methods.open$5$async$password$user(xhr, "GET", url, true, this.password, this.username);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, "load", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.HttpFetcher__doGet_closure(completer, xhr)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, "error", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.HttpFetcher__doGet_closure0(completer, xhr)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, "abort", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new U.HttpFetcher__doGet_closure1(completer, xhr)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      xhr.send();
      return completer.future;
    },
    isValidRepoUrl$0: function() {
      var uri, t1, exception;
      uri = this._makeUri$2("/info/refs", P.LinkedHashMap_LinkedHashMap$_literal(["service", "git-upload-pack"], null, null));
      try {
        t1 = this._doGet$1(uri).then$1(new U.HttpFetcher_isValidRepoUrl_closure()).catchError$1(new U.HttpFetcher_isValidRepoUrl_closure0());
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1._asyncComplete$1(false);
        return t1;
      }
    },
    _makeUri$2: function(path, extraOptions) {
      var uri, options, optionStrings;
      uri = J.$add$ns(this.url, path);
      options = this.urlOptions;
      options.addAll$1(0, extraOptions);
      if (options.get$isNotEmpty(options)) {
        optionStrings = options.get$keys().map$1(0, new U.HttpFetcher__makeUri_closure(options));
        return J.$add$ns(J.$add$ns(uri, "?"), optionStrings.join$1(0, "&"));
      }
      return uri;
    },
    _parseDiscovery$1: function(data) {
      var lines, result, i, currentLine, t1, bits, bits2, t2;
      lines = J.split$1$s(data, "\n");
      result = P.LinkedHashMap_LinkedHashMap$_literal(["refs", []], null, null);
      for (i = 1; i < lines.length - 1; ++i) {
        currentLine = lines[i];
        t1 = J.getInterceptor$s(currentLine);
        if (i === 1) {
          bits = t1.split$1(currentLine, "\u0000");
          if (1 >= bits.length)
            return H.ioore(bits, 1);
          result.$indexSet(0, "capabilities", bits[1]);
          if (0 >= bits.length)
            return H.ioore(bits, 0);
          bits2 = J.split$1$s(bits[0], " ");
          t1 = result.$index(0, "refs");
          if (0 >= bits2.length)
            return H.ioore(bits2, 0);
          t2 = J.substring$1$s(bits2[0], 8);
          if (1 >= bits2.length)
            return H.ioore(bits2, 1);
          J.add$1$ax(t1, new S.GitRef(t2, bits2[1], null, null, null, null));
        } else {
          bits2 = t1.split$1(currentLine, " ");
          t1 = result.$index(0, "refs");
          if (0 >= bits2.length)
            return H.ioore(bits2, 0);
          t2 = J.substring$1$s(bits2[0], 4);
          if (1 >= bits2.length)
            return H.ioore(bits2, 1);
          J.add$1$ax(t1, new S.GitRef(t2, bits2[1], null, null, null, null));
        }
      }
      return result;
    },
    _padWithZeros$1: function(num) {
      var hex, pad, i;
      hex = C.JSInt_methods.toRadixString$1(num, 16);
      pad = 4 - hex.length;
      for (i = 0; i < pad; ++i)
        hex = "0" + hex;
      return hex;
    },
    _refWantRequst$5: function(wantRefs, haveRefs, shallow, depth, moreHaves) {
      var t1, t2, request, i, depthStr;
      t1 = J.getInterceptor$asx(wantRefs);
      t2 = "0067want " + H.S(t1.$index(wantRefs, 0)) + " ";
      request = new P.StringBuffer(t2);
      request._contents = t2 + "multi_ack_detailed side-band-64k thin-pack ofs-delta\n";
      i = 1;
      while (true) {
        t2 = t1.get$length(wantRefs);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        request._contents += "0032want " + H.S(t1.$index(wantRefs, i)) + "\n";
        ++i;
      }
      if (haveRefs != null) {
        if (shallow != null)
          request._contents += C.JSString_methods.$add("0034shallow ", shallow);
        request._contents += "0000";
        J.forEach$1$ax(haveRefs, new U.HttpFetcher__refWantRequst_closure(request));
        t1 = J.get$isNotEmpty$asx(moreHaves);
        t2 = request._contents;
        if (t1) {
          t1 = t2 + "0000";
          request._contents = t1;
        } else {
          t1 = t2 + "0009done\n";
          request._contents = t1;
        }
      } else {
        if (depth != null) {
          depthStr = "deepen " + H.S(depth);
          request._contents += this._padWithZeros$1(depthStr.length + 4) + depthStr;
        }
        t1 = request._contents += "0000";
        t1 += "0009done\n";
        request._contents = t1;
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _fetchRefs$1: function(service) {
      return this._doGet$1(this._makeUri$2("/info/refs", P.LinkedHashMap_LinkedHashMap$_literal(["service", service], null, null))).then$1(new U.HttpFetcher__fetchRefs_closure(this));
    }
  },
  HttpFetcher_fetchRef_closure: {
    "^": "Closure:2;_http_fetcher$_captured_this_0,_captured_haveRefs_1,_captured_moreHaves_2,_captured_noCommon_3,_captured_cancel_4,_captured_completer_5,_captured_xhr_6,_captured_packProgress_7",
    call$1: [function($event) {
      var data, t1;
      data = U._createUint8List(W._convertNativeToDart_XHR_Response(this._captured_xhr_6.response));
      if (this._captured_haveRefs_1 != null && C.Utf8Codec_false.decode$1(J.sublist$2$ax(data, 4, 7)) === "NAK") {
        if (J.get$isNotEmpty$asx(this._captured_moreHaves_2))
          ;
        else {
          t1 = this._captured_noCommon_3;
          if (t1 === true)
            t1.call$0();
        }
        this._captured_completer_5.completeError$1("error in git pull");
      } else {
        t1 = this._captured_completer_5;
        return new R.UploadPackParser(0, null, null, this._captured_cancel_4).parse$3(data, this._http_fetcher$_captured_this_0.store, this._captured_packProgress_7).then$2$onError(new U.HttpFetcher_fetchRef__closure(t1), new U.HttpFetcher_fetchRef__closure0(t1));
      }
    }, null, null, 2, 0, null, 53, "call"]
  },
  HttpFetcher_fetchRef__closure: {
    "^": "Closure:32;_captured_completer_8",
    call$1: [function(obj) {
      this._captured_completer_8.complete$1(0, obj);
    }, null, null, 2, 0, null, 64, "call"]
  },
  HttpFetcher_fetchRef__closure0: {
    "^": "Closure:2;_captured_completer_9",
    call$1: [function(e) {
      this._captured_completer_9.completeError$1(e);
    }, null, null, 2, 0, null, 3, "call"]
  },
  HttpFetcher_fetchRef_closure0: {
    "^": "Closure:2;_captured_completer_10,_captured_xhr_11",
    call$1: [function(_) {
      this._captured_completer_10.completeError$1(U.HttpGitException_fromXhr(this._captured_xhr_11));
    }, null, null, 2, 0, null, 26, "call"]
  },
  HttpFetcher_fetchRef_closure1: {
    "^": "Closure:2;_captured_completer_12,_captured_xhr_13",
    call$1: [function(_) {
      this._captured_completer_12.completeError$1(U.HttpGitException_fromXhr(this._captured_xhr_13));
    }, null, null, 2, 0, null, 26, "call"]
  },
  HttpFetcher__queryParams_closure: {
    "^": "Closure:5;_captured_params_0",
    call$1: function(paramStrimg) {
      var pair, t1;
      pair = J.split$1$s(paramStrimg, "=");
      if (1 >= pair.length)
        return H.ioore(pair, 1);
      t1 = P.Uri__uriDecode(pair[1], C.Utf8Codec_false, true);
      if (0 >= pair.length)
        return H.ioore(pair, 0);
      pair[0] = t1;
      this._captured_params_0.$index(0, t1);
    }
  },
  HttpFetcher__doGet_closure: {
    "^": "Closure:2;_http_fetcher$_captured_completer_0,_captured_xhr_1",
    call$1: [function($event) {
      var t1, t2;
      t1 = this._captured_xhr_1;
      if (t1.readyState === 4) {
        t2 = this._http_fetcher$_captured_completer_0;
        if (t1.status === 200)
          return t2.complete$1(0, t1.responseText);
        else
          t2.completeError$1(U.HttpGitException_fromXhr(t1));
      }
    }, null, null, 2, 0, null, 53, "call"]
  },
  HttpFetcher__doGet_closure0: {
    "^": "Closure:2;_captured_completer_2,_captured_xhr_3",
    call$1: [function(_) {
      this._captured_completer_2.completeError$1(U.HttpGitException_fromXhr(this._captured_xhr_3));
    }, null, null, 2, 0, null, 26, "call"]
  },
  HttpFetcher__doGet_closure1: {
    "^": "Closure:2;_captured_completer_4,_captured_xhr_5",
    call$1: [function(_) {
      this._captured_completer_4.completeError$1(U.HttpGitException_fromXhr(this._captured_xhr_5));
    }, null, null, 2, 0, null, 26, "call"]
  },
  HttpFetcher_isValidRepoUrl_closure: {
    "^": "Closure:2;",
    call$1: [function(_) {
      return true;
    }, null, null, 2, 0, null, 26, "call"]
  },
  HttpFetcher_isValidRepoUrl_closure0: {
    "^": "Closure:2;",
    call$1: [function(e) {
      var t1;
      if (J.get$status$x(e) === 401)
        throw H.wrapException(O.GitException$("git.auth_required", null, false));
      t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1._asyncComplete$1(false);
      return t1;
    }, null, null, 2, 0, null, 3, "call"]
  },
  HttpFetcher__makeUri_closure: {
    "^": "Closure:5;_captured_options_0",
    call$1: [function(key) {
      return J.$add$ns(J.$add$ns(key, "="), P.Uri__uriEncode(C.List_nxB, this._captured_options_0.$index(0, key), C.Utf8Codec_false, true));
    }, null, null, 2, 0, null, 65, "call"]
  },
  HttpFetcher__refWantRequst_closure: {
    "^": "Closure:5;_captured_request_0",
    call$1: [function(sha) {
      this._captured_request_0._contents += "0032have " + H.S(sha) + "\n";
    }, null, null, 2, 0, null, 66, "call"]
  },
  HttpFetcher__fetchRefs_closure: {
    "^": "Closure:5;_http_fetcher$_captured_this_0",
    call$1: [function(data) {
      var t1, discInfo, t2;
      t1 = this._http_fetcher$_captured_this_0;
      discInfo = t1._parseDiscovery$1(data);
      J.forEach$1$ax(discInfo.$index(0, "refs"), new U.HttpFetcher__fetchRefs__closure(t1));
      t1 = discInfo.$index(0, "refs");
      t2 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t2._asyncComplete$1(t1);
      return t2;
    }, null, null, 2, 0, null, 31, "call"]
  },
  HttpFetcher__fetchRefs__closure: {
    "^": "Closure:29;_http_fetcher$_captured_this_1",
    call$1: [function(ref) {
      var t1, t2, t3, type, $name;
      t1 = this._http_fetcher$_captured_this_1;
      t2 = J.getInterceptor$x(ref);
      if (J.$gt$n(J.get$length$asx(t2.get$name(ref)), 5) && J.substring$2$s(t2.get$name(ref), 0, 5) === "refs/") {
        t3 = J.split$1$s(t2.get$name(ref), "/");
        if (1 >= t3.length)
          return H.ioore(t3, 1);
        type = t3[1];
        t3 = t1.name + "/";
        t2 = J.split$1$s(t2.get$name(ref), "/");
        if (2 >= t2.length)
          return H.ioore(t2, 2);
        $name = C.JSString_methods.$add(t3, t2[2]);
      } else {
        $name = t1.name + "/HEAD";
        type = "HEAD";
      }
      t1.refs.$indexSet(0, $name, new S.GitRef(ref.get$sha(), $name, type, null, null, t1));
      return;
    }, null, null, 2, 0, null, 46, "call"]
  },
  HttpGitException: {
    "^": "GitException;status>,statusText,errorCode,message,canIgnore",
    toString$0: function(_) {
      return H.S(this.status) + " " + H.S(this.statusText);
    },
    static: {HttpGitException_fromXhr: function(request) {
        var t1, errorCode;
        t1 = request.status;
        if (t1 === 401)
          errorCode = "git.auth_required";
        else if (t1 === 404)
          errorCode = "git.http_not_found_error";
        else if (t1 === 403)
          errorCode = "git.http_forbidden_error";
        else
          errorCode = t1 === 0 ? "git.http_conn_reset" : "git.http_error";
        return new U.HttpGitException(t1, request.statusText, errorCode, H.S(t1) + " " + H.S(request.statusText), null);
      }}
  }
}],
["git.objects", "package:hetimagit/src/git/object.dart", , Z, {
  "^": "",
  GitObject_make: function(sha, type, $content, rawObj) {
    var t1;
    switch (type) {
      case "blob":
        t1 = new Z.BlobObject(null, $content, sha);
        t1.type = "blob";
        return t1;
      case "tree":
      case "Tree":
        t1 = new Z.TreeObject(null, null, null, $content, sha);
        t1.type = "tree";
        t1.rawObj = rawObj;
        t1._parse$0();
        return t1;
      case "commit":
        t1 = new Z.CommitObject(null, null, null, null, null, null, null, null, null, null);
        t1.type = "commit";
        t1.sha = sha;
        t1.rawObj = rawObj;
        if (!!J.getInterceptor($content).$isUint8List)
          t1.data = C.Utf8Codec_false.decode$1($content);
        else if (typeof $content === "string")
          t1.data = $content;
        else
          H.throwExpression("Data is in incompatible format.");
        t1._parseData$0();
        return t1;
      case "tag":
        t1 = new Z.TagObject(null, $content, sha);
        t1.type = "tag";
        return t1;
      default:
        throw H.wrapException(P.ArgumentError$("Unsupported git object type: " + type));
    }
  },
  GitObject: {
    "^": "Object;type*,data*,sha<",
    toString$0: function(_) {
      return J.toString$0(this.data);
    }
  },
  TreeEntry: {
    "^": "Object;name>,shaBytes@,isBlob<,permission<",
    get$sha: function() {
      return V.shaBytesToString(this.shaBytes);
    }
  },
  ParseError: {
    "^": "Error;message>",
    toString$0: function(_) {
      return "Parse Error(s): " + this.message;
    }
  },
  TreeObject: {
    "^": "GitObject;entries,rawObj,type,data,sha",
    _parse$0: function() {
      var buffer, treeEntries, t1, idx, t2, idx0, isBlob, permission, idx1, nameStr, val;
      buffer = this.data;
      treeEntries = [];
      t1 = J.getInterceptor$asx(buffer);
      idx = 0;
      while (true) {
        t2 = t1.get$length(buffer);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(idx < t2))
          break;
        for (idx0 = idx; !J.$eq(t1.$index(buffer, idx0), 0);) {
          t2 = t1.get$length(buffer);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (idx0 >= t2)
            throw H.wrapException(new Z.ParseError("Unable to parse git tree object"));
          ++idx0;
        }
        isBlob = J.$eq(t1.$index(buffer, idx), 49);
        if (J.$eq(t1.$index(buffer, idx + 1), 54))
          throw H.wrapException(O.GitException$("git.submodules_not_yet_supported", null, false));
        t2 = t1.sublist$2(buffer, idx, idx + (isBlob ? 6 : 5));
        permission = new P.Utf8Decoder(false).convert$1(t2);
        t2 = isBlob ? 7 : 6;
        idx1 = idx0 + 1;
        t2 = t1.sublist$2(buffer, idx + t2, idx0);
        nameStr = new P.Utf8Decoder(false).convert$1(t2);
        val = C.HtmlEscape_gsm._convert$3(nameStr, 0, nameStr.length);
        idx = idx1 + 20;
        treeEntries.push(new Z.TreeEntry(P.Uri__uriDecode(val == null ? nameStr : val, C.Utf8Codec_false, false), t1.sublist$2(buffer, idx1, idx), isBlob, permission));
      }
      this.entries = treeEntries;
      C.JSArray_methods.sort$1(treeEntries, new Z.TreeObject__parse_closure());
    }
  },
  TreeObject__parse_closure: {
    "^": "Closure:39;",
    call$2: function(a, b) {
      return J.compareTo$1$ns(J.get$name$x(a), J.get$name$x(b));
    }
  },
  BlobObject: {
    "^": "GitObject;type,data,sha"
  },
  Author: {
    "^": "Object;name>,email,timestamp,date"
  },
  CommitObject: {
    "^": "GitObject;parents,author,committer,_encoding,message>,treeSha<,rawObj,type,data,sha",
    _parseData$0: function() {
      var lines, t1, i, t2;
      lines = J.split$1$s(this.data, "\n");
      if (0 >= lines.length)
        return H.ioore(lines, 0);
      t1 = J.split$1$s(lines[0], " ");
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      this.treeSha = t1[1];
      this.parents = [];
      i = 1;
      while (true) {
        if (i >= lines.length)
          return H.ioore(lines, i);
        if (!(J.substring$2$s(lines[i], 0, 6) === "parent"))
          break;
        t1 = this.parents;
        if (i >= lines.length)
          return H.ioore(lines, i);
        t2 = J.split$1$s(lines[i], " ");
        if (1 >= t2.length)
          return H.ioore(t2, 1);
        t1.push(t2[1]);
        ++i;
      }
      if (i >= lines.length)
        return H.ioore(lines, i);
      this.author = this._parseAuthor$1(J.replaceFirst$2$s(lines[i], "author ", ""));
      t1 = i + 1;
      if (t1 >= lines.length)
        return H.ioore(lines, t1);
      this.committer = this._parseAuthor$1(J.replaceFirst$2$s(lines[t1], "committer ", ""));
      t1 = i + 2;
      if (t1 >= lines.length)
        return H.ioore(lines, t1);
      t2 = J.split$1$s(lines[t1], " ");
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      if (J.$eq(t2[0], "encoding")) {
        if (t1 >= lines.length)
          return H.ioore(lines, t1);
        t2 = J.split$1$s(lines[t1], " ");
        if (1 >= t2.length)
          return H.ioore(t2, 1);
        this._encoding = t2[1];
      }
      C.JSArray_methods.checkGrowable$1(lines, "removeRange");
      P.RangeError_checkValidRange(0, t1, lines.length, null, null, null);
      lines.splice(0, t1 - 0);
      this.message = C.JSArray_methods.join$1(lines, "\n");
    },
    _parseAuthor$1: function(input) {
      var t1, match, author;
      t1 = new H.JSSyntaxRegExp("(.*) <(.*)> (\\d+) (\\+|\\-)\\d\\d\\d\\d", H.JSSyntaxRegExp_makeNative("(.*) <(.*)> (\\d+) (\\+|\\-)\\d\\d\\d\\d", false, true, false), null, null).allMatches$1(0, input);
      match = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
      author = new Z.Author(null, null, null, null);
      if (0 >= match.length)
        return H.ioore(match, 0);
      author.name = match[0].group$1(1);
      if (0 >= match.length)
        return H.ioore(match, 0);
      author.email = match[0].group$1(2);
      if (0 >= match.length)
        return H.ioore(match, 0);
      t1 = J.$mul$ns(H.Primitives_parseInt(match[0].group$1(3), null, null), 1000);
      author.timestamp = t1;
      author.date = P.DateTime$fromMillisecondsSinceEpoch(t1, true);
      return author;
    },
    toString$0: function(_) {
      return C.JSString_methods.$add(C.JSString_methods.$add("commit ", this.sha) + "\n" + (C.JSString_methods.$add(C.JSString_methods.$add("Author: ", this.author.name) + " <", this.author.email) + ">\n") + ("Date:  " + J.toString$0(this.author.date) + "\n\n"), this.message);
    },
    toMap$0: function() {
      var t1, t2;
      t1 = this.sha;
      t2 = this.author;
      return P.LinkedHashMap_LinkedHashMap$_literal(["commit", t1, "author_name", t2.name, "author_email", t2.email, "date", J.toString$0(t2.date), "message", this.message], null, null);
    }
  },
  TagObject: {
    "^": "GitObject;type,data,sha"
  },
  LooseObject: {
    "^": "GitObject;size>,type,data,sha",
    _parse$1: function(buf) {
      var t1, headChars, i, t2, header, parts;
      t1 = H.checkSubtype(buf, "$isList", [P.$int], "$asList");
      if (t1) {
        headChars = [];
        t1 = J.getInterceptor$asx(buf);
        i = 0;
        while (true) {
          t2 = t1.get$length(buf);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (!(i < t2))
            break;
          if (!J.$eq(t1.$index(buf, i), 0)) {
            t2 = t1.$index(buf, i);
            headChars.push(new P.Utf8Decoder(false).convert$1([t2]));
          } else
            break;
          ++i;
        }
        header = C.JSArray_methods.join$0(headChars);
        this.data = t1.sublist$2(buf, i + 1, t1.get$length(buf));
      } else {
        t1 = J.getInterceptor$asx(buf);
        i = t1.indexOf$1(buf, H.Primitives_stringFromCharCode(0));
        header = t1.substring$2(buf, 0, i);
        this.data = t1.substring$2(buf, i + 1, t1.get$length(buf));
      }
      parts = header.split(" ");
      t1 = parts.length;
      if (0 >= t1)
        return H.ioore(parts, 0);
      this.type = parts[0];
      if (1 >= t1)
        return H.ioore(parts, 1);
      this.size = H.Primitives_parseInt(parts[1], null, null);
    }
  },
  PackedObject: {
    "^": "GitObject;shaBytes@,baseSha,crc@,offset>,desiredOffset<,type,data,sha"
  }
}],
["git.objects.utils", "package:hetimagit/src/git/object_utils.dart", , V, {
  "^": "",
  ObjectTypes_getTypeString: function(type) {
    switch (type) {
      case 1:
        return "commit";
      case 2:
        return "tree";
      case 3:
        return "blob";
      case 4:
        return "tag";
      case 6:
        return "ofs_delta";
      case 7:
        return "ref_delta";
      default:
        throw H.wrapException("unsupported pack type " + type + ".");
    }
  },
  ObjectUtils_expandBlob: function(dir, store, fileName, blobSha, permission) {
    return store.retrieveObject$2(blobSha, "blob").then$1(new V.ObjectUtils_expandBlob_closure(dir, store, fileName, blobSha, permission));
  },
  ObjectUtils_expandTree: function(dir, store, treeSha) {
    return store.retrieveObject$2(treeSha, "Tree").then$1(new V.ObjectUtils_expandTree_closure(dir, store));
  },
  ObjectUtils_expandBlob_closure: {
    "^": "Closure:40;_utils2$_captured_dir_0,_utils2$_captured_store_1,_captured_fileName_2,_captured_blobSha_3,_captured_permission_4",
    call$1: [function(blob) {
      return B.FileOps_createFileWithContent(this._utils2$_captured_dir_0, this._captured_fileName_2, J.get$data$x(blob), "blob").then$1(new V.ObjectUtils_expandBlob__closure(this._utils2$_captured_store_1, this._captured_blobSha_3, this._captured_permission_4));
    }, null, null, 2, 0, null, 67, "call"]
  },
  ObjectUtils_expandBlob__closure: {
    "^": "Closure:30;_captured_store_5,_captured_blobSha_6,_captured_permission_7",
    call$1: [function(entry) {
      return J.getMetadata$0$x(entry).then$1(new V.ObjectUtils_expandBlob___closure(this._captured_store_5, this._captured_blobSha_6, this._captured_permission_7, entry));
    }, null, null, 2, 0, null, 51, "call"]
  },
  ObjectUtils_expandBlob___closure: {
    "^": "Closure:2;_captured_store_8,_captured_blobSha_9,_captured_permission_10,_captured_entry_11",
    call$1: [function(data) {
      var $status, t1;
      $status = M.FileStatus$();
      $status.path = J.get$fullPath$x(this._captured_entry_11);
      t1 = this._captured_blobSha_9;
      $status.sha = t1;
      $status.headSha = t1;
      t1 = J.getInterceptor$x(data);
      $status.size = t1.get$size(data);
      $status.modificationTime = t1.get$modificationTime(data).get$millisecondsSinceEpoch();
      $status.permission = this._captured_permission_10;
      J.get$index$x(this._captured_store_8).createIndexForEntry$1($status);
    }, null, null, 2, 0, null, 31, "call"]
  },
  ObjectUtils_expandTree_closure: {
    "^": "Closure:41;_utils2$_captured_dir_0,_utils2$_captured_store_1",
    call$1: [function(tree) {
      return P.Future_forEach(H.interceptedTypeCast(tree, "$isTreeObject").entries, new V.ObjectUtils_expandTree__closure(this._utils2$_captured_dir_0, this._utils2$_captured_store_1));
    }, null, null, 2, 0, null, 68, "call"]
  },
  ObjectUtils_expandTree__closure: {
    "^": "Closure:42;_captured_dir_2,_captured_store_3",
    call$1: function(entry) {
      var t1, t2, t3;
      t1 = J.getInterceptor$x(entry);
      t2 = this._captured_dir_2;
      t3 = this._captured_store_3;
      if (entry.get$isBlob())
        return V.ObjectUtils_expandBlob(t2, t3, t1.get$name(entry), entry.get$sha(), entry.get$permission());
      else
        return J.createDirectory$1$x(t2, t1.get$name(entry)).then$1(new V.ObjectUtils_expandTree___closure(t3, entry));
    }
  },
  ObjectUtils_expandTree___closure: {
    "^": "Closure:27;_utils2$_captured_store_4,_utils2$_captured_entry_5",
    call$1: [function(newDir) {
      return V.ObjectUtils_expandTree(newDir, this._utils2$_captured_store_4, this._utils2$_captured_entry_5.get$sha());
    }, null, null, 2, 0, null, 69, "call"]
  }
}],
["git.objectstore", "package:hetimagit/src/git/objectstore.dart", , S, {
  "^": "",
  GitRef: {
    "^": "Object;sha<,name>,type*,head,localHead,remote",
    toString$0: function(_) {
      return H.S(this.sha) + " " + H.S(this.head) + " " + H.S(this.name);
    }
  },
  PackEntry: {
    "^": "Object;pack<,packIdx"
  },
  FindPackedObjectResult: {
    "^": "Object;pack<,offset>"
  },
  ObjectStore: {
    "^": "Object;_rootDir,objectDir?,gitPath,packs<,config,index>",
    get$root: function(_) {
      return this._rootDir;
    },
    clearRemoteRefs$0: function() {
      return J.createDirectory$1$x(this._rootDir, ".git/refs/remotes/origin/").then$1(new S.ObjectStore_clearRemoteRefs_closure()).catchError$1(new S.ObjectStore_clearRemoteRefs_closure0());
    },
    writeRemoteRefs$1: [function(refs) {
      return this.clearRemoteRefs$0().then$1(new S.ObjectStore_writeRemoteRefs_closure(this, refs));
    }, "call$1", "get$writeRemoteRefs", 2, 0, 43, 45],
    findPackedObject$1: function(shaBytes) {
      var t1, i, offset;
      for (t1 = this.packs, i = 0; i < t1.length; ++i) {
        offset = t1[i].packIdx.getObjectOffset$1(shaBytes);
        if (offset !== -1) {
          if (i >= t1.length)
            return H.ioore(t1, i);
          return new S.FindPackedObjectResult(t1[i].pack, offset);
        }
      }
      return H.throwExpression("Not found.");
    },
    retrieveObject$2: function(sha, objType) {
      return this.retrieveRawObject$2(sha, objType === "commit" ? "Text" : "ArrayBuffer").then$1(new S.ObjectStore_retrieveObject_closure(sha, objType));
    },
    retrieveRawObject$2: function(sha, dataType) {
      var t1, t2, t3;
      t1 = {};
      t1._captured_sha_0 = sha;
      t1._captured_dataType_1 = dataType;
      t1._captured_shaBytes_2 = null;
      if (typeof sha === "string")
        t1._captured_shaBytes_2 = V.shaToBytes(sha);
      else {
        t1._captured_shaBytes_2 = sha;
        t1._captured_sha_0 = V.shaBytesToString(sha);
      }
      t2 = t1._captured_sha_0;
      t3 = J.getInterceptor$s(t2);
      return J.getFile$1$x(this.objectDir, t3.substring$2(t2, 0, 2) + "/" + t3.substring$1(t2, 2)).then$2$onError(new S.ObjectStore_retrieveRawObject_closure(t1), new S.ObjectStore_retrieveRawObject_closure0(t1, this));
    }
  },
  ObjectStore_clearRemoteRefs_closure: {
    "^": "Closure:2;",
    call$1: [function(dir) {
      return J.removeRecursively$0$x(dir);
    }, null, null, 2, 0, null, 38, "call"]
  },
  ObjectStore_clearRemoteRefs_closure0: {
    "^": "Closure:2;",
    call$1: [function(e) {
    }, null, null, 2, 0, null, 3, "call"]
  },
  ObjectStore_writeRemoteRefs_closure: {
    "^": "Closure:2;_objectstore$_captured_this_0,_captured_refs_1",
    call$1: [function(_) {
      return P.Future_forEach(this._captured_refs_1, new S.ObjectStore_writeRemoteRefs__closure(this._objectstore$_captured_this_0));
    }, null, null, 2, 0, null, 26, "call"]
  },
  ObjectStore_writeRemoteRefs__closure: {
    "^": "Closure:29;_objectstore$_captured_this_2",
    call$1: function(ref) {
      var t1, refName, t2;
      t1 = J.getInterceptor$x(ref);
      refName = C.JSArray_methods.get$last(J.split$1$s(t1.get$name(ref), "/"));
      if (!J.$eq(t1.get$name(ref), "HEAD")) {
        t1 = J.getInterceptor(refName);
        t1 = t1.$eq(refName, "head") || t1.$eq(refName, "merge");
      } else
        t1 = true;
      if (t1) {
        t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
        t1._asyncComplete$1(null);
        return t1;
      }
      t1 = ref.get$sha();
      t2 = C.JSString_methods.$add(".git/refs/remotes/origin/", refName);
      return B.FileOps_createFileWithContent(this._objectstore$_captured_this_2._rootDir, t2, J.$add$ns(t1, "\n"), "Text");
    }
  },
  ObjectStore_retrieveObject_closure: {
    "^": "Closure:2;_captured_sha_0,_captured_objType_1",
    call$1: [function(object) {
      var t1, t2, t3;
      t1 = this._captured_objType_1;
      if (t1 === "Raw")
        return object;
      else {
        t2 = J.getInterceptor(object);
        t3 = this._captured_sha_0;
        if (!!t2.$isLooseObject)
          return Z.GitObject_make(t3, t1, object.data, object);
        else
          return Z.GitObject_make(t3, t1, t2.get$data(object), null);
      }
    }, null, null, 2, 0, null, 1, "call"]
  },
  ObjectStore_retrieveRawObject_closure: {
    "^": "Closure:44;_objectstore$_box_0",
    call$1: [function(entry) {
      return entry.readBytes$0().then$1(new S.ObjectStore_retrieveRawObject__closure0(this._objectstore$_box_0));
    }, null, null, 2, 0, null, 51, "call"]
  },
  ObjectStore_retrieveRawObject__closure0: {
    "^": "Closure:45;_objectstore$_box_0",
    call$1: function(buffer) {
      var inflated, t1;
      inflated = O.Zlib_inflate(buffer.getBytes$0(), null, 0).data;
      t1 = this._objectstore$_box_0._captured_dataType_1;
      if (t1 === "Raw" || t1 === "ArrayBuffer") {
        t1 = new Z.LooseObject(null, null, null, null);
        t1._parse$1(inflated);
        return t1;
      } else
        return B.FileOps_readBlob(W.Blob_Blob([new Uint8Array(H._ensureNativeList(inflated))], null, null), "Text").then$1(new S.ObjectStore_retrieveRawObject___closure0());
    }
  },
  ObjectStore_retrieveRawObject___closure0: {
    "^": "Closure:5;",
    call$1: [function(data) {
      var t1 = new Z.LooseObject(null, null, null, null);
      t1._parse$1(data);
      return t1;
    }, null, null, 2, 0, null, 31, "call"]
  },
  ObjectStore_retrieveRawObject_closure0: {
    "^": "Closure:2;_objectstore$_box_0,_objectstore$_captured_this_1",
    call$1: [function(e) {
      var obj, t1, dataType, exception;
      try {
        t1 = this._objectstore$_box_0;
        obj = this._objectstore$_captured_this_1.findPackedObject$1(t1._captured_shaBytes_2);
        dataType = t1._captured_dataType_1;
        t1._captured_dataType_1 = dataType === "Raw" ? "ArrayBuffer" : dataType;
        t1 = obj.get$pack().matchAndExpandObjectAtOffset$2(J.get$offset$x(obj), t1._captured_dataType_1).then$1(new S.ObjectStore_retrieveRawObject__closure(t1));
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        throw H.wrapException(C.JSString_methods.$add("Can't find object with SHA ", this._objectstore$_box_0._captured_sha_0));
      }
    }, null, null, 2, 0, null, 3, "call"]
  },
  ObjectStore_retrieveRawObject__closure: {
    "^": "Closure:46;_objectstore$_box_0",
    call$1: [function(packed) {
      if (this._objectstore$_box_0._captured_dataType_1 === "Text")
        return B.FileOps_readBlob(W.Blob_Blob([new Uint8Array(H._ensureNativeList(J.get$data$x(packed)))], null, null), "Text").then$1(new S.ObjectStore_retrieveRawObject___closure(packed));
      else
        return packed;
    }, null, null, 2, 0, null, 70, "call"]
  },
  ObjectStore_retrieveRawObject___closure: {
    "^": "Closure:5;_captured_packed_2",
    call$1: [function(data) {
      var t1 = this._captured_packed_2;
      J.set$data$x(t1, data);
      return t1;
    }, null, null, 2, 0, null, 31, "call"]
  }
}],
["git.options", "package:hetimagit/src/git/options.dart", , O, {
  "^": "",
  GitOptions: {
    "^": "Object;root>,username,password,repoUrl,branchName,store,email,commitMessage,name>,depth,progressCallback"
  }
}],
["git.pack", "package:hetimagit/src/git/pack.dart", , R, {
  "^": "",
  PackObjectHeader: {
    "^": "Object;size>,type>,offset>"
  },
  Pack: {
    "^": "Object;data>,_pack$_offset,_pack$_store,objects<,_pack$_cancel",
    _checkCancel$0: function() {
      var t1 = this._pack$_cancel;
      if (t1 != null)
        return t1.check$0();
      else
        return true;
    },
    _matchNumberOfObjects$0: function() {
      var t1, t2;
      t1 = {};
      t1._captured_num_0 = 0;
      t2 = this._pack$_offset;
      if (typeof t2 !== "number")
        return t2.$add();
      J.forEach$1$ax(J.sublist$2$ax(this.data, t2, t2 + 4), new R.Pack__matchNumberOfObjects_closure(t1));
      t2 = this._pack$_offset;
      if (typeof t2 !== "number")
        return t2.$add();
      this._pack$_offset = t2 + 4;
      return t1._captured_num_0;
    },
    _getObjectHeader$0: function() {
      var objectStartoffset, t1, t2, headByte, needMore, size, bitsToShift, t3, headByte0;
      objectStartoffset = this._pack$_offset;
      t1 = this.data;
      if (typeof objectStartoffset !== "number")
        return objectStartoffset.$add();
      this._pack$_offset = objectStartoffset + 1;
      t2 = J.getInterceptor$asx(t1);
      headByte = t2.$index(t1, objectStartoffset);
      if (typeof headByte !== "number")
        return H.iae(headByte);
      needMore = (128 & headByte) > 0;
      size = headByte & 15;
      for (bitsToShift = 4; needMore;) {
        t3 = this._pack$_offset;
        if (typeof t3 !== "number")
          return t3.$add();
        this._pack$_offset = t3 + 1;
        headByte0 = t2.$index(t1, t3);
        if (typeof headByte0 !== "number")
          return H.iae(headByte0);
        needMore = (128 & headByte0) > 0;
        size = (size | C.JSInt_methods._shlPositive$1(headByte0 & 127, bitsToShift)) >>> 0;
        bitsToShift += 7;
      }
      return new R.PackObjectHeader(size, (112 & headByte) >>> 4, objectStartoffset);
    },
    getObjectHash$2: function(type, data) {
      var sha1 = Z.FastSha$();
      sha1.add$1(0, O.codepointsToUtf8(U.utf16CodeUnitsToCodepoints(new H.CodeUnits(H.S(type) + " " + H.S(J.get$length$asx(data)) + "\u0000"), 0, null, 65533), 0, null));
      sha1.add$1(0, data);
      return sha1.close$0(0);
    },
    _padString$3: function(str, width, padding) {
      var t1, result, i;
      for (t1 = width - str.length, result = str, i = 0; i < t1; ++i)
        result = padding + result;
      return result;
    },
    findDeltaBaseOffset$1: function(header) {
      var offsetBytes, t1, t2, t3, hintAndOffsetBits, t4, offsetDelta, i;
      offsetBytes = [];
      t1 = this.data;
      t2 = J.getInterceptor$ax(t1);
      do {
        t3 = this._pack$_offset;
        if (typeof t3 !== "number")
          return t3.$add();
        t3 = t2.sublist$2(t1, t3, t3 + 1);
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        hintAndOffsetBits = this._padString$3(J.toRadixString$1$n(t3[0], 2), 8, "0");
        if (0 >= hintAndOffsetBits.length)
          return H.ioore(hintAndOffsetBits, 0);
        t3 = hintAndOffsetBits[0];
        offsetBytes.push(C.JSString_methods.substring$2(hintAndOffsetBits, 1, 8));
        t4 = this._pack$_offset;
        if (typeof t4 !== "number")
          return t4.$add();
        this._pack$_offset = t4 + 1;
      } while (t3 === "1");
      offsetDelta = H.Primitives_parseInt(C.JSArray_methods.reduce$1(offsetBytes, new R.Pack_findDeltaBaseOffset_closure()), 2, null);
      for (i = 1; i < offsetBytes.length; ++i)
        offsetDelta = J.$add$ns(offsetDelta, Math.pow(2, 7 * i));
      t1 = header.offset;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof offsetDelta !== "number")
        return H.iae(offsetDelta);
      return t1 - offsetDelta;
    },
    expandDeltifiedObject$1: function(object) {
      var completer, t1, baseObj;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      t1 = new R.Pack_expandDeltifiedObject_doExpand(this);
      if (J.$eq(J.get$type$x(object), "ofs_delta")) {
        this._pack$_offset = object.get$desiredOffset();
        baseObj = this._matchObjectData$1(this._getObjectHeader$0());
        switch (baseObj.type) {
          case "ofs_delta":
          case "ref_delta":
            return this.expandDeltifiedObject$1(baseObj).then$1(new R.Pack_expandDeltifiedObject_closure(object, t1));
          default:
            completer.complete$1(0, t1.call$2(baseObj, object));
        }
      } else
        completer.completeError$1("todo");
      return completer.future;
    },
    _matchObjectData$1: function(header) {
      var object, t1, shaBytes, objData;
      object = new Z.PackedObject(null, null, null, null, null, null, null, null);
      object.offset = header.offset;
      t1 = header.type;
      object.type = V.ObjectTypes_getTypeString(t1);
      switch (t1) {
        case 6:
          object.desiredOffset = this.findDeltaBaseOffset$1(header);
          break;
        case 7:
          t1 = this._pack$_offset;
          if (typeof t1 !== "number")
            return t1.$add();
          shaBytes = J.sublist$2$ax(this.data, t1, t1 + 20);
          t1 = this._pack$_offset;
          if (typeof t1 !== "number")
            return t1.$add();
          this._pack$_offset = t1 + 20;
          object.baseSha = J.map$1$ax(shaBytes, new R.Pack__matchObjectData_closure(this)).join$1(0, "");
          break;
        default:
          break;
      }
      objData = O.Zlib_inflate(this.data, header.size, this._pack$_offset);
      object.data = objData.data;
      t1 = this._pack$_offset;
      if (typeof t1 !== "number")
        return t1.$add();
      this._pack$_offset = t1 + objData.readLength;
      return object;
    },
    matchAndExpandObjectAtOffset$2: function(startOffset, dataType) {
      var object, t1;
      this._pack$_offset = startOffset;
      object = this._matchObjectData$1(this._getObjectHeader$0());
      switch (object.type) {
        case "ofs_delta":
        case "ref_delta":
          return this.expandDeltifiedObject$1(object);
        default:
          t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
          t1._asyncComplete$1(object);
          return t1;
      }
    },
    parseAll$1: function(progress) {
      var numObjects, deferredObjects, parse, expandDeltified, iter, e, st, t1, t2, t3, version, exception;
      try {
        numObjects = null;
        deferredObjects = [];
        t1 = this.data;
        t2 = this._pack$_offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t3 = J.getInterceptor$ax(t1);
        if (C.Utf8Codec_false.decode$1(t3.sublist$2(t1, t2, t2 + 4)) === "PACK") {
          t2 = this._pack$_offset;
          if (typeof t2 !== "number")
            return t2.$add();
          this._pack$_offset = t2 + 4;
        } else
          H.throwExpression("Couldn't match PACK");
        t2 = this._pack$_offset;
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = t3.sublist$2(t1, t2, t2 + 4);
        if (3 >= t2.length)
          return H.ioore(t2, 3);
        version = t2[3];
        t2 = this._pack$_offset;
        if (typeof t2 !== "number")
          return t2.$add();
        this._pack$_offset = t2 + 4;
        if (!J.$eq(version, 2))
          H.throwExpression("expected packfile version 2 but got " + H.S(version));
        numObjects = this._matchNumberOfObjects$0();
        parse = new R.Pack_parseAll_parse(this, deferredObjects);
        expandDeltified = new R.Pack_parseAll_expandDeltified(this);
        t1 = numObjects;
        if (typeof t1 !== "number")
          return H.iae(t1);
        iter = Array(t1);
        t1 = N.FutureHelper_forEachNonBlockingUI(iter, parse).then$1(new R.Pack_parseAll_closure(deferredObjects, expandDeltified));
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        st = H.getTraceFromException(exception);
        return P.Future_Future$error(e, st, null);
      }
    },
    applyDelta$2: function(baseData, deltaData) {
      var t1, stream, t2, resultLength, resultData, resultOffset, copyFromResult, t3, t4, opcode, copyOffset, value, shift, i, copyLength, sublist;
      t1 = new R.Pack_applyDelta_matchLength();
      stream = new R.DeltaDataStream(deltaData, 0);
      t2 = J.getInterceptor$asx(baseData);
      if (!J.$eq(t1.call$1(stream), t2.get$length(baseData)))
        throw H.wrapException("Delta Error: base length not equal to length of given base data");
      resultLength = t1.call$1(stream);
      if (typeof resultLength !== "number")
        return H.iae(resultLength);
      resultData = Array(resultLength);
      resultData.fixed$length = Array;
      t1 = J.getInterceptor$asx(deltaData);
      resultOffset = 0;
      copyFromResult = null;
      while (true) {
        t3 = stream.offset;
        t4 = t1.get$length(deltaData);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(t3 < t4))
          break;
        opcode = t1.$index(deltaData, stream.offset);
        ++stream.offset;
        t3 = J.getInterceptor(opcode);
        if (t3.$eq(opcode, 0))
          throw H.wrapException("Don't know what to do with a delta opcode 0");
        else if (t3.$and(opcode, 128) !== 0) {
          for (copyOffset = 0, value = null, shift = 0, i = 0; i < 4; ++i) {
            t3 = J.getInterceptor$n(opcode);
            if (t3.$and(opcode, 1) !== 0) {
              value = t1.$index(deltaData, stream.offset);
              ++stream.offset;
              copyOffset += J.$shl$n(value, shift);
            }
            opcode = t3.$shr(opcode, 1);
            shift += 8;
          }
          for (copyLength = 0, shift = 0, i = 0; i < 2; ++i) {
            t3 = J.getInterceptor$n(opcode);
            if (t3.$and(opcode, 1) !== 0) {
              value = t1.$index(deltaData, stream.offset);
              ++stream.offset;
              copyLength += J.$shl$n(value, shift);
            }
            opcode = t3.$shr(opcode, 1);
            shift += 8;
          }
          if (copyLength === 0)
            copyLength = 65536;
          copyFromResult = J.$and$n(opcode, 1);
          sublist = t2.sublist$2(baseData, copyOffset, copyOffset + copyLength);
          C.JSArray_methods.setAll$2(resultData, resultOffset, sublist);
          resultOffset += sublist.length;
        } else if (t3.$and(opcode, 128) === 0) {
          t3 = stream.offset;
          if (typeof opcode !== "number")
            return H.iae(opcode);
          sublist = t1.sublist$2(deltaData, t3, t3 + opcode);
          C.JSArray_methods.setAll$2(resultData, resultOffset, sublist);
          resultOffset += sublist.length;
          stream.offset += opcode;
        }
      }
      return resultData;
    },
    static: {Pack_createPackFiles: [function(store, result) {
        var t1, packSha, packIdxData, sortedShas, sha1, packName;
        t1 = J.getInterceptor$x(result);
        packSha = J.sublist$1$ax(t1.get$data(result), J.$sub$n(J.get$length$asx(t1.get$data(result)), 20));
        packIdxData = L.PackIndex_writePackIndex(result.get$objects(), packSha);
        sortedShas = C.NativeUint8List_methods.sublist$2(packIdxData, 1032, 1032 + result.get$objects().length * 20);
        sha1 = Z.FastSha$();
        sha1.add$1(0, sortedShas);
        packName = "pack-" + V.shaBytesToString(sha1.close$0(0));
        return B.FileOps_createDirectoryRecursive(J.get$root$x(store), ".git/objects").then$1(new R.Pack_createPackFiles_closure(store, result, packIdxData, packName));
      }, "call$2", "Pack_createPackFiles$closure", 4, 0, 78, 39, 50]}
  },
  Pack__matchNumberOfObjects_closure: {
    "^": "Closure:2;_pack$_box_0",
    call$1: function($byte) {
      var t1, num;
      t1 = this._pack$_box_0;
      num = t1._captured_num_0 << 8 >>> 0;
      t1._captured_num_0 = num;
      if (typeof $byte !== "number")
        return H.iae($byte);
      t1._captured_num_0 = num + $byte;
    }
  },
  Pack_findDeltaBaseOffset_closure: {
    "^": "Closure:47;",
    call$2: function(memo, el) {
      return J.$add$ns(memo, el);
    }
  },
  Pack_expandDeltifiedObject_doExpand: {
    "^": "Closure:48;_pack$_captured_this_0",
    call$2: function(baseObj, deltaObj) {
      var t1, t2;
      t1 = J.getInterceptor$x(baseObj);
      t2 = J.getInterceptor$x(deltaObj);
      t2.set$type(deltaObj, t1.get$type(baseObj));
      t2.set$data(deltaObj, this._pack$_captured_this_0.applyDelta$2(t1.get$data(baseObj), t2.get$data(deltaObj)));
      return deltaObj;
    }
  },
  Pack_expandDeltifiedObject_closure: {
    "^": "Closure:46;_captured_object_1,_captured_doExpand_2",
    call$1: [function(expandedObject) {
      return this._captured_doExpand_2.call$2(expandedObject, this._captured_object_1);
    }, null, null, 2, 0, null, 71, "call"]
  },
  Pack__matchObjectData_closure: {
    "^": "Closure:49;_pack$_captured_this_0",
    call$1: [function($byte) {
      this._pack$_captured_this_0._padString$3(J.toRadixString$1$n($byte, 16), 2, "0");
    }, null, null, 2, 0, null, 72, "call"]
  },
  Pack_parseAll_parse: {
    "^": "Closure:50;_pack$_captured_this_0,_captured_deferredObjects_1",
    call$1: function(_) {
      var object, t1;
      t1 = this._pack$_captured_this_0;
      t1._checkCancel$0();
      t1._pack$_offset = t1._pack$_offset;
      object = t1._matchObjectData$1(t1._getObjectHeader$0());
      object.set$crc(T.getCrc32(J.sublist$2$ax(t1.data, J.get$offset$x(object), t1._pack$_offset), 0));
      switch (J.get$type$x(object)) {
        case "ofs_delta":
        case "ref_delta":
          this._captured_deferredObjects_1.push(object);
          break;
        default:
          object.set$shaBytes(t1.getObjectHash$2(J.get$type$x(object), J.get$data$x(object)));
          J.set$data$x(object, null);
          break;
      }
      t1.objects.push(object);
      t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1._asyncComplete$1(null);
      return t1;
    }
  },
  Pack_parseAll_expandDeltified: {
    "^": "Closure:51;_pack$_captured_this_2",
    call$1: function(obj) {
      var t1 = this._pack$_captured_this_2;
      t1._checkCancel$0();
      return t1.expandDeltifiedObject$1(obj).then$1(new R.Pack_parseAll_expandDeltified_closure(t1));
    }
  },
  Pack_parseAll_expandDeltified_closure: {
    "^": "Closure:46;_pack$_captured_this_3",
    call$1: [function(deltifiedObj) {
      deltifiedObj.set$shaBytes(this._pack$_captured_this_3.getObjectHash$2(J.get$type$x(deltifiedObj), J.get$data$x(deltifiedObj)));
      J.set$data$x(deltifiedObj, null);
    }, null, null, 2, 0, null, 73, "call"]
  },
  Pack_parseAll_closure: {
    "^": "Closure:2;_captured_deferredObjects_4,_captured_expandDeltified_5",
    call$1: [function(_) {
      return N.FutureHelper_forEachNonBlockingUI(this._captured_deferredObjects_4, this._captured_expandDeltified_5);
    }, null, null, 2, 0, null, 26, "call"]
  },
  Pack_applyDelta_matchLength: {
    "^": "Closure:52;",
    call$1: function(stream) {
      var data, offset, t1, result, currentShift, $byte, offset0;
      data = stream.data;
      offset = stream.offset;
      for (t1 = J.getInterceptor$asx(data), result = 0, currentShift = 0, $byte = 128; J.$and$n($byte, 128) !== 0; offset = offset0) {
        offset0 = offset + 1;
        $byte = t1.$index(data, offset);
        result += C.JSInt_methods._shlPositive$1(J.$and$n($byte, 127), currentShift);
        currentShift += 7;
      }
      stream.offset = offset;
      return result;
    }
  },
  Pack_createPackFiles_closure: {
    "^": "Closure:27;_pack$_captured_store_0,_pack$_captured_result_1,_captured_packIdxData_2,_captured_packName_3",
    call$1: [function(objectsDir) {
      var t1, t2;
      t1 = this._captured_packName_3;
      t2 = this._pack$_captured_result_1;
      return B.FileOps_createFileWithContent(objectsDir, "pack/" + t1 + ".pack", J.get$data$x(t2), "blob").then$1(new R.Pack_createPackFiles__closure(this._pack$_captured_store_0, t2, this._captured_packIdxData_2, t1, objectsDir));
    }, null, null, 2, 0, null, 74, "call"]
  },
  Pack_createPackFiles__closure: {
    "^": "Closure:2;_captured_store_4,_captured_result_5,_captured_packIdxData_6,_captured_packName_7,_captured_objectsDir_8",
    call$1: [function(_) {
      var t1, t2;
      t1 = this._captured_objectsDir_8;
      t2 = this._captured_packIdxData_6;
      return B.FileOps_createFileWithContent(t1, "pack/" + this._captured_packName_7 + ".idx", t2, "blob").then$1(new R.Pack_createPackFiles___closure(this._captured_store_4, this._captured_result_5, t2, t1));
    }, null, null, 2, 0, null, 26, "call"]
  },
  Pack_createPackFiles___closure: {
    "^": "Closure:2;_captured_store_9,_captured_result_10,_captured_packIdxData_11,_captured_objectsDir_12",
    call$1: [function(_) {
      var t1, t2, packIdx;
      t1 = this._captured_store_9;
      t2 = this._captured_objectsDir_12;
      t1.set$objectDir(t2);
      packIdx = L.PackIndex$(this._captured_packIdxData_11);
      t1.get$packs().push(new S.PackEntry(new R.Pack(J.get$data$x(this._captured_result_10), 0, t1, [], null), packIdx));
      t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1._asyncComplete$1(t2);
      return t1;
    }, null, null, 2, 0, null, 26, "call"]
  },
  DeltaDataStream: {
    "^": "Object;data>,offset>"
  }
}],
["git.pack.index", "package:hetimagit/src/git/pack_index.dart", , L, {
  "^": "",
  PackIndex: {
    "^": "Object;_byteData,_shaList,_numObjects,_offsetsOffset",
    _compareShas$2: function(sha1, sha2) {
      var t1, t2, i, t3;
      for (t1 = J.getInterceptor$asx(sha1), t2 = sha2.length, i = 1; i < 20; ++i) {
        t3 = t1.$index(sha1, i);
        if (i >= t2)
          return H.ioore(sha2, i);
        if (!J.$eq(t3, sha2[i]))
          return J.$sub$n(t1.$index(sha1, i), sha2[i]);
      }
      return 0;
    },
    getObjectOffset$1: function(sha) {
      var fanIndex, t1, t2, t3, sliceStart, sliceEnd, index, split, byteOffset, compare;
      fanIndex = J.$index$asx(sha, 0);
      t1 = J.getInterceptor$n(fanIndex);
      if (t1.$gt(fanIndex, 0)) {
        t2 = this._byteData;
        t3 = J.$mul$ns(t1.$sub(fanIndex, 1), 4);
        if (typeof t3 !== "number")
          return H.iae(t3);
        sliceStart = t2.getUint32(8 + t3, false);
      } else
        sliceStart = 0;
      t2 = this._byteData;
      t1 = t1.$mul(fanIndex, 4);
      if (typeof t1 !== "number")
        return H.iae(t1);
      sliceEnd = t2.getUint32(8 + t1, false) - 1;
      while (true) {
        if (!(sliceEnd >= sliceStart)) {
          index = null;
          break;
        }
        split = sliceStart + C.JSNumber_methods.toInt$0(Math.floor((sliceEnd - sliceStart) / 2));
        byteOffset = split * 20;
        t1 = this._shaList;
        compare = this._compareShas$2(sha, new Uint8Array(t1.subarray(byteOffset, C.NativeUint8List_methods._checkSublistArguments$3(t1, byteOffset, byteOffset + 20, t1.length))));
        t1 = J.getInterceptor(compare);
        if (t1.$eq(compare, 0)) {
          index = split;
          break;
        } else if (t1.$lt(compare, 0))
          sliceEnd = split - 1;
        else
          sliceStart = split + 1;
      }
      if (index == null)
        return -1;
      return this._byteData.getUint32(this._offsetsOffset + index * 4, false);
    },
    PackIndex$1: function(data) {
      var t1, buffer, signature, version, numObjects, shaTableLen;
      t1 = J.getInterceptor(data);
      buffer = !!t1.$isUint8List ? t1.get$buffer(data) : new Uint8Array(H._ensureNativeList(data)).buffer;
      buffer.toString;
      t1 = H.NativeByteData_NativeByteData$view(buffer, 0, null);
      this._byteData = t1;
      signature = t1.getUint32(0, false);
      version = this._byteData.getUint32(4, false);
      if (signature !== 4285812579 || version !== 2)
        throw H.wrapException("Bad pack index header. Only version 2 is supported.");
      numObjects = this._byteData.getUint32(1028, false);
      shaTableLen = numObjects * 20;
      this._shaList = (buffer && C.NativeByteBuffer_methods).asUint8List$2(buffer, 1032, shaTableLen);
      this._offsetsOffset = 1032 + (shaTableLen + numObjects * 4);
      this._numObjects = numObjects;
    },
    static: {PackIndex$: function(data) {
        var t1 = new L.PackIndex(null, null, null, null);
        t1.PackIndex$1(data);
        return t1;
      }, PackIndex_writePackIndex: function(objects, packSha) {
        var t1, t2, t3, byteList, data, current, i, next, j, t4, sha1;
        t1 = {};
        t2 = objects.length;
        t3 = t2 * 4;
        byteList = new Uint8Array(H._checkLength(1032 + t2 * 20 + t3 + t3 + 40));
        (objects && C.JSArray_methods).sort$1(objects, new L.PackIndex_writePackIndex_closure());
        t3 = byteList.buffer;
        t3.toString;
        data = H.NativeByteData_NativeByteData$view(t3, 0, null);
        data.setUint32(0, 4285812579, false);
        data.setUint32(4, 2, false);
        t1._captured_byteOffset_0 = 8;
        for (current = 0, i = 0; i < objects.length; ++i, current = next) {
          t2 = objects[i].shaBytes;
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          next = t2[0];
          if (!J.$eq(next, current))
            for (j = current; t2 = J.getInterceptor$n(j), t2.$lt(j, next); j = t2.$add(j, 1)) {
              t3 = t1._captured_byteOffset_0;
              t4 = t2.$mul(j, 4);
              if (typeof t4 !== "number")
                return H.iae(t4);
              data.setUint32(t3 + t4, i, false);
            }
        }
        for (j = current; t2 = J.getInterceptor$n(j), t2.$lt(j, 256); j = t2.$add(j, 1)) {
          t3 = t1._captured_byteOffset_0;
          t4 = t2.$mul(j, 4);
          if (typeof t4 !== "number")
            return H.iae(t4);
          data.setUint32(t3 + t4, objects.length, false);
        }
        t1._captured_byteOffset_0 += 1024;
        C.JSArray_methods.forEach$1(objects, new L.PackIndex_writePackIndex_closure0(t1, data));
        C.JSArray_methods.forEach$1(objects, new L.PackIndex_writePackIndex_closure1(t1, data));
        C.JSArray_methods.forEach$1(objects, new L.PackIndex_writePackIndex_closure2(t1, data));
        for (i = 0; i < 20; ++i) {
          t2 = t1._captured_byteOffset_0++;
          if (i >= packSha.length)
            return H.ioore(packSha, i);
          data.setUint8(t2, packSha[i]);
        }
        sha1 = Z.FastSha$();
        sha1.add$1(0, C.NativeUint8List_methods.toList$0(C.NativeUint8List_methods.sublist$2(byteList, 0, t1._captured_byteOffset_0)));
        C.JSArray_methods.forEach$1(sha1.close$0(0), new L.PackIndex_writePackIndex_closure3(t1, data));
        return byteList;
      }}
  },
  PackIndex_writePackIndex_closure: {
    "^": "Closure:6;",
    call$2: function(obj1, obj2) {
      var i, t1, t2;
      for (i = 0; i < 20; ++i) {
        t1 = obj1.get$shaBytes();
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1 = t1[i];
        t2 = obj2.get$shaBytes();
        if (i >= t2.length)
          return H.ioore(t2, i);
        if (!J.$eq(t1, t2[i])) {
          t1 = obj1.get$shaBytes();
          if (i >= t1.length)
            return H.ioore(t1, i);
          t1 = t1[i];
          t2 = obj2.get$shaBytes();
          if (i >= t2.length)
            return H.ioore(t2, i);
          return J.$sub$n(t1, t2[i]);
        }
      }
      return 0;
    }
  },
  PackIndex_writePackIndex_closure0: {
    "^": "Closure:46;_index$_box_0,_captured_data_1",
    call$1: function(obj) {
      var t1, t2, j, t3, t4;
      for (t1 = this._captured_data_1, t2 = this._index$_box_0, j = 0; j < 20; ++j) {
        t3 = t2._captured_byteOffset_0++;
        t4 = obj.get$shaBytes();
        if (j >= t4.length)
          return H.ioore(t4, j);
        t1.setUint8(t3, t4[j]);
      }
    }
  },
  PackIndex_writePackIndex_closure1: {
    "^": "Closure:46;_index$_box_0,_captured_data_2",
    call$1: function(obj) {
      var t1 = this._index$_box_0;
      this._captured_data_2.setUint32(t1._captured_byteOffset_0, obj.get$crc(), false);
      t1._captured_byteOffset_0 += 4;
    }
  },
  PackIndex_writePackIndex_closure2: {
    "^": "Closure:46;_index$_box_0,_captured_data_3",
    call$1: function(obj) {
      var t1 = this._index$_box_0;
      this._captured_data_3.setUint32(t1._captured_byteOffset_0, J.get$offset$x(obj), false);
      t1._captured_byteOffset_0 += 4;
    }
  },
  PackIndex_writePackIndex_closure3: {
    "^": "Closure:49;_index$_box_0,_captured_data_4",
    call$1: function($byte) {
      this._captured_data_4.setUint8(this._index$_box_0._captured_byteOffset_0, $byte);
    }
  }
}],
["git.upload_pack_parser", "package:hetimagit/src/git/upload_pack_parser.dart", , R, {
  "^": "",
  PktLine: {
    "^": "Object;offset>,length>"
  },
  PackParseResult: {
    "^": "Object;objects<,shallow<,common,data>"
  },
  UploadPackParser: {
    "^": "Object;_upload_pack_parser$_offset,objects<,data*,_upload_pack_parser$_cancel",
    parse$3: function(inData, store, progress) {
      var t1, pktLine, common, pktLineStr, t2, t3, t4, pktString, gotAckorNak, matches, it, packDataLines;
      t1 = {};
      this.data = inData;
      Date.now();
      pktLine = this._nextPktLine$0();
      common = [];
      pktLineStr = this._getPktLine$1(pktLine);
      t1._captured_shallow_0 = null;
      while (true) {
        if (!(pktLineStr.length > 6 && C.JSString_methods.substring$2(pktLineStr, 0, 7) === "shallow"))
          break;
        pktLine = this._nextPktLine$1(true);
        t1._captured_shallow_0 = C.JSString_methods.substring$1(pktLineStr, 8);
        t2 = this.data;
        t3 = pktLine.offset;
        t4 = pktLine.length;
        if (typeof t4 !== "number")
          return H.iae(t4);
        t4 = J.sublist$2$ax(t2, t3, t3 + t4);
        pktString = new P.Utf8Decoder(false).convert$1(t4);
        pktLineStr = pktString;
      }
      gotAckorNak = false;
      while (true) {
        if (pktLineStr !== "NAK\n")
          t2 = pktLineStr.length > 3 && C.JSString_methods.substring$2(pktLineStr, 0, 3) === "ACK";
        else
          t2 = true;
        if (!t2)
          break;
        matches = new H.JSSyntaxRegExp("ACK ([0-9a-fA-F]{40}) common", H.JSSyntaxRegExp_makeNative("ACK ([0-9a-fA-F]{40}) common", false, true, false), null, null).allMatches$1(0, pktLineStr);
        if (!matches.get$isEmpty(matches)) {
          it = matches.get$iterator(matches);
          if (!it.moveNext$0())
            H.throwExpression(H.IterableElementError_noElement());
          common.push(it.get$current().group$1(1));
        }
        pktLine = this._nextPktLine$0();
        t2 = this.data;
        t3 = pktLine.offset;
        t4 = pktLine.length;
        if (typeof t4 !== "number")
          return H.iae(t4);
        t4 = J.sublist$2$ax(t2, t3, t3 + t4);
        pktString = new P.Utf8Decoder(false).convert$1(t4);
        pktLineStr = pktString;
        gotAckorNak = true;
      }
      if (!gotAckorNak)
        throw H.wrapException("got neither ACk nor NAK in upload pack response.");
      packDataLines = [];
      for (; pktLine != null;) {
        t2 = this.data;
        t3 = pktLine.offset;
        switch (J.$index$asx(t2, t3)) {
          case 1:
            t2 = this.data;
            t4 = pktLine.length;
            if (typeof t4 !== "number")
              return H.iae(t4);
            packDataLines.push(J.sublist$2$ax(t2, t3 + 1, t3 + t4));
            break;
          case 2:
            break;
          default:
            throw H.wrapException("fatal error in packet line.");
        }
        pktLine = this._nextPktLine$0();
      }
      return B.FileOps_readBlob(W.Blob_Blob(packDataLines, null, null), "ArrayBuffer").then$1(new R.UploadPackParser_parse_closure(t1, this, store, progress, common));
    },
    _nextPktLine$1: function(isShallow) {
      var t1, t2, $length, pktLine;
      t1 = this.data;
      t2 = this._upload_pack_parser$_offset;
      t2 = J.sublist$2$ax(t1, t2, t2 + 4);
      $length = H.Primitives_parseInt(new P.Utf8Decoder(false).convert$1(t2), 16, null);
      this._upload_pack_parser$_offset += 4;
      t1 = J.getInterceptor($length);
      if (t1.$eq($length, 0)) {
        if (isShallow)
          return this._nextPktLine$0();
        pktLine = null;
      } else {
        pktLine = new R.PktLine(this._upload_pack_parser$_offset, t1.$sub($length, 4));
        t1 = t1.$sub($length, 4);
        t2 = this._upload_pack_parser$_offset;
        if (typeof t1 !== "number")
          return H.iae(t1);
        this._upload_pack_parser$_offset = t2 + t1;
      }
      return pktLine;
    },
    _nextPktLine$0: function() {
      return this._nextPktLine$1(false);
    },
    _getPktLine$1: function(pktLine) {
      var t1, t2, t3;
      t1 = this.data;
      t2 = pktLine.offset;
      t3 = pktLine.length;
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = J.sublist$2$ax(t1, t2, t2 + t3);
      return new P.Utf8Decoder(false).convert$1(t3);
    }
  },
  UploadPackParser_parse_closure: {
    "^": "Closure:2;_upload_pack_parser$_box_0,_upload_pack_parser$_captured_this_1,_upload_pack_parser$_captured_store_2,_captured_progress_3,_captured_common_4",
    call$1: [function(data) {
      var t1, pack;
      t1 = this._upload_pack_parser$_captured_this_1;
      pack = new R.Pack(data, 0, this._upload_pack_parser$_captured_store_2, [], t1._upload_pack_parser$_cancel);
      return pack.parseAll$1(this._captured_progress_3).then$1(new R.UploadPackParser_parse__closure(this._upload_pack_parser$_box_0, t1, this._captured_common_4, pack));
    }, null, null, 2, 0, null, 31, "call"]
  },
  UploadPackParser_parse__closure: {
    "^": "Closure:2;_upload_pack_parser$_box_0,_upload_pack_parser$_captured_this_5,_captured_common_6,_captured_pack_7",
    call$1: [function(_) {
      var t1, t2;
      t1 = this._captured_pack_7;
      t2 = t1.objects;
      this._upload_pack_parser$_captured_this_5.objects = t2;
      return new R.PackParseResult(t2, this._upload_pack_parser$_box_0._captured_shallow_0, this._captured_common_6, t1.data);
    }, null, null, 2, 0, null, 26, "call"]
  }
}],
["git.utils", "package:hetimagit/src/git/utils.dart", , V, {
  "^": "",
  shaToBytes: function(sha) {
    var bytes, t1, i, t2;
    bytes = [];
    t1 = J.getInterceptor$asx(sha);
    i = 0;
    while (true) {
      t2 = t1.get$length(sha);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(i < t2))
        break;
      bytes.push(H.Primitives_parseInt(C.JSString_methods.$add(C.JSString_methods.$add("0x", t1.$index(sha, i)), t1.$index(sha, i + 1)), null, null));
      i += 2;
    }
    return bytes;
  },
  shaBytesToString: function(sha) {
    var buf, t1, len, i, t2, s;
    buf = new P.StringBuffer("");
    t1 = J.getInterceptor$asx(sha);
    len = t1.get$length(sha);
    if (typeof len !== "number")
      return H.iae(len);
    i = 0;
    t2 = "";
    for (; i < len; ++i) {
      s = J.toRadixString$1$n(t1.$index(sha, i), 16);
      if (s.length === 1)
        buf._contents += "0";
      t2 = buf._contents += s;
    }
    return t2.charCodeAt(0) == 0 ? t2 : t2;
  },
  nopFunction: [function() {
    return;
  }, "call$0", "nopFunction$closure", 0, 0, 1],
  Cancel: {
    "^": "Object;",
    check$0: function() {
      if (this._utils1$_cancel) {
        this.performCancel$0();
        return false;
      } else
        return true;
    }
  }
}],
["git.zlib", "package:hetimagit/src/git/zlib.dart", , O, {
  "^": "",
  Zlib_inflate: function(data, expectedLength, offset) {
    var stream, t1, t2, t3, cmf, flg, method, buffer;
    stream = T.InputStream$(data, 0, null, offset);
    t1 = stream.buffer;
    t2 = stream.offset;
    if (typeof t2 !== "number")
      return t2.$add();
    stream.offset = t2 + 1;
    t3 = J.getInterceptor$asx(t1);
    cmf = t3.$index(t1, t2);
    t2 = stream.offset;
    if (typeof t2 !== "number")
      return t2.$add();
    stream.offset = t2 + 1;
    flg = t3.$index(t1, t2);
    t2 = J.getInterceptor$n(cmf);
    method = t2.$and(cmf, 8);
    t2.$shr(cmf, 3);
    if (method !== 8)
      H.throwExpression(T.ArchiveException$("Only DEFLATE compression supported: " + method));
    t1 = J.getInterceptor$n(flg);
    t1.$and(flg, 16);
    t3 = t1.$and(flg, 32);
    t1.$and(flg, 64);
    t1 = t2.$shl(cmf, 8);
    if (typeof flg !== "number")
      return H.iae(flg);
    if (C.JSNumber_methods.$mod(t1 + flg, 31) !== 0)
      H.throwExpression(T.ArchiveException$("Invalid FCHECK"));
    if (t3 >>> 5 !== 0) {
      stream.readUint32$0();
      H.throwExpression(T.ArchiveException$("FDICT Encoding not currently supported"));
    }
    t1 = T.HuffmanTable$(C.List_2Bc);
    t2 = T.HuffmanTable$(C.List_X3d);
    t3 = new T.OutputStream(0, 0, new Uint8Array(H._checkLength(32768)));
    new T.Inflate(stream, t3, 0, 0, 0, t1, t2)._inflate$0();
    t2 = t3._archive$_buffer.buffer;
    buffer = (t2 && C.NativeByteBuffer_methods).asUint8List$2(t2, 0, t3.length);
    stream.readUint32$0();
    t1 = stream.offset;
    t2 = stream.start;
    if (typeof t1 !== "number")
      return t1.$sub();
    if (typeof t2 !== "number")
      return H.iae(t2);
    return new O.ZlibResult(buffer, t1 - t2);
  },
  ZlibResult: {
    "^": "Object;data>,readLength"
  }
}],
["hetimacore", "package:hetimacore/hetimacore.dart", , L, {
  "^": "",
  HetimaBuilder: {
    "^": "Object;"
  }
}],
["hetimacore_cl", "package:hetimacore/hetimacore_cl.dart", , S, {
  "^": "",
  HetimaFile: {
    "^": "HetimaReadBuffer;"
  },
  HetimaReadBuffer: {
    "^": "Object;"
  },
  ReadResult: {
    "^": "Object;status>,buffer>"
  },
  HetimaFileToBuilder: {
    "^": "HetimaBuilder;mFile,completerFin,_immutable",
    getByteFuture$2: function(index, $length) {
      var c, t1;
      c = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      t1 = this.mFile;
      if (typeof $length !== "number")
        return H.iae($length);
      t1.read$2(index, index + $length).then$1(new S.HetimaFileToBuilder_getByteFuture_closure(c)).catchError$1(new S.HetimaFileToBuilder_getByteFuture_closure0(c));
      return c.future;
    },
    getLength$0: function() {
      return this.mFile.getLength$0();
    }
  },
  HetimaFileToBuilder_getByteFuture_closure: {
    "^": "Closure:53;_captured_c_0",
    call$1: [function(r) {
      var t1 = J.getInterceptor$x(r);
      if (t1.get$status(r) === 1)
        this._captured_c_0.complete$1(0, J.toList$0$ax(t1.get$buffer(r)));
      else
        throw H.wrapException(P.Error$());
    }, null, null, 2, 0, null, 75, "call"]
  },
  HetimaFileToBuilder_getByteFuture_closure0: {
    "^": "Closure:2;_captured_c_1",
    call$1: [function(e) {
      this._captured_c_1.completeError$1(e);
    }, null, null, 2, 0, null, 3, "call"]
  },
  HetimaFileBlob: {
    "^": "HetimaFile;_mBlob",
    getLength$0: function() {
      var ret = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      ret.complete$1(0, J.get$size$x(this._mBlob));
      return ret.future;
    },
    read$2: function(start, end) {
      var t1, ret, reader;
      t1 = S.ReadResult;
      ret = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [t1])), [t1]);
      reader = new FileReader();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(reader, "load", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.HetimaFileBlob_read_closure(ret, reader)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(reader, "error", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.HetimaFileBlob_read_closure0(ret)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(reader, "abort", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.HetimaFileBlob_read_closure1(ret)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      reader.readAsArrayBuffer(J.slice$2$x(this._mBlob, start, end));
      return ret.future;
    }
  },
  HetimaFileBlob_read_closure: {
    "^": "Closure:54;_hetimacore_cl$_captured_ret_0,_captured_reader_1",
    call$1: [function(e) {
      var t1, t2;
      t1 = C.FileReader_methods.get$result(this._captured_reader_1);
      t2 = new S.ReadResult(-1, null);
      t2.status = 1;
      t2.buffer = t1;
      this._hetimacore_cl$_captured_ret_0.complete$1(0, t2);
    }, null, null, 2, 0, null, 3, "call"]
  },
  HetimaFileBlob_read_closure0: {
    "^": "Closure:55;_captured_ret_2",
    call$1: [function(e) {
      var t1 = new S.ReadResult(-1, null);
      t1.status = -1;
      t1.buffer = null;
      this._captured_ret_2.complete$1(0, t1);
    }, null, null, 2, 0, null, 3, "call"]
  },
  HetimaFileBlob_read_closure1: {
    "^": "Closure:54;_captured_ret_3",
    call$1: [function(e) {
      var t1 = new S.ReadResult(-1, null);
      t1.status = -1;
      t1.buffer = null;
      this._captured_ret_3.complete$1(0, t1);
    }, null, null, 2, 0, null, 3, "call"]
  }
}],
["hetimapatrinia", "hetimapad.dart", , K, {
  "^": "",
  main: [function() {
    var t1, t2, t3, t4;
    $.implementation = C.C__ProxyImplementation;
    t1 = $.get$editorFile();
    t2 = $.get$context();
    t3 = new B._ConfigProxy(J.$index$asx(J.$index$asx(t2, "ace"), "config"), null).loadModule$2("theme", "ace/theme/chrome");
    t4 = new B._ThemeProxy("ace/theme/chrome", null, t3);
    t4.HasProxy$async$1(t3);
    t1.set$theme(t4);
    t4 = t1._proxy.callMethod$2("getSession", null);
    $.implementation.toString;
    new B._EditSessionProxy(null, null, null, null, null, null, null, null, null, null, null, null, t4, null).set$mode(0, B._ModeProxy$("ace/mode/dart"));
    t1._proxy.callMethod$2("setReadOnly", [true]);
    t1 = $.get$editorNow();
    $.implementation.toString;
    t2 = new B._ConfigProxy(J.$index$asx(J.$index$asx(t2, "ace"), "config"), null).loadModule$2("theme", "ace/theme/chrome");
    t4 = new B._ThemeProxy("ace/theme/chrome", null, t2);
    t4.HasProxy$async$1(t2);
    t1.set$theme(t4);
    t1 = t1._proxy.callMethod$2("getSession", null);
    $.implementation.toString;
    new B._EditSessionProxy(null, null, null, null, null, null, null, null, null, null, null, null, t1, null).set$mode(0, B._ModeProxy$("ace/mode/dart"));
    K.enableAutocomplete($.get$editorNow());
    $.get$tab().init$0();
    t1 = J.get$onClick$x(document.querySelector("#com-clone-btn"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new K.main_closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = J.get$onClick$x(document.querySelector("#editor-file"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new K.main_closure0()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = J.get$onKeyDown$x(document.querySelector("#editor-file"));
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new K.main_closure1()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    H.setRuntimeTypeInfo(new P._ControllerStream($.get$tab()._controller), [null]).listen$1(new K.main_closure2());
  }, "call$0", "main$closure", 0, 0, 1],
  onClickClone: function() {
    var address, $location;
    P.print("click clone button");
    address = document.querySelector("#com-clone-address");
    P.print("click clone button " + H.S(J.get$value$x(address)));
    $location = new G.GitLocation(null, null);
    $location._utils$_name = "git_" + C.C__JSRandom.nextInt$1(100);
    $location.init$0().then$1(new K.onClickClone_closure(address, $location));
  },
  getRoot: function() {
    return U.HetiFileSystem_getFileSystem().then$1(new K.getRoot_closure());
  },
  updateList: function() {
    return $.currentDir.getList$0().then$1(new K.updateList_closure());
  },
  select: function(row, col) {
    var index, t1, entry;
    index = J.$tdiv$n(row, 3);
    t1 = J.getInterceptor(index);
    if (t1.$eq(index, 0) || J.$eq(t1.$sub(index, 1), $.currentDir.get$lastGetList().length)) {
      J.getParent$0$x($.currentDir).then$1(new K.select_closure());
      return;
    } else {
      index = t1.$sub(index, 1);
      $.currentDir.get$lastGetList();
      if (J.$lt$n(index, $.currentDir.get$lastGetList().length)) {
        t1 = $.currentDir.get$lastGetList();
        if (index >>> 0 !== index || index >= t1.length)
          return H.ioore(t1, index);
        entry = t1[index];
        t1 = J.getInterceptor(entry);
        if (!!t1.$isHetiDirectory) {
          $.currentDir = entry;
          K.updateList();
        } else if (!!t1.$isHetiFile) {
          P.print("#--f-- 001");
          entry.getHetimaBuilder$0().then$1(new K.select_closure0());
        }
      }
    }
  },
  enableAutocomplete: function(editor) {
    var langTools, t1;
    langTools = $.implementation.require$1("ace/ext/language_tools");
    $.implementation.toString;
    langTools.addCompleter$1(B._AutoCompleterReverseProxy$(new K.enableAutocomplete_closure()));
    t1 = P.LinkedHashMap_LinkedHashMap$_literal(["enableBasicAutocompletion", true, "enableSnippets", true], null, null);
    editor.toString;
    t1 = P.JsObject_JsObject$jsify(t1);
    editor._proxy.callMethod$2("setOptions", [t1]);
  },
  main_closure: {
    "^": "Closure:56;",
    call$1: [function(e) {
      P.print("#click clone button");
      K.onClickClone();
    }, null, null, 2, 0, null, 3, "call"]
  },
  main_closure0: {
    "^": "Closure:56;",
    call$1: [function(e) {
      var t1, t2, t3;
      t1 = $.get$editorFile()._proxy.callMethod$2("getCursorPosition", null);
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.$index(t1, "row");
      t2.$index(t1, "column");
      t3 = "#click file " + H.S(t3) + " ";
      t1 = $.get$editorFile()._proxy.callMethod$2("getCursorPosition", null);
      t2 = J.getInterceptor$asx(t1);
      t2.$index(t1, "row");
      P.print(t3 + H.S(t2.$index(t1, "column")));
      t1 = $.get$editorFile()._proxy.callMethod$2("getCursorPosition", null);
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.$index(t1, "row");
      t2.$index(t1, "column");
      t1 = $.get$editorFile()._proxy.callMethod$2("getCursorPosition", null);
      t2 = J.getInterceptor$asx(t1);
      t2.$index(t1, "row");
      K.select(t3, t2.$index(t1, "column"));
    }, null, null, 2, 0, null, 3, "call"]
  },
  main_closure1: {
    "^": "Closure:57;",
    call$1: [function(e) {
      var t1, t2, t3, t4;
      t1 = "#psuh key " + H.S(J.get$keyCode$x(e)) + " ";
      t2 = $.get$editorFile()._proxy.callMethod$2("getCursorPosition", null);
      t3 = J.getInterceptor$asx(t2);
      t4 = t3.$index(t2, "row");
      t3.$index(t2, "column");
      t4 = t1 + H.S(t4) + " ";
      t1 = $.get$editorFile()._proxy.callMethod$2("getCursorPosition", null);
      t2 = J.getInterceptor$asx(t1);
      t2.$index(t1, "row");
      P.print(t4 + H.S(t2.$index(t1, "column")));
      t1 = $.get$editorFile()._proxy.callMethod$2("getCursorPosition", null);
      t2 = J.getInterceptor$asx(t1);
      t4 = t2.$index(t1, "row");
      t2.$index(t1, "column");
      t1 = $.get$editorFile()._proxy.callMethod$2("getCursorPosition", null);
      t2 = J.getInterceptor$asx(t1);
      t2.$index(t1, "row");
      K.select(t4, t2.$index(t1, "column"));
    }, null, null, 2, 0, null, 3, "call"]
  },
  main_closure2: {
    "^": "Closure:5;",
    call$1: [function(s) {
      if (J.$eq(s, "#editor-file"))
        if ($.currentDir == null)
          K.getRoot().then$1(new K.main__closure());
        else
          K.updateList();
    }, null, null, 2, 0, null, 76, "call"]
  },
  main__closure: {
    "^": "Closure:2;",
    call$1: [function(_) {
      K.updateList();
    }, null, null, 2, 0, null, 26, "call"]
  },
  onClickClone_closure: {
    "^": "Closure:2;_captured_address_0,_captured_location_1",
    call$1: [function(_) {
      var t1, store, t2, clone;
      t1 = this._captured_location_1;
      P.print("### " + H.S(t1.entry));
      store = new S.ObjectStore(null, null, ".git/", [], null, null);
      store._rootDir = t1.entry;
      store.index = new M.Index(store, P.LinkedHashMap_LinkedHashMap$_empty(null, null), false, false, null, null, false);
      store.config = new O.Config(null, null, P.LinkedHashMap_LinkedHashMap$_empty(null, null), null);
      t2 = J.get$value$x(this._captured_address_0);
      t1 = new O.GitOptions(t1.entry, null, null, t2, null, store, null, null, null, 1, null);
      clone = new R.Clone(null, null, t1);
      t1.branchName = "master";
      t1.progressCallback = V.nopFunction$closure();
      clone._clone$_cancel = new R.CloneCancel(false, null, null);
      t1 = "clone " + H.S(t2);
      t2 = new P.Stopwatch(null, null);
      H.Primitives_initTicker();
      $.Stopwatch__frequency = $.Primitives_timerFrequency;
      t2.start$0(0);
      clone._stopwatch = new N.PrintProfiler(t1, false, 0, t2);
      clone._clone$0().then$1(new K.onClickClone__closure());
    }, null, null, 2, 0, null, 26, "call"]
  },
  onClickClone__closure: {
    "^": "Closure:2;",
    call$1: [function(_) {
    }, null, null, 2, 0, null, 26, "call"]
  },
  getRoot_closure: {
    "^": "Closure:58;",
    call$1: [function(fs) {
      $.currentDir = J.get$root$x(fs);
    }, null, null, 2, 0, null, 77, "call"]
  },
  updateList_closure: {
    "^": "Closure:59;",
    call$1: [function(l) {
      var b, t1, e, t2;
      b = new P.StringBuffer("");
      t1 = ">>" + H.S(J.get$fullPath$x($.currentDir)) + "\n";
      b._contents = t1;
      t1 += "..";
      b._contents = t1;
      b._contents = t1 + "\n--";
      for (t1 = J.get$iterator$ax(l); t1.moveNext$0();) {
        e = t1.get$current();
        b._contents += "\n---\n";
        t2 = b._contents += H.S(J.get$name$x(e));
        b._contents = t2 + "\n--";
      }
      t1 = b._contents += "---\n";
      t1 += "..";
      b._contents = t1;
      t1 += "\n--\n";
      b._contents = t1;
      $.get$editorFile().setValue$1(t1.charCodeAt(0) == 0 ? t1 : t1);
    }, null, null, 2, 0, null, 78, "call"]
  },
  select_closure: {
    "^": "Closure:60;",
    call$1: [function(d) {
      if (d != null) {
        $.currentDir = d;
        K.updateList();
      }
    }, null, null, 2, 0, null, 52, "call"]
  },
  select_closure0: {
    "^": "Closure:61;",
    call$1: [function(b) {
      P.print("#--f-- 002");
      return b.getLength$0().then$1(new K.select__closure(b)).then$1(new K.select__closure0()).catchError$1(new K.select__closure1());
    }, null, null, 2, 0, null, 79, "call"]
  },
  select__closure: {
    "^": "Closure:49;_captured_b_0",
    call$1: [function($length) {
      P.print("#--f-- 003");
      return this._captured_b_0.getByteFuture$2(0, $length);
    }, null, null, 2, 0, null, 80, "call"]
  },
  select__closure0: {
    "^": "Closure:62;",
    call$1: [function(l) {
      P.print("#--f-- 004" + H.S(C.Utf8Codec_false.decode$1(l)));
      $.get$tab().selectTab$1("#m01_now");
      $.get$editorNow().setValue$1(C.Utf8Codec_false.decode$1(l));
      $.get$editorNow()._proxy.callMethod$2("focus", null);
      P.print("#--f-- 005");
    }, null, null, 2, 0, null, 78, "call"]
  },
  select__closure1: {
    "^": "Closure:2;",
    call$1: [function(e) {
    }, null, null, 2, 0, null, 3, "call"]
  },
  Tab: {
    "^": "Object;tabs,current,_controller",
    selectTab$1: function(id) {
      var i, t1;
      i = document.querySelector(id);
      t1 = J.getInterceptor(i);
      P.print("##click " + t1.toString$0(i));
      this.display$1(0, [id]);
      t1.get$classes(i).add$1(0, "selected");
      t1 = this.current;
      if (t1 != null && t1 !== i)
        J.get$classes$x(t1).remove$1(0, "selected");
      this.current = i;
      this.update$1([id]);
    },
    init$0: function() {
      var t1, t, t2, t3, t4, t5;
      for (t1 = this.tabs.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t = t1.get$current();
        t2 = J.get$onClick$x(document.querySelector(t));
        t3 = t2._eventType;
        t4 = t2._useCapture;
        t5 = new W._EventStreamSubscription(0, t2._target, t3, W._wrapZone(new K.Tab_init_closure(this, t)), t4);
        t5.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
        t2 = t5._html$_onData;
        if (t2 != null && t5._pauseCount <= 0)
          J.addEventListener$3$x(t5._target, t3, t2, t4);
      }
    },
    display$1: function(_, displayList) {
      var t1, t2, t, t3;
      for (t1 = this.tabs, t2 = t1.get$keys(), t2 = t2.get$iterator(t2); t2.moveNext$0();) {
        t = t2.get$current();
        if (C.JSArray_methods.contains$1(displayList, t)) {
          t3 = t1.$index(0, t);
          t3 = document.querySelector(t3).style;
          t3.display = "block";
        } else {
          t3 = t1.$index(0, t);
          t3 = document.querySelector(t3).style;
          t3.display = "none";
        }
      }
    },
    update$1: function(ids) {
      var t1, t2, t3, id, t4, t5;
      for (t1 = H.setRuntimeTypeInfo(new J.ArrayIterator(ids, 1, 0, null), [H.getTypeArgumentByIndex(ids, 0)]), t2 = this.tabs, t3 = this._controller; t1.moveNext$0();) {
        id = t1.__interceptors$_current;
        if (t2.containsKey$1(id)) {
          t4 = t2.$index(0, id);
          if (t3._state >= 4)
            H.throwExpression(t3._badEventState$0());
          t5 = t3._state;
          if ((t5 & 1) !== 0)
            t3._sendData$1(t4);
          else if ((t5 & 3) === 0) {
            t5 = t3._ensurePendingEvents$0();
            t4 = new P._DelayedData(t4, null);
            t4.$builtinTypeInfo = [H.getRuntimeTypeArgument(t3, "_StreamController", 0)];
            t5.add$1(0, t4);
          }
        }
      }
    }
  },
  Tab_init_closure: {
    "^": "Closure:56;_hetimapatrinia$_captured_this_0,_captured_t_1",
    call$1: [function(e) {
      this._hetimapatrinia$_captured_this_0.selectTab$1(this._captured_t_1);
    }, null, null, 2, 0, null, 3, "call"]
  },
  enableAutocomplete_closure: {
    "^": "Closure:63;",
    call$4: function(editor, session, position, prefix) {
      var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t1._asyncComplete$1([C.Completion_EGO]);
      return t1;
    }
  }
},
1],
["hetimapatrinia.file", "hetimafile.dart", , U, {
  "^": "",
  HetiEntry: {
    "^": "Object;",
    get$name: function(_) {
      return "";
    },
    get$fullPath: function(_) {
      return "";
    },
    isFile$0: [function(_) {
      return false;
    }, "call$0", "get$isFile", 0, 0, 17],
    isDirectory$0: [function(_) {
      return false;
    }, "call$0", "get$isDirectory", 0, 0, 17]
  },
  HetiDirectory: {
    "^": "HetiEntry;_directory,lastGetList<",
    getParent$0: function(_) {
      var ret = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      J.getParent$0$x(this._directory).then$1(new U.HetiDirectory_getParent_closure(ret));
      return ret.future;
    },
    isDirectory$0: [function(_) {
      return true;
    }, "call$0", "get$isDirectory", 0, 0, 17],
    get$name: function(_) {
      return J.$add$ns(J.get$name$x(this._directory), "/");
    },
    get$fullPath: function(_) {
      return J.get$fullPath$x(this._directory);
    },
    getList$0: function() {
      var ret, reader;
      ret = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      reader = J.createReader$0$x(this._directory);
      (reader && C.DirectoryReader_methods).readEntries$0(reader).then$1(new U.HetiDirectory_getList_closure(this, ret));
      return ret.future;
    }
  },
  HetiDirectory_getParent_closure: {
    "^": "Closure:30;_captured_ret_0",
    call$1: [function(e) {
      var t1, t2;
      t1 = this._captured_ret_0;
      if (e != null) {
        t2 = new U.HetiDirectory(null, []);
        t2._directory = e;
        t1.complete$1(0, t2);
      } else
        t1.complete$1(0, null);
    }, null, null, 2, 0, null, 3, "call"]
  },
  HetiDirectory_getList_closure: {
    "^": "Closure:64;_file$_captured_this_0,_captured_ret_1",
    call$1: [function(l) {
      var t1, t2, e, t3;
      t1 = this._file$_captured_this_0.lastGetList;
      C.JSArray_methods.set$length(t1, 0);
      for (t2 = J.get$iterator$ax(l); t2.moveNext$0();) {
        e = t2.get$current();
        if (J.get$isFile$x(e) === true) {
          t3 = new U.HetiFile(null);
          t3._file = H.interceptedTypeCast(e, "$isFileEntry");
          t1.push(t3);
        } else {
          t3 = new U.HetiDirectory(null, []);
          t3._directory = H.interceptedTypeCast(e, "$isDirectoryEntry");
          t1.push(t3);
        }
      }
      this._captured_ret_1.complete$1(0, t1);
    }, null, null, 2, 0, null, 78, "call"]
  },
  HetiFile: {
    "^": "HetiEntry;_file",
    get$name: function(_) {
      return this._file.name;
    },
    isFile$0: [function(_) {
      return true;
    }, "call$0", "get$isFile", 0, 0, 17],
    getHetimaBuilder$0: function() {
      var ret, t1;
      ret = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
      t1 = this._file;
      (t1 && C.FileEntry_methods).file$0(t1).then$1(new U.HetiFile_getHetimaBuilder_closure(ret)).catchError$1(new U.HetiFile_getHetimaBuilder_closure0(ret));
      return ret.future;
    }
  },
  HetiFile_getHetimaBuilder_closure: {
    "^": "Closure:65;_captured_ret_0",
    call$1: [function(f) {
      var ff, b;
      ff = new S.HetimaFileBlob(null);
      ff._mBlob = f;
      b = new S.HetimaFileToBuilder(null, H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]), false);
      b.mFile = ff;
      this._captured_ret_0.complete$1(0, b);
    }, null, null, 2, 0, null, 81, "call"]
  },
  HetiFile_getHetimaBuilder_closure0: {
    "^": "Closure:2;_captured_ret_1",
    call$1: [function(e) {
      this._captured_ret_1.completeError$1(e);
    }, null, null, 2, 0, null, 3, "call"]
  },
  HetiFileSystem: {
    "^": "Object;_fileSystem",
    get$root: function(_) {
      var t1 = new U.HetiDirectory(null, []);
      t1._directory = J.get$root$x(this._fileSystem);
      return t1;
    },
    static: {HetiFileSystem_getFileSystem: function() {
        var ret, t1;
        ret = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
        t1 = window;
        C.Window_methods._requestFileSystem$2(t1, 1, 104857600).then$1(new U.HetiFileSystem_getFileSystem_closure(ret)).catchError$1(new U.HetiFileSystem_getFileSystem_closure0(ret));
        return ret.future;
      }}
  },
  HetiFileSystem_getFileSystem_closure: {
    "^": "Closure:66;_captured_ret_0",
    call$1: [function(fileSystem) {
      var t1 = new U.HetiFileSystem(null);
      t1._fileSystem = fileSystem;
      this._captured_ret_0.complete$1(0, t1);
    }, null, null, 2, 0, null, 82, "call"]
  },
  HetiFileSystem_getFileSystem_closure0: {
    "^": "Closure:2;_captured_ret_1",
    call$1: [function(e) {
      this._captured_ret_1.completeError$1(e);
    }, null, null, 2, 0, null, 3, "call"]
  }
}],
["html_common", "dart:html_common", , P, {
  "^": "",
  convertDartToNative_Dictionary: function(dict) {
    var object;
    if (dict == null)
      return;
    object = {};
    dict.forEach$1(0, new P.convertDartToNative_Dictionary_closure(object));
    return object;
  },
  convertNativeToDart_DateTime: function(date) {
    return P.DateTime$fromMillisecondsSinceEpoch(date.getTime(), true);
  },
  convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
    var copies = [];
    return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
  },
  Device_isOpera: function() {
    var t1 = $.Device__isOpera;
    if (t1 == null) {
      t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
      $.Device__isOpera = t1;
    }
    return t1;
  },
  Device_isWebKit: function() {
    var t1 = $.Device__isWebKit;
    if (t1 == null) {
      t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
      $.Device__isWebKit = t1;
    }
    return t1;
  },
  Device_cssPrefix: function() {
    var prefix, t1;
    prefix = $.Device__cachedCssPrefix;
    if (prefix != null)
      return prefix;
    t1 = $.Device__isFirefox;
    if (t1 == null) {
      t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
      $.Device__isFirefox = t1;
    }
    if (t1 === true)
      prefix = "-moz-";
    else {
      t1 = $.Device__isIE;
      if (t1 == null) {
        t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
        $.Device__isIE = t1;
      }
      if (t1 === true)
        prefix = "-ms-";
      else
        prefix = P.Device_isOpera() === true ? "-o-" : "-webkit-";
    }
    $.Device__cachedCssPrefix = prefix;
    return prefix;
  },
  convertDartToNative_Dictionary_closure: {
    "^": "Closure:3;_captured_object_0",
    call$2: function(key, value) {
      this._captured_object_0[key] = value;
    }
  },
  convertNativeToDart_AcceptStructuredClone_findSlot: {
    "^": "Closure:67;_captured_values_0,_captured_copies_1",
    call$1: function(value) {
      var t1, $length, i, t2;
      t1 = this._captured_values_0;
      $length = t1.length;
      for (i = 0; i < $length; ++i) {
        t2 = t1[i];
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      t1.push(value);
      this._captured_copies_1.push(null);
      return $length;
    }
  },
  convertNativeToDart_AcceptStructuredClone_readSlot: {
    "^": "Closure:49;_captured_copies_2",
    call$1: function(i) {
      var t1 = this._captured_copies_2;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    }
  },
  convertNativeToDart_AcceptStructuredClone_writeSlot: {
    "^": "Closure:68;_captured_copies_3",
    call$2: function(i, x) {
      var t1 = this._captured_copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    }
  },
  convertNativeToDart_AcceptStructuredClone_walk: {
    "^": "Closure:2;_captured_mustCopy_4,_captured_findSlot_5,_captured_readSlot_6,_captured_writeSlot_7",
    call$1: function(e) {
      var proto, slot, copy, t1, key, $length, t2, i;
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date)
        return P.convertNativeToDart_DateTime(e);
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      proto = Object.getPrototypeOf(e);
      if (proto === Object.prototype || proto === null) {
        slot = this._captured_findSlot_5.call$1(e);
        copy = this._captured_readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this._captured_writeSlot_7.call$2(slot, copy);
        for (t1 = Object.keys(e), t1 = H.setRuntimeTypeInfo(new J.ArrayIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
          key = t1.__interceptors$_current;
          copy.$indexSet(0, key, this.call$1(e[key]));
        }
        return copy;
      }
      if (e instanceof Array) {
        slot = this._captured_findSlot_5.call$1(e);
        copy = this._captured_readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        t1 = J.getInterceptor$asx(e);
        $length = t1.get$length(e);
        copy = this._captured_mustCopy_4 ? new Array($length) : e;
        this._captured_writeSlot_7.call$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
        return copy;
      }
      return e;
    }
  },
  CssClassSetImpl: {
    "^": "Object;",
    _validateToken$1: function(value) {
      if ($.get$CssClassSetImpl__validTokenRE()._nativeRegExp.test(H.checkString(value)))
        return value;
      throw H.wrapException(P.ArgumentError$value(value, "value", "Not a valid class token"));
    },
    toString$0: function(_) {
      return this.readClasses$0().join$1(0, " ");
    },
    get$iterator: function(_) {
      var t1 = this.readClasses$0();
      t1 = H.setRuntimeTypeInfo(new P.LinkedHashSetIterator(t1, t1._modifications, null, null), [null]);
      t1._cell = t1._set._first;
      return t1;
    },
    forEach$1: function(_, f) {
      this.readClasses$0().forEach$1(0, f);
    },
    map$1: function(_, f) {
      var t1 = this.readClasses$0();
      return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(t1, f), [H.getTypeArgumentByIndex(t1, 0), null]);
    },
    get$isEmpty: function(_) {
      return this.readClasses$0()._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this.readClasses$0()._collection$_length !== 0;
    },
    get$length: function(_) {
      return this.readClasses$0()._collection$_length;
    },
    contains$1: function(_, value) {
      if (typeof value !== "string")
        return false;
      this._validateToken$1(value);
      return this.readClasses$0().contains$1(0, value);
    },
    lookup$1: function(value) {
      return this.contains$1(0, value) ? value : null;
    },
    add$1: function(_, value) {
      this._validateToken$1(value);
      return this.modify$1(new P.CssClassSetImpl_add_closure(value));
    },
    remove$1: function(_, value) {
      var s, result;
      this._validateToken$1(value);
      s = this.readClasses$0();
      result = s.remove$1(0, value);
      this.writeClasses$1(s);
      return result;
    },
    get$first: function(_) {
      var t1 = this.readClasses$0();
      return t1.get$first(t1);
    },
    toList$1$growable: function(_, growable) {
      return this.readClasses$0().toList$1$growable(0, growable);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    skip$1: function(_, n) {
      var t1 = this.readClasses$0();
      return H.SkipIterable_SkipIterable(t1, n, H.getTypeArgumentByIndex(t1, 0));
    },
    modify$1: function(f) {
      var s, ret;
      s = this.readClasses$0();
      ret = f.call$1(s);
      this.writeClasses$1(s);
      return ret;
    },
    $isEfficientLength: 1,
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    }
  },
  CssClassSetImpl_add_closure: {
    "^": "Closure:2;_captured_value_0",
    call$1: function(s) {
      return s.add$1(0, this._captured_value_0);
    }
  }
}],
["intl", "package:intl/intl.dart", , T, {
  "^": "",
  Intl_defaultLocale: function() {
    $.Zone__current.toString;
    return $.Intl__defaultLocale;
  },
  Intl_verifiedLocale: function(newLocale, localeExists, onFailure) {
    var t1, each;
    if (newLocale == null)
      return T.Intl_verifiedLocale(T.Intl_getCurrentLocale(), localeExists, onFailure);
    if (localeExists.call$1(newLocale) === true)
      return newLocale;
    for (t1 = [T.Intl_canonicalizedLocale(newLocale), T.Intl_shortLocale(newLocale), "fallback"], t1 = H.setRuntimeTypeInfo(new J.ArrayIterator(t1, 3, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
      each = t1.__interceptors$_current;
      if (localeExists.call$1(each) === true)
        return each;
    }
    return onFailure.call$1(newLocale);
  },
  Intl__throwLocaleError: [function(localeName) {
    throw H.wrapException(P.ArgumentError$("Invalid locale '" + localeName + "'"));
  }, "call$1", "Intl__throwLocaleError$closure", 2, 0, 79],
  Intl_shortLocale: function(aLocale) {
    if (aLocale.length < 2)
      return aLocale;
    return C.JSString_methods.substring$2(aLocale, 0, 2).toLowerCase();
  },
  Intl_canonicalizedLocale: function(aLocale) {
    var t1, region;
    if (aLocale === "C")
      return "en_ISO";
    if (aLocale.length < 5)
      return aLocale;
    t1 = aLocale[2];
    if (t1 !== "-" && t1 !== "_")
      return aLocale;
    region = C.JSString_methods.substring$1(aLocale, 3);
    if (region.length <= 3)
      region = region.toUpperCase();
    return aLocale[0] + aLocale[1] + "_" + region;
  },
  Intl_getCurrentLocale: function() {
    if (T.Intl_defaultLocale() == null)
      $.Intl__defaultLocale = $.Intl_systemLocale;
    return T.Intl_defaultLocale();
  },
  NumberFormat: {
    "^": "Object;_negativePrefix,_positivePrefix,_negativeSuffix,_positiveSuffix,_groupingSize,_finalGroupingSize,_groupingSizeSetExplicitly,_decimalSeparatorAlwaysShown,_useSignForPositiveExponent,_useExponentialNotation,maximumIntegerDigits,minimumIntegerDigits,maximumFractionDigits,minimumFractionDigits,minimumExponentDigits,_internalMultiplier,_multiplierDigits,_intl$_pattern,_locale,_symbols,currencyName,_intl$_buffer,_maxInt,_zero",
    format$1: function(_, number) {
      var t1, t2, t3, result;
      t1 = typeof number === "number";
      if (t1 && isNaN(number))
        return this._symbols.NAN;
      if (t1)
        t1 = number == Infinity || number == -Infinity;
      else
        t1 = false;
      if (t1) {
        t1 = J.get$isNegative$n(number) ? this._negativePrefix : this._positivePrefix;
        return t1 + this._symbols.INFINITY;
      }
      t1 = J.getInterceptor$n(number);
      t2 = t1.get$isNegative(number) ? this._negativePrefix : this._positivePrefix;
      t3 = this._intl$_buffer;
      t3._contents += t2;
      t2 = t1.abs$0(number);
      if (this._useExponentialNotation)
        this._formatExponential$1(t2);
      else
        this._formatFixed$1(t2);
      t2 = t3._contents += t1.get$isNegative(number) ? this._negativeSuffix : this._positiveSuffix;
      result = t2.charCodeAt(0) == 0 ? t2 : t2;
      t3._contents = "";
      return result;
    },
    _formatExponential$1: function(number) {
      var t1, exponent, mantissa;
      t1 = J.getInterceptor(number);
      if (t1.$eq(number, 0)) {
        this._formatFixed$1(number);
        this._formatExponent$1(0);
        return;
      }
      exponent = C.JSNumber_methods.toInt$0(Math.floor(Math.log(H.checkNum(number)) / Math.log(H.checkNum(10))));
      H.checkNum(10);
      H.checkNum(exponent);
      mantissa = t1.$div(number, Math.pow(10, exponent));
      t1 = this.maximumIntegerDigits;
      if (t1 > 1 && t1 > this.minimumIntegerDigits)
        for (; C.JSInt_methods.$mod(exponent, t1) !== 0;) {
          mantissa *= 10;
          --exponent;
        }
      else {
        t1 = this.minimumIntegerDigits;
        if (t1 < 1) {
          ++exponent;
          mantissa /= 10;
        } else {
          --t1;
          exponent -= t1;
          H.checkNum(10);
          H.checkNum(t1);
          mantissa *= Math.pow(10, t1);
        }
      }
      this._formatFixed$1(mantissa);
      this._formatExponent$1(exponent);
    },
    _formatExponent$1: function(exponent) {
      var t1, t2, t3;
      t1 = this._symbols;
      t2 = this._intl$_buffer;
      t3 = t2._contents += t1.EXP_SYMBOL;
      if (exponent < 0) {
        exponent = -exponent;
        t2._contents = t3 + t1.MINUS_SIGN;
      } else if (this._useSignForPositiveExponent)
        t2._contents = t3 + t1.PLUS_SIGN;
      this._pad$2(this.minimumExponentDigits, C.JSInt_methods.toString$0(exponent));
    },
    _formatFixed$1: function(number) {
      var t1, power, digitMultiplier, t2, integerPart, fractionPart, extraIntegerDigits, remainingDigits, fractionPresent, howManyDigitsTooBig, divisor, paddingDigits, extra, intDigits, integerDigits, digitLength, i, t3, t4;
      t1 = this.maximumFractionDigits;
      H.checkNum(10);
      H.checkNum(t1);
      power = Math.pow(10, t1);
      digitMultiplier = power * this._internalMultiplier;
      t1 = typeof number === "number";
      if (t1)
        t2 = number == Infinity || number == -Infinity;
      else
        t2 = false;
      if (t2) {
        integerPart = J.toInt$0$n(number);
        fractionPart = 0;
        extraIntegerDigits = 0;
      } else {
        integerPart = t1 ? C.JSNumber_methods.toInt$0(Math.floor(number)) : number;
        t1 = J.$mul$ns(J.$sub$n(number, integerPart), digitMultiplier);
        remainingDigits = J.toInt$0$n(typeof t1 === "number" ? C.JSNumber_methods.round$0(t1) : t1);
        if (remainingDigits >= digitMultiplier) {
          integerPart = J.$add$ns(integerPart, 1);
          remainingDigits -= digitMultiplier;
        }
        extraIntegerDigits = C.JSNumber_methods.$tdiv(remainingDigits, power);
        fractionPart = C.JSNumber_methods.$mod(remainingDigits, power);
      }
      fractionPresent = this.minimumFractionDigits > 0 || fractionPart > 0;
      if (typeof 1 === "number" && typeof integerPart === "number" && integerPart > this._maxInt) {
        howManyDigitsTooBig = C.JSNumber_methods.toInt$0(Math.ceil(Math.log(H.checkNum(integerPart)) / 2.302585092994046)) - 16;
        H.checkNum(10);
        H.checkNum(howManyDigitsTooBig);
        divisor = C.JSNumber_methods.round$0(Math.pow(10, howManyDigitsTooBig));
        paddingDigits = C.JSString_methods.$mul(this._symbols.ZERO_DIGIT, C.JSInt_methods.toInt$0(howManyDigitsTooBig));
        integerPart = C.JSNumber_methods.toInt$0(J.$div$n(integerPart, divisor));
      } else
        paddingDigits = "";
      extra = extraIntegerDigits === 0 ? "" : C.JSNumber_methods.toString$0(extraIntegerDigits);
      intDigits = this._mainIntegerDigits$1(integerPart);
      integerDigits = intDigits + (intDigits.length === 0 ? extra : C.JSString_methods.padLeft$2(extra, this._multiplierDigits, "0")) + paddingDigits;
      digitLength = integerDigits.length;
      if (digitLength !== 0 || this.minimumIntegerDigits > 0) {
        this._pad$1(this.minimumIntegerDigits - digitLength);
        for (t1 = this._intl$_buffer, t2 = this._zero, i = 0; i < digitLength; ++i) {
          t3 = C.JSString_methods.codeUnitAt$1(integerDigits, i);
          t4 = new H.CodeUnits(this._symbols.ZERO_DIGIT);
          t1._contents += H.Primitives_stringFromCharCode(J.$sub$n(J.$add$ns(t4.get$first(t4), t3), t2));
          this._group$2(digitLength, i);
        }
      } else if (!fractionPresent)
        this._intl$_buffer._contents += this._symbols.ZERO_DIGIT;
      if (this._decimalSeparatorAlwaysShown || fractionPresent)
        this._intl$_buffer._contents += this._symbols.DECIMAL_SEP;
      this._formatFractionPart$1(C.JSNumber_methods.toString$0(fractionPart + power));
    },
    _mainIntegerDigits$1: function(integer) {
      var t1, digits;
      t1 = J.getInterceptor(integer);
      if (t1.$eq(integer, 0))
        return "";
      digits = t1.toString$0(integer);
      return C.JSString_methods.startsWith$1(digits, "-") ? C.JSString_methods.substring$1(digits, 1) : digits;
    },
    _formatFractionPart$1: function(fractionPart) {
      var fractionLength, t1, fractionLength0, t2, i, t3, t4;
      fractionLength = fractionPart.length;
      t1 = this._zero;
      while (true) {
        fractionLength0 = fractionLength - 1;
        if (!(C.JSString_methods.codeUnitAt$1(fractionPart, fractionLength0) === t1 && fractionLength > this.minimumFractionDigits + 1))
          break;
        fractionLength = fractionLength0;
      }
      for (t2 = this._intl$_buffer, i = 1; i < fractionLength; ++i) {
        t3 = C.JSString_methods.codeUnitAt$1(fractionPart, i);
        t4 = new H.CodeUnits(this._symbols.ZERO_DIGIT);
        t2._contents += H.Primitives_stringFromCharCode(J.$sub$n(J.$add$ns(t4.get$first(t4), t3), t1));
      }
    },
    _pad$2: function(numberOfDigits, basic) {
      var t1, t2, i, t3, x, t4;
      for (t1 = numberOfDigits - basic.length, t2 = this._intl$_buffer, i = 0; i < t1; ++i)
        t2._contents += this._symbols.ZERO_DIGIT;
      for (t1 = new H.CodeUnits(basic), t1 = t1.get$iterator(t1), t3 = this._zero; t1.moveNext$0();) {
        x = t1.__internal$_current;
        t4 = new H.CodeUnits(this._symbols.ZERO_DIGIT);
        t2._contents += H.Primitives_stringFromCharCode(J.$sub$n(J.$add$ns(t4.get$first(t4), x), t3));
      }
    },
    _pad$1: function(numberOfDigits) {
      return this._pad$2(numberOfDigits, "");
    },
    _group$2: function(totalLength, position) {
      var distanceFromEnd, t1;
      distanceFromEnd = totalLength - position;
      if (distanceFromEnd <= 1 || this._groupingSize <= 0)
        return;
      t1 = this._finalGroupingSize;
      if (distanceFromEnd === t1 + 1)
        this._intl$_buffer._contents += this._symbols.GROUP_SEP;
      else if (distanceFromEnd > t1 && C.JSInt_methods.$mod(distanceFromEnd - t1, this._groupingSize) === 1)
        this._intl$_buffer._contents += this._symbols.GROUP_SEP;
    },
    _setPattern$1: function(newPattern) {
      var t1, t2;
      if (newPattern == null)
        return;
      this._intl$_pattern = J.replaceAll$2$s(newPattern, " ", "\u00a0");
      t1 = this.currencyName;
      t2 = new T._StringIterator(T._StringIterator__validate(newPattern), 0, null);
      t2.moveNext$0();
      new T._NumberFormatParser(this, t2, t1, false, -1, 0, 0, 0, -1).parse$0();
    },
    toString$0: function(_) {
      return "NumberFormat(" + H.S(this._locale) + ", " + H.S(this._intl$_pattern) + ")";
    },
    NumberFormat$_forPattern$3: function(locale, getPattern, currencyName) {
      var t1 = $.numberFormatSymbols.$index(0, this._locale);
      this._symbols = t1;
      if (this.currencyName == null)
        this.currencyName = t1.DEF_CURRENCY_CODE;
      this._setPattern$1(getPattern.call$1(t1));
    },
    static: {NumberFormat$decimalPattern: function(locale) {
        var t1, t2;
        H.checkNum(2);
        H.checkNum(52);
        t1 = Math.pow(2, 52);
        t2 = new H.CodeUnits("0");
        t2 = t2.get$first(t2);
        t2 = new T.NumberFormat("-", "", "", "", 3, 3, false, false, false, false, 40, 1, 3, 0, 0, 1, 0, null, T.Intl_verifiedLocale(locale, T.NumberFormat_localeExists$closure(), T.Intl__throwLocaleError$closure()), null, null, new P.StringBuffer(""), t1, t2);
        t2.NumberFormat$_forPattern$3(locale, new T.NumberFormat$decimalPattern_closure(), null);
        return t2;
      }, NumberFormat_localeExists: [function(localeName) {
        if (localeName == null)
          return false;
        return $.numberFormatSymbols.containsKey$1(localeName);
      }, "call$1", "NumberFormat_localeExists$closure", 2, 0, 80]}
  },
  NumberFormat$decimalPattern_closure: {
    "^": "Closure:2;",
    call$1: function(x) {
      return x.DECIMAL_PATTERN;
    }
  },
  _NumberFormatParser: {
    "^": "Object;format,pattern,currencyName,inQuote,decimalPos,digitLeftCount,zeroDigitCount,digitRightCount,groupingCount",
    parse$0: function() {
      var t1, trunk, t2, t3, each, t4;
      t1 = this.format;
      t1._positivePrefix = this._parseAffix$0();
      trunk = this._parseTrunk$0();
      t2 = this._parseAffix$0();
      t1._positiveSuffix = t2;
      t3 = this.pattern;
      if (t3._intl$_current === ";") {
        t3.moveNext$0();
        t1._negativePrefix = this._parseAffix$0();
        for (t2 = new T._StringIterator(T._StringIterator__validate(trunk), 0, null); t2.moveNext$0();) {
          each = t2._intl$_current;
          t4 = t3._intl$_current;
          if ((t4 == null ? each != null : t4 !== each) && t4 != null)
            throw H.wrapException(P.FormatException$("Positive and negative trunks must be the same", null, null));
          t3.moveNext$0();
        }
        t1._negativeSuffix = this._parseAffix$0();
      } else {
        t1._negativePrefix = t1._negativePrefix + t1._positivePrefix;
        t1._negativeSuffix = t2 + t1._negativeSuffix;
      }
    },
    _parseAffix$0: function() {
      var affix, t1;
      affix = new P.StringBuffer("");
      this.inQuote = false;
      t1 = this.pattern;
      while (true)
        if (!(this.parseCharacterAffix$1(affix) && t1.moveNext$0()))
          break;
      t1 = affix._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    parseCharacterAffix$1: function(affix) {
      var t1, ch, t2, t3;
      t1 = this.pattern;
      ch = t1._intl$_current;
      if (ch == null)
        return false;
      if (ch === "'") {
        t2 = t1.nextIndex;
        t3 = t1.input;
        if ((t2 >= t3.length ? null : t3[t2]) === "'") {
          t1.moveNext$0();
          affix._contents += "'";
        } else
          this.inQuote = !this.inQuote;
        return true;
      }
      if (this.inQuote)
        affix._contents += ch;
      else
        switch (ch) {
          case "#":
          case "0":
          case ",":
          case ".":
          case ";":
            return false;
          case "\u00a4":
            affix._contents += H.S(this.currencyName);
            break;
          case "%":
            t1 = this.format;
            t2 = t1._internalMultiplier;
            if (t2 !== 1 && t2 !== 100)
              throw H.wrapException(P.FormatException$("Too many percent/permill", null, null));
            t1._internalMultiplier = 100;
            t1._multiplierDigits = C.JSDouble_methods.round$0(Math.log(100) / 2.302585092994046);
            affix._contents += t1._symbols.PERCENT;
            break;
          case "\u2030":
            t1 = this.format;
            t2 = t1._internalMultiplier;
            if (t2 !== 1 && t2 !== 1000)
              throw H.wrapException(P.FormatException$("Too many percent/permill", null, null));
            t1._internalMultiplier = 1000;
            t1._multiplierDigits = C.JSDouble_methods.round$0(Math.log(1000) / 2.302585092994046);
            affix._contents += t1._symbols.PERMILL;
            break;
          default:
            affix._contents += ch;
        }
      return true;
    },
    _parseTrunk$0: function() {
      var trunk, t1, loop, t2, n, effectiveDecimalPos, t3, totalDigits, t4;
      trunk = new P.StringBuffer("");
      t1 = this.pattern;
      loop = true;
      while (true) {
        if (!(t1._intl$_current != null && loop))
          break;
        loop = this.parseTrunkCharacter$1(trunk);
      }
      t2 = this.zeroDigitCount;
      if (t2 === 0 && this.digitLeftCount > 0 && this.decimalPos >= 0) {
        n = this.decimalPos;
        if (n === 0)
          n = 1;
        this.digitRightCount = this.digitLeftCount - n;
        this.digitLeftCount = n - 1;
        this.zeroDigitCount = 1;
        t2 = 1;
      }
      effectiveDecimalPos = this.decimalPos;
      if (!(effectiveDecimalPos < 0 && this.digitRightCount > 0)) {
        if (effectiveDecimalPos >= 0) {
          t3 = this.digitLeftCount;
          t3 = effectiveDecimalPos < t3 || effectiveDecimalPos > t3 + t2;
        } else
          t3 = false;
        t3 = t3 || this.groupingCount === 0;
      } else
        t3 = true;
      if (t3)
        throw H.wrapException(P.FormatException$("Malformed pattern \"" + t1.input + "\"", null, null));
      t1 = this.digitLeftCount;
      totalDigits = t1 + t2 + this.digitRightCount;
      t3 = this.format;
      t4 = effectiveDecimalPos >= 0 ? totalDigits - effectiveDecimalPos : 0;
      t3.maximumFractionDigits = t4;
      if (effectiveDecimalPos >= 0) {
        t2 = t1 + t2 - effectiveDecimalPos;
        t3.minimumFractionDigits = t2;
        if (t2 < 0)
          t3.minimumFractionDigits = 0;
      }
      t2 = (effectiveDecimalPos >= 0 ? effectiveDecimalPos : totalDigits) - t1;
      t3.minimumIntegerDigits = t2;
      if (t3._useExponentialNotation) {
        t3.maximumIntegerDigits = t1 + t2;
        if (t4 === 0 && t2 === 0)
          t3.minimumIntegerDigits = 1;
      }
      t1 = P.max(0, this.groupingCount);
      t3._finalGroupingSize = t1;
      if (!t3._groupingSizeSetExplicitly)
        t3._groupingSize = t1;
      t1 = this.decimalPos;
      t3._decimalSeparatorAlwaysShown = t1 === 0 || t1 === totalDigits;
      t1 = trunk._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    parseTrunkCharacter$1: function(trunk) {
      var t1, ch, t2, t3, nextChar;
      t1 = this.pattern;
      ch = t1._intl$_current;
      switch (ch) {
        case "#":
          if (this.zeroDigitCount > 0)
            ++this.digitRightCount;
          else
            ++this.digitLeftCount;
          t2 = this.groupingCount;
          if (t2 >= 0 && this.decimalPos < 0)
            this.groupingCount = t2 + 1;
          break;
        case "0":
          if (this.digitRightCount > 0)
            throw H.wrapException(P.FormatException$("Unexpected \"0\" in pattern \"" + t1.input + "\"", null, null));
          ++this.zeroDigitCount;
          t2 = this.groupingCount;
          if (t2 >= 0 && this.decimalPos < 0)
            this.groupingCount = t2 + 1;
          break;
        case ",":
          t2 = this.groupingCount;
          if (t2 > 0) {
            t3 = this.format;
            t3._groupingSizeSetExplicitly = true;
            t3._groupingSize = t2;
          }
          this.groupingCount = 0;
          break;
        case ".":
          if (this.decimalPos >= 0)
            throw H.wrapException(P.FormatException$("Multiple decimal separators in pattern \"" + t1.toString$0(0) + "\"", null, null));
          this.decimalPos = this.digitLeftCount + this.zeroDigitCount + this.digitRightCount;
          break;
        case "E":
          trunk._contents += H.S(ch);
          t2 = this.format;
          if (t2._useExponentialNotation)
            throw H.wrapException(P.FormatException$("Multiple exponential symbols in pattern \"" + t1.toString$0(0) + "\"", null, null));
          t2._useExponentialNotation = true;
          t2.minimumExponentDigits = 0;
          t1.moveNext$0();
          nextChar = t1._intl$_current;
          if (nextChar === "+") {
            trunk._contents += H.S(nextChar);
            t1.moveNext$0();
            t2._useSignForPositiveExponent = true;
          }
          for (; t3 = t1._intl$_current, t3 === "0";) {
            trunk._contents += H.S(t3);
            t1.moveNext$0();
            ++t2.minimumExponentDigits;
          }
          if (this.digitLeftCount + this.zeroDigitCount < 1 || t2.minimumExponentDigits < 1)
            throw H.wrapException(P.FormatException$("Malformed exponential pattern \"" + t1.toString$0(0) + "\"", null, null));
          return false;
        default:
          return false;
      }
      trunk._contents += H.S(ch);
      t1.moveNext$0();
      return true;
    }
  },
  _StringIterable: {
    "^": "IterableBase;iterator>",
    $asIterableBase: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    }
  },
  _StringIterator: {
    "^": "Object;input,nextIndex,_intl$_current",
    get$current: function() {
      return this._intl$_current;
    },
    moveNext$0: function() {
      var t1, t2;
      t1 = this.nextIndex;
      t2 = this.input;
      if (t1 >= t2.length) {
        this._intl$_current = null;
        return false;
      }
      this.nextIndex = t1 + 1;
      this._intl$_current = t2[t1];
      return true;
    },
    get$iterator: function(_) {
      return this;
    },
    static: {_StringIterator__validate: function(input) {
        if (typeof input !== "string")
          throw H.wrapException(P.ArgumentError$(input));
        return input;
      }}
  }
}],
["logging", "package:logging/logging.dart", , N, {
  "^": "",
  Logger: {
    "^": "Object;name>,parent>,_level,_children>,children,_logging$_controller",
    get$fullName: function() {
      var t1, t2, t3;
      t1 = this.parent;
      t2 = t1 == null || J.$eq(J.get$name$x(t1), "");
      t3 = this.name;
      return t2 ? t3 : t1.get$fullName() + "." + t3;
    },
    get$level: function() {
      if ($.hierarchicalLoggingEnabled) {
        var t1 = this.parent;
        if (t1 != null)
          return t1.get$level();
      }
      return $._rootLevel;
    },
    log$5: function(logLevel, message, error, stackTrace, zone) {
      var t, t1, exception, t2, t3, record, target;
      t1 = this.get$level();
      if (J.get$value$x(logLevel) >= t1.value) {
        if (!!J.getInterceptor(message).$isFunction)
          message = message.call$0();
        t1 = message;
        if (typeof t1 !== "string")
          message = J.toString$0(message);
        if (stackTrace == null) {
          t1 = $.recordStackTraceAtLevel;
          t1 = J.get$value$x(logLevel) >= t1.value;
        } else
          t1 = false;
        if (t1)
          try {
            t1 = "autogenerated stack trace for " + H.S(logLevel) + " " + H.S(message);
            throw H.wrapException(t1);
          } catch (exception) {
            H.unwrapException(exception);
            t = H.getTraceFromException(exception);
            stackTrace = t;
          }
        zone = $.Zone__current;
        t1 = this.get$fullName();
        t2 = Date.now();
        t3 = $.LogRecord__nextNumber;
        $.LogRecord__nextNumber = t3 + 1;
        record = new N.LogRecord(logLevel, message, t1, new P.DateTime(t2, false), t3, error, stackTrace, zone);
        if ($.hierarchicalLoggingEnabled)
          for (target = this; target != null;) {
            target._publish$1(record);
            target = J.get$parent$x(target);
          }
        else
          N.Logger_Logger("")._publish$1(record);
      }
    },
    log$4: function(logLevel, message, error, stackTrace) {
      return this.log$5(logLevel, message, error, stackTrace, null);
    },
    info$3: function(message, error, stackTrace) {
      return this.log$4(C.Level_INFO_800, message, error, stackTrace);
    },
    info$1: function(message) {
      return this.info$3(message, null, null);
    },
    _publish$1: function(record) {
    },
    static: {Logger_Logger: function($name) {
        return $.get$Logger__loggers().putIfAbsent$2($name, new N.Logger_Logger_closure($name));
      }}
  },
  Logger_Logger_closure: {
    "^": "Closure:0;_logging$_captured_name_0",
    call$0: function() {
      var thisName, dot, $parent, t1;
      thisName = this._logging$_captured_name_0;
      if (C.JSString_methods.startsWith$1(thisName, "."))
        H.throwExpression(P.ArgumentError$("name shouldn't start with a '.'"));
      dot = C.JSString_methods.lastIndexOf$1(thisName, ".");
      if (dot === -1)
        $parent = thisName !== "" ? N.Logger_Logger("") : null;
      else {
        $parent = N.Logger_Logger(C.JSString_methods.substring$2(thisName, 0, dot));
        thisName = C.JSString_methods.substring$1(thisName, dot + 1);
      }
      t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, N.Logger);
      t1 = new N.Logger(thisName, $parent, null, t1, H.setRuntimeTypeInfo(new P.UnmodifiableMapView(t1), [null, null]), null);
      if ($parent != null)
        J.get$_children$x($parent).$indexSet(0, thisName, t1);
      return t1;
    }
  },
  Level: {
    "^": "Object;name>,value>",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof N.Level && this.value === other.value;
    },
    $lt: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value < t1;
    },
    $le: function(_, other) {
      return C.JSInt_methods.$le(this.value, C.JSInt_methods.get$value(other));
    },
    $gt: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value > t1;
    },
    $ge: function(_, other) {
      return this.value >= J.get$value$x(other);
    },
    compareTo$1: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value - t1;
    },
    get$hashCode: function(_) {
      return this.value;
    },
    toString$0: function(_) {
      return this.name;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [N.Level];
    }
  },
  LogRecord: {
    "^": "Object;level<,message>,loggerName,time,sequenceNumber,error>,stackTrace<,zone",
    toString$0: function(_) {
      return "[" + this.level.name + "] " + this.loggerName + ": " + H.S(this.message);
    }
  }
}],
["number_symbols", "package:intl/number_symbols.dart", , B, {
  "^": "",
  NumberSymbols: {
    "^": "Object;NAME,DECIMAL_SEP,GROUP_SEP,PERCENT,ZERO_DIGIT,PLUS_SIGN,MINUS_SIGN,EXP_SYMBOL,PERMILL,INFINITY,NAN,DECIMAL_PATTERN,SCIENTIFIC_PATTERN,PERCENT_PATTERN,CURRENCY_PATTERN,DEF_CURRENCY_CODE",
    toString$0: function(_) {
      return this.NAME;
    }
  }
}],
["spark.utils", "package:hetimagit/src/utils.dart", , N, {
  "^": "",
  getLocalDataRoot: function() {
    var t1, t2;
    P.print("### getLocalDataRoot  A");
    t1 = $._html5FSRoot;
    if (t1 != null) {
      t2 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null]);
      t2._asyncComplete$1(t1);
      return t2;
    }
    P.print("### getLocalDataDir  B");
    t1 = window;
    return C.Window_methods._requestFileSystem$2(t1, 1, 104857600).then$1(new N.getLocalDataRoot_closure());
  },
  getLocalDataDir: function($name) {
    P.print("### getLocalDataDir  A");
    return N.getLocalDataRoot().then$1(new N.getLocalDataDir_closure($name));
  },
  FutureHelper_forEachNonBlockingUI: function(input, f) {
    var doneSignal = H.setRuntimeTypeInfo(new P._AsyncCompleter(H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null), [null])), [null]);
    new N.FutureHelper_forEachNonBlockingUI_nextElement(f, doneSignal, H.setRuntimeTypeInfo(new J.ArrayIterator(input, input.length, 0, null), [H.getTypeArgumentByIndex(input, 0)])).call$1(null);
    return doneSignal.future;
  },
  getLocalDataRoot_closure: {
    "^": "Closure:66;",
    call$1: [function(fs) {
      var t1 = J.getInterceptor$x(fs);
      P.print("### getLocalDataDir  C " + H.S(fs) + " " + H.S(t1.get$root(fs)) + " " + H.S(J.get$fullPath$x(t1.get$root(fs))));
      t1 = t1.get$root(fs);
      $._html5FSRoot = t1;
      return t1;
    }, null, null, 2, 0, null, 77, "call"]
  },
  getLocalDataDir_closure: {
    "^": "Closure:27;_captured_name_0",
    call$1: [function(root) {
      return C.Window_methods.resolveLocalFileSystemUrl$1(window, J.toUrl$0$x(root)).then$1(new N.getLocalDataDir__closure(this._captured_name_0));
    }, null, null, 2, 0, null, 83, "call"]
  },
  getLocalDataDir__closure: {
    "^": "Closure:30;_captured_name_1",
    call$1: [function(e) {
      var t1;
      P.print("##TEST OK##");
      t1 = J.getInterceptor$x(e);
      P.print("##TEST OK# " + H.S(e) + " " + H.S(t1.get$fullPath(e)) + " " + H.S(t1.toUrl$0(e)));
      H.interceptedTypeCast(e, "$isDirectoryEntry");
      e.toString;
      return t1._getDirectory$2$options(e, this._captured_name_1, P.LinkedHashMap_LinkedHashMap$_literal(["create", true, "exclusive", false], null, null));
    }, null, null, 2, 0, null, 3, "call"]
  },
  PrintProfiler: {
    "^": "Object;name>,printToStdout,_previousTaskTime,_utils0$_stopwatch",
    finishCurrentTask$1: function(taskName) {
      var t1, ms, t2, output;
      t1 = this._utils0$_stopwatch;
      t1.stop$0(0);
      ms = J.$tdiv$n(J.$mul$ns(t1.get$elapsedTicks(), 1000), $.Stopwatch__frequency);
      t2 = this._previousTaskTime;
      if (typeof ms !== "number")
        return H.iae(ms);
      this._previousTaskTime = t2 + ms;
      t1.reset$0(0);
      t1.start$0(0);
      output = this.name + ", " + taskName + " " + $.get$_nf().format$1(0, ms) + "ms";
      if (this.printToStdout)
        P.print(output);
      return output;
    }
  },
  FutureHelper_forEachNonBlockingUI_nextElement: {
    "^": "Closure:69;_utils0$_captured_f_0,_captured_doneSignal_1,_captured_iterator_2",
    call$1: [function(_) {
      var t1, t2;
      t1 = this._captured_iterator_2;
      t2 = this._captured_doneSignal_1;
      if (t1.moveNext$0())
        P.Future_Future$delayed(C.Duration_0, null, null).then$1(new N.FutureHelper_forEachNonBlockingUI_nextElement_closure(this._utils0$_captured_f_0, t2, t1, this));
      else
        t2.complete$1(0, null);
    }, null, null, 2, 0, null, 26, "call"]
  },
  FutureHelper_forEachNonBlockingUI_nextElement_closure: {
    "^": "Closure:2;_utils0$_captured_f_3,_captured_doneSignal_4,_captured_iterator_5,_captured_nextElement_6",
    call$1: [function(_) {
      var e, exception, t1;
      try {
        this._utils0$_captured_f_3.call$1(this._captured_iterator_5.__interceptors$_current).then$2$onError(this._captured_nextElement_6, new N.FutureHelper_forEachNonBlockingUI_nextElement__closure(this._captured_doneSignal_4));
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        this._captured_doneSignal_4.completeError$1(e);
      }
    }, null, null, 2, 0, null, 26, "call"]
  },
  FutureHelper_forEachNonBlockingUI_nextElement__closure: {
    "^": "Closure:2;_captured_doneSignal_7",
    call$1: [function(e) {
      return this._captured_doneSignal_7.completeError$1(e);
    }, null, null, 2, 0, null, 3, "call"]
  }
}],
["utf", "package:utf/utf.dart", , O, {
  "^": "",
  _addToEncoding: function(offset, bytes, value, buffer) {
    var t1, t2, t3, t4;
    for (t1 = buffer.length; bytes > 0;) {
      t2 = offset + bytes;
      t3 = J.getInterceptor$n(value);
      t4 = t3.$and(value, 63);
      if (t2 >= t1)
        return H.ioore(buffer, t2);
      buffer[t2] = (128 | t4) >>> 0;
      value = t3.$shr(value, 6);
      --bytes;
    }
    return value;
  },
  codepointsToUtf8: function(codepoints, offset, $length) {
    var source, t1, t2, t3, t4, t5, encodedLength, t6, value, encoded, insertAt, insertAt0;
    source = G.ListRange$(codepoints, offset, $length);
    for (t1 = source._list_range$_source, t2 = source._list_range$_offset, t3 = t2 + source._list_range$_length, --t2, t4 = new G._ListRangeIteratorImpl(t1, t2, t3), t5 = J.getInterceptor$asx(t1), encodedLength = 0; t6 = ++t4._list_range$_offset, t6 < t3;) {
      value = t5.$index(t1, t6);
      t6 = J.getInterceptor$n(value);
      if (t6.$lt(value, 0) || t6.$gt(value, 1114111))
        encodedLength += 3;
      else if (t6.$le(value, 127))
        ++encodedLength;
      else if (t6.$le(value, 2047))
        encodedLength += 2;
      else if (t6.$le(value, 65535))
        encodedLength += 3;
      else if (t6.$le(value, 1114111))
        encodedLength += 4;
    }
    t4 = Array(encodedLength);
    t4.fixed$length = Array;
    encoded = H.setRuntimeTypeInfo(t4, [P.$int]);
    for (t2 = new G._ListRangeIteratorImpl(t1, t2, t3), t4 = J.getInterceptor$asx(t1), t5 = encoded.length, insertAt = 0; t6 = ++t2._list_range$_offset, t6 < t3;) {
      value = t4.$index(t1, t6);
      t6 = J.getInterceptor$n(value);
      if (t6.$lt(value, 0) || t6.$gt(value, 1114111)) {
        insertAt0 = insertAt + 3;
        C.JSArray_methods.setRange$3(encoded, insertAt, insertAt0, [239, 191, 189]);
        insertAt = insertAt0;
      } else if (t6.$le(value, 127)) {
        if (insertAt >= t5)
          return H.ioore(encoded, insertAt);
        encoded[insertAt] = value;
        ++insertAt;
      } else if (t6.$le(value, 2047)) {
        t6 = O._addToEncoding(insertAt, 1, value, encoded);
        if (typeof t6 !== "number")
          return H.iae(t6);
        if (insertAt >= t5)
          return H.ioore(encoded, insertAt);
        encoded[insertAt] = (192 | 31 & t6) >>> 0;
        insertAt += 2;
      } else if (t6.$le(value, 65535)) {
        t6 = O._addToEncoding(insertAt, 2, value, encoded);
        if (typeof t6 !== "number")
          return H.iae(t6);
        if (insertAt >= t5)
          return H.ioore(encoded, insertAt);
        encoded[insertAt] = (224 | 15 & t6) >>> 0;
        insertAt += 3;
      } else if (t6.$le(value, 1114111)) {
        t6 = O._addToEncoding(insertAt, 3, value, encoded);
        if (typeof t6 !== "number")
          return H.iae(t6);
        if (insertAt >= t5)
          return H.ioore(encoded, insertAt);
        encoded[insertAt] = (240 | 7 & t6) >>> 0;
        insertAt += 4;
      }
    }
    return encoded;
  }
}],
["utf.list_range", "package:utf/src/list_range.dart", , G, {
  "^": "",
  ListRange: {
    "^": "IterableBase;_list_range$_source,_list_range$_offset,_list_range$_length",
    get$iterator: function(_) {
      var t1 = this._list_range$_offset;
      return new G._ListRangeIteratorImpl(this._list_range$_source, t1 - 1, t1 + this._list_range$_length);
    },
    get$length: function(_) {
      return this._list_range$_length;
    },
    ListRange$3: function(source, offset, $length) {
      var t1 = this._list_range$_offset;
      if (t1 > J.get$length$asx(this._list_range$_source))
        throw H.wrapException(P.RangeError$value(t1, null, null));
      if (this._list_range$_length < 0)
        throw H.wrapException(P.RangeError$value(this._list_range$_length, null, null));
      t1 = this._list_range$_length + t1;
      if (t1 > J.get$length$asx(this._list_range$_source))
        throw H.wrapException(P.RangeError$value(t1, null, null));
    },
    $asIterableBase: $.functionThatReturnsNull,
    $asIterable: $.functionThatReturnsNull,
    static: {ListRange$: function(source, offset, $length) {
        var t1 = new G.ListRange(source, offset, J.get$length$asx(source) - offset);
        t1.ListRange$3(source, offset, $length);
        return t1;
      }}
  },
  _ListRangeIteratorImpl: {
    "^": "Object;_list_range$_source,_list_range$_offset,_end",
    get$current: function() {
      return J.$index$asx(this._list_range$_source, this._list_range$_offset);
    },
    moveNext$0: function() {
      return ++this._list_range$_offset < this._end;
    },
    get$position: function(_) {
      return this._list_range$_offset;
    },
    skip$1: function(_, count) {
      var t1 = this._list_range$_offset;
      if (typeof count !== "number")
        return H.iae(count);
      this._list_range$_offset = t1 + count;
    }
  }
}],
["utf.utf_16_code_unit_decoder", "package:utf/src/utf_16_code_unit_decoder.dart", , Z, {
  "^": "",
  Utf16CodeUnitDecoder: {
    "^": "Object;utf16CodeUnitIterator,replacementCodepoint,_utf_16_code_unit_decoder$_current",
    get$iterator: function(_) {
      return this;
    },
    get$current: function() {
      return this._utf_16_code_unit_decoder$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3, t4, t5, value, t6, nextValue;
      this._utf_16_code_unit_decoder$_current = null;
      t1 = this.utf16CodeUnitIterator;
      t2 = ++t1._list_range$_offset;
      t3 = t1._end;
      if (!(t2 < t3))
        return false;
      t4 = t1._list_range$_source;
      t5 = J.getInterceptor$asx(t4);
      value = t5.$index(t4, t2);
      t2 = J.getInterceptor$n(value);
      if (t2.$lt(value, 0))
        this._utf_16_code_unit_decoder$_current = this.replacementCodepoint;
      else {
        if (!t2.$lt(value, 55296))
          t6 = t2.$gt(value, 57343) && t2.$le(value, 65535);
        else
          t6 = true;
        if (t6)
          this._utf_16_code_unit_decoder$_current = value;
        else if (t2.$lt(value, 56320) && ++t1._list_range$_offset < t3) {
          nextValue = t5.$index(t4, t1._list_range$_offset);
          t3 = J.getInterceptor$n(nextValue);
          if (t3.$ge(nextValue, 56320) && t3.$le(nextValue, 57343)) {
            value = J.$shl$n(t2.$sub(value, 55296), 10);
            t1 = t3.$sub(nextValue, 56320);
            if (typeof t1 !== "number")
              return H.iae(t1);
            this._utf_16_code_unit_decoder$_current = value + (65536 + t1);
          } else {
            if (t3.$ge(nextValue, 55296) && t3.$lt(nextValue, 56320))
              --t1._list_range$_offset;
            this._utf_16_code_unit_decoder$_current = this.replacementCodepoint;
          }
        } else
          this._utf_16_code_unit_decoder$_current = this.replacementCodepoint;
      }
      return true;
    }
  }
}],
["utf.util", "package:utf/src/util.dart", , U, {
  "^": "",
  utf16CodeUnitsToCodepoints: function(utf16CodeUnits, offset, $length, replacementCodepoint) {
    var t1, t2, t3, decoder, codepoints, i, i0, codepointTrunc;
    t1 = G.ListRange$(utf16CodeUnits, offset, $length);
    t2 = t1._list_range$_offset;
    t3 = t2 + t1._list_range$_length;
    --t2;
    decoder = new Z.Utf16CodeUnitDecoder(new G._ListRangeIteratorImpl(t1._list_range$_source, t2, t3), replacementCodepoint, null);
    codepoints = H.setRuntimeTypeInfo(Array(t3 - t2 - 1), [P.$int]);
    for (t1 = codepoints.length, i = 0; decoder.moveNext$0(); i = i0) {
      i0 = i + 1;
      t2 = decoder._utf_16_code_unit_decoder$_current;
      if (i >= t1)
        return H.ioore(codepoints, i);
      codepoints[i] = t2;
    }
    if (i === t1)
      return codepoints;
    else {
      t1 = Array(i);
      t1.fixed$length = Array;
      codepointTrunc = H.setRuntimeTypeInfo(t1, [P.$int]);
      C.JSArray_methods.setRange$3(codepointTrunc, 0, i, codepoints);
      return codepointTrunc;
    }
  }
}],
["git.permissions", "package:hetimagit/src/git/permissions.dart", , A, {
  "^": ""
}],
["number_symbol_data", "package:intl/number_symbols_data.dart", , F, {
  "^": ""
}],
];
init.precompiled = function($collectedClasses) {
  var $desc;
  function JS_CONST(code) {
    this.code = code;
    this.$deferredAction();
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST[1];
  JS_CONST.prototype = $desc;
  JS_CONST.$__fields__ = ["code"];
  function Interceptor() {
    this.$deferredAction();
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor[1];
  Interceptor.prototype = $desc;
  Interceptor.$__fields__ = [];
  function JSBool() {
    this.$deferredAction();
  }
  JSBool.builtin$cls = "JSBool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool[1];
  JSBool.prototype = $desc;
  JSBool.$__fields__ = [];
  function JSNull() {
    this.$deferredAction();
  }
  JSNull.builtin$cls = "JSNull";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull[1];
  JSNull.prototype = $desc;
  JSNull.$__fields__ = [];
  function JavaScriptObject() {
    this.$deferredAction();
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject[1];
  JavaScriptObject.prototype = $desc;
  JavaScriptObject.$__fields__ = [];
  function PlainJavaScriptObject() {
    this.$deferredAction();
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject[1];
  PlainJavaScriptObject.prototype = $desc;
  PlainJavaScriptObject.$__fields__ = [];
  function UnknownJavaScriptObject() {
    this.$deferredAction();
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject[1];
  UnknownJavaScriptObject.prototype = $desc;
  UnknownJavaScriptObject.$__fields__ = [];
  function JSArray() {
    this.$deferredAction();
  }
  JSArray.builtin$cls = "JSArray";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray[1];
  JSArray.prototype = $desc;
  JSArray.$__fields__ = [];
  function ArrayIterator(__interceptors$_iterable, __interceptors$_length, __interceptors$_index, __interceptors$_current) {
    this.__interceptors$_iterable = __interceptors$_iterable;
    this.__interceptors$_length = __interceptors$_length;
    this.__interceptors$_index = __interceptors$_index;
    this.__interceptors$_current = __interceptors$_current;
    this.$deferredAction();
  }
  ArrayIterator.builtin$cls = "ArrayIterator";
  if (!"name" in ArrayIterator)
    ArrayIterator.name = "ArrayIterator";
  $desc = $collectedClasses.ArrayIterator[1];
  ArrayIterator.prototype = $desc;
  ArrayIterator.$__fields__ = ["__interceptors$_iterable", "__interceptors$_length", "__interceptors$_index", "__interceptors$_current"];
  function JSNumber() {
    this.$deferredAction();
  }
  JSNumber.builtin$cls = "JSNumber";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber[1];
  JSNumber.prototype = $desc;
  JSNumber.$__fields__ = [];
  function JSInt() {
    this.$deferredAction();
  }
  JSInt.builtin$cls = "JSInt";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt[1];
  JSInt.prototype = $desc;
  JSInt.$__fields__ = [];
  function JSDouble() {
    this.$deferredAction();
  }
  JSDouble.builtin$cls = "JSDouble";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble[1];
  JSDouble.prototype = $desc;
  JSDouble.$__fields__ = [];
  function JSString() {
    this.$deferredAction();
  }
  JSString.builtin$cls = "JSString";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString[1];
  JSString.prototype = $desc;
  JSString.$__fields__ = [];
  function startRootIsolate_closure(__isolate_helper$_box_0, _captured_entry_1) {
    this.__isolate_helper$_box_0 = __isolate_helper$_box_0;
    this._captured_entry_1 = _captured_entry_1;
    this.$deferredAction();
  }
  startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
  if (!"name" in startRootIsolate_closure)
    startRootIsolate_closure.name = "startRootIsolate_closure";
  $desc = $collectedClasses.startRootIsolate_closure[1];
  startRootIsolate_closure.prototype = $desc;
  startRootIsolate_closure.$__fields__ = ["__isolate_helper$_box_0", "_captured_entry_1"];
  function startRootIsolate_closure0(__isolate_helper$_box_0, __isolate_helper$_captured_entry_2) {
    this.__isolate_helper$_box_0 = __isolate_helper$_box_0;
    this.__isolate_helper$_captured_entry_2 = __isolate_helper$_captured_entry_2;
    this.$deferredAction();
  }
  startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
  if (!"name" in startRootIsolate_closure0)
    startRootIsolate_closure0.name = "startRootIsolate_closure0";
  $desc = $collectedClasses.startRootIsolate_closure0[1];
  startRootIsolate_closure0.prototype = $desc;
  startRootIsolate_closure0.$__fields__ = ["__isolate_helper$_box_0", "__isolate_helper$_captured_entry_2"];
  function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
    this.$deferredAction();
  }
  _Manager.builtin$cls = "_Manager";
  if (!"name" in _Manager)
    _Manager.name = "_Manager";
  $desc = $collectedClasses._Manager[1];
  _Manager.prototype = $desc;
  _Manager.$__fields__ = ["nextIsolateId", "currentManagerId", "nextManagerId", "currentContext", "rootContext", "topEventLoop", "fromCommandLine", "isWorker", "supportsWorkers", "isolates", "mainManager", "managers", "entry"];
  function _IsolateContext(id, ports, weakPorts, isolateStatics, controlPort, pauseCapability, terminateCapability, initialized, isPaused, delayedEvents, pauseTokens, doneHandlers, _scheduledControlEvents, _isExecutingEvent, errorsAreFatal, errorPorts) {
    this.id = id;
    this.ports = ports;
    this.weakPorts = weakPorts;
    this.isolateStatics = isolateStatics;
    this.controlPort = controlPort;
    this.pauseCapability = pauseCapability;
    this.terminateCapability = terminateCapability;
    this.initialized = initialized;
    this.isPaused = isPaused;
    this.delayedEvents = delayedEvents;
    this.pauseTokens = pauseTokens;
    this.doneHandlers = doneHandlers;
    this._scheduledControlEvents = _scheduledControlEvents;
    this._isExecutingEvent = _isExecutingEvent;
    this.errorsAreFatal = errorsAreFatal;
    this.errorPorts = errorPorts;
    this.$deferredAction();
  }
  _IsolateContext.builtin$cls = "_IsolateContext";
  if (!"name" in _IsolateContext)
    _IsolateContext.name = "_IsolateContext";
  $desc = $collectedClasses._IsolateContext[1];
  _IsolateContext.prototype = $desc;
  _IsolateContext.$__fields__ = ["id", "ports", "weakPorts", "isolateStatics", "controlPort", "pauseCapability", "terminateCapability", "initialized", "isPaused", "delayedEvents", "pauseTokens", "doneHandlers", "_scheduledControlEvents", "_isExecutingEvent", "errorsAreFatal", "errorPorts"];
  _IsolateContext.prototype.get$isolateStatics = function() {
    return this.isolateStatics;
  };
  _IsolateContext.prototype.get$controlPort = function() {
    return this.controlPort;
  };
  _IsolateContext.prototype.set$initialized = function(v) {
    return this.initialized = v;
  };
  _IsolateContext.prototype.get$isPaused = function() {
    return this.isPaused;
  };
  _IsolateContext.prototype.get$delayedEvents = function() {
    return this.delayedEvents;
  };
  function _IsolateContext_handlePing_respond(_captured_responsePort_0) {
    this._captured_responsePort_0 = _captured_responsePort_0;
    this.$deferredAction();
  }
  _IsolateContext_handlePing_respond.builtin$cls = "_IsolateContext_handlePing_respond";
  if (!"name" in _IsolateContext_handlePing_respond)
    _IsolateContext_handlePing_respond.name = "_IsolateContext_handlePing_respond";
  $desc = $collectedClasses._IsolateContext_handlePing_respond[1];
  _IsolateContext_handlePing_respond.prototype = $desc;
  _IsolateContext_handlePing_respond.$__fields__ = ["_captured_responsePort_0"];
  function _EventLoop(events, _activeJsAsyncCount) {
    this.events = events;
    this._activeJsAsyncCount = _activeJsAsyncCount;
    this.$deferredAction();
  }
  _EventLoop.builtin$cls = "_EventLoop";
  if (!"name" in _EventLoop)
    _EventLoop.name = "_EventLoop";
  $desc = $collectedClasses._EventLoop[1];
  _EventLoop.prototype = $desc;
  _EventLoop.$__fields__ = ["events", "_activeJsAsyncCount"];
  function _EventLoop__runHelper_next(__isolate_helper$_captured_this_0) {
    this.__isolate_helper$_captured_this_0 = __isolate_helper$_captured_this_0;
    this.$deferredAction();
  }
  _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
  if (!"name" in _EventLoop__runHelper_next)
    _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
  $desc = $collectedClasses._EventLoop__runHelper_next[1];
  _EventLoop__runHelper_next.prototype = $desc;
  _EventLoop__runHelper_next.$__fields__ = ["__isolate_helper$_captured_this_0"];
  function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
    this.$deferredAction();
  }
  _IsolateEvent.builtin$cls = "_IsolateEvent";
  if (!"name" in _IsolateEvent)
    _IsolateEvent.name = "_IsolateEvent";
  $desc = $collectedClasses._IsolateEvent[1];
  _IsolateEvent.prototype = $desc;
  _IsolateEvent.$__fields__ = ["isolate", "fn", "message"];
  _IsolateEvent.prototype.get$message = function(receiver) {
    return this.message;
  };
  function _MainManagerStub() {
    this.$deferredAction();
  }
  _MainManagerStub.builtin$cls = "_MainManagerStub";
  if (!"name" in _MainManagerStub)
    _MainManagerStub.name = "_MainManagerStub";
  $desc = $collectedClasses._MainManagerStub[1];
  _MainManagerStub.prototype = $desc;
  _MainManagerStub.$__fields__ = [];
  function IsolateNatives__processWorkerMessage_closure(_captured_entryPoint_0, _captured_args_1, _captured_message_2, _captured_isSpawnUri_3, _captured_startPaused_4, _captured_replyTo_5) {
    this._captured_entryPoint_0 = _captured_entryPoint_0;
    this._captured_args_1 = _captured_args_1;
    this._captured_message_2 = _captured_message_2;
    this._captured_isSpawnUri_3 = _captured_isSpawnUri_3;
    this._captured_startPaused_4 = _captured_startPaused_4;
    this._captured_replyTo_5 = _captured_replyTo_5;
    this.$deferredAction();
  }
  IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
  if (!"name" in IsolateNatives__processWorkerMessage_closure)
    IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
  $desc = $collectedClasses.IsolateNatives__processWorkerMessage_closure[1];
  IsolateNatives__processWorkerMessage_closure.prototype = $desc;
  IsolateNatives__processWorkerMessage_closure.$__fields__ = ["_captured_entryPoint_0", "_captured_args_1", "_captured_message_2", "_captured_isSpawnUri_3", "_captured_startPaused_4", "_captured_replyTo_5"];
  function IsolateNatives__startIsolate_runStartFunction(_captured_topLevel_0, _captured_args_1, _captured_message_2, _captured_isSpawnUri_3, _captured_context_4) {
    this._captured_topLevel_0 = _captured_topLevel_0;
    this._captured_args_1 = _captured_args_1;
    this._captured_message_2 = _captured_message_2;
    this._captured_isSpawnUri_3 = _captured_isSpawnUri_3;
    this._captured_context_4 = _captured_context_4;
    this.$deferredAction();
  }
  IsolateNatives__startIsolate_runStartFunction.builtin$cls = "IsolateNatives__startIsolate_runStartFunction";
  if (!"name" in IsolateNatives__startIsolate_runStartFunction)
    IsolateNatives__startIsolate_runStartFunction.name = "IsolateNatives__startIsolate_runStartFunction";
  $desc = $collectedClasses.IsolateNatives__startIsolate_runStartFunction[1];
  IsolateNatives__startIsolate_runStartFunction.prototype = $desc;
  IsolateNatives__startIsolate_runStartFunction.$__fields__ = ["_captured_topLevel_0", "_captured_args_1", "_captured_message_2", "_captured_isSpawnUri_3", "_captured_context_4"];
  function _BaseSendPort() {
    this.$deferredAction();
  }
  _BaseSendPort.builtin$cls = "_BaseSendPort";
  if (!"name" in _BaseSendPort)
    _BaseSendPort.name = "_BaseSendPort";
  $desc = $collectedClasses._BaseSendPort[1];
  _BaseSendPort.prototype = $desc;
  _BaseSendPort.$__fields__ = [];
  function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
    this.$deferredAction();
  }
  _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
  if (!"name" in _NativeJsSendPort)
    _NativeJsSendPort.name = "_NativeJsSendPort";
  $desc = $collectedClasses._NativeJsSendPort[1];
  _NativeJsSendPort.prototype = $desc;
  _NativeJsSendPort.$__fields__ = ["_receivePort", "_isolateId"];
  function _NativeJsSendPort_send_closure(__isolate_helper$_captured_this_0, _captured_msg_1) {
    this.__isolate_helper$_captured_this_0 = __isolate_helper$_captured_this_0;
    this._captured_msg_1 = _captured_msg_1;
    this.$deferredAction();
  }
  _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
  if (!"name" in _NativeJsSendPort_send_closure)
    _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
  $desc = $collectedClasses._NativeJsSendPort_send_closure[1];
  _NativeJsSendPort_send_closure.prototype = $desc;
  _NativeJsSendPort_send_closure.$__fields__ = ["__isolate_helper$_captured_this_0", "_captured_msg_1"];
  function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
    this.$deferredAction();
  }
  _WorkerSendPort.builtin$cls = "_WorkerSendPort";
  if (!"name" in _WorkerSendPort)
    _WorkerSendPort.name = "_WorkerSendPort";
  $desc = $collectedClasses._WorkerSendPort[1];
  _WorkerSendPort.prototype = $desc;
  _WorkerSendPort.$__fields__ = ["_workerId", "_receivePortId", "_isolateId"];
  function RawReceivePortImpl(_id, _handler, _isClosed) {
    this._id = _id;
    this._handler = _handler;
    this._isClosed = _isClosed;
    this.$deferredAction();
  }
  RawReceivePortImpl.builtin$cls = "RawReceivePortImpl";
  if (!"name" in RawReceivePortImpl)
    RawReceivePortImpl.name = "RawReceivePortImpl";
  $desc = $collectedClasses.RawReceivePortImpl[1];
  RawReceivePortImpl.prototype = $desc;
  RawReceivePortImpl.$__fields__ = ["_id", "_handler", "_isClosed"];
  RawReceivePortImpl.prototype.get$_id = function() {
    return this._id;
  };
  RawReceivePortImpl.prototype.get$_isClosed = function() {
    return this._isClosed;
  };
  function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
    this.$deferredAction();
  }
  TimerImpl.builtin$cls = "TimerImpl";
  if (!"name" in TimerImpl)
    TimerImpl.name = "TimerImpl";
  $desc = $collectedClasses.TimerImpl[1];
  TimerImpl.prototype = $desc;
  TimerImpl.$__fields__ = ["_once", "_inEventLoop", "_handle"];
  function TimerImpl_internalCallback(__isolate_helper$_captured_this_0, _captured_callback_1) {
    this.__isolate_helper$_captured_this_0 = __isolate_helper$_captured_this_0;
    this._captured_callback_1 = _captured_callback_1;
    this.$deferredAction();
  }
  TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
  if (!"name" in TimerImpl_internalCallback)
    TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
  $desc = $collectedClasses.TimerImpl_internalCallback[1];
  TimerImpl_internalCallback.prototype = $desc;
  TimerImpl_internalCallback.$__fields__ = ["__isolate_helper$_captured_this_0", "_captured_callback_1"];
  function TimerImpl_internalCallback0(__isolate_helper$_captured_this_2, _captured_callback_3) {
    this.__isolate_helper$_captured_this_2 = __isolate_helper$_captured_this_2;
    this._captured_callback_3 = _captured_callback_3;
    this.$deferredAction();
  }
  TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
  if (!"name" in TimerImpl_internalCallback0)
    TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
  $desc = $collectedClasses.TimerImpl_internalCallback0[1];
  TimerImpl_internalCallback0.prototype = $desc;
  TimerImpl_internalCallback0.$__fields__ = ["__isolate_helper$_captured_this_2", "_captured_callback_3"];
  function CapabilityImpl(_id) {
    this._id = _id;
    this.$deferredAction();
  }
  CapabilityImpl.builtin$cls = "CapabilityImpl";
  if (!"name" in CapabilityImpl)
    CapabilityImpl.name = "CapabilityImpl";
  $desc = $collectedClasses.CapabilityImpl[1];
  CapabilityImpl.prototype = $desc;
  CapabilityImpl.$__fields__ = ["_id"];
  CapabilityImpl.prototype.get$_id = function() {
    return this._id;
  };
  function _Serializer(_serializeSendPorts, serializedObjectIds) {
    this._serializeSendPorts = _serializeSendPorts;
    this.serializedObjectIds = serializedObjectIds;
    this.$deferredAction();
  }
  _Serializer.builtin$cls = "_Serializer";
  if (!"name" in _Serializer)
    _Serializer.name = "_Serializer";
  $desc = $collectedClasses._Serializer[1];
  _Serializer.prototype = $desc;
  _Serializer.$__fields__ = ["_serializeSendPorts", "serializedObjectIds"];
  function _Deserializer(_adjustSendPorts, deserializedObjects) {
    this._adjustSendPorts = _adjustSendPorts;
    this.deserializedObjects = deserializedObjects;
    this.$deferredAction();
  }
  _Deserializer.builtin$cls = "_Deserializer";
  if (!"name" in _Deserializer)
    _Deserializer.name = "_Deserializer";
  $desc = $collectedClasses._Deserializer[1];
  _Deserializer.prototype = $desc;
  _Deserializer.$__fields__ = ["_adjustSendPorts", "deserializedObjects"];
  function ConstantMap() {
    this.$deferredAction();
  }
  ConstantMap.builtin$cls = "ConstantMap";
  if (!"name" in ConstantMap)
    ConstantMap.name = "ConstantMap";
  $desc = $collectedClasses.ConstantMap[1];
  ConstantMap.prototype = $desc;
  ConstantMap.$__fields__ = [];
  function ConstantStringMap(length, __js_helper$_jsObject, __js_helper$_keys) {
    this.length = length;
    this.__js_helper$_jsObject = __js_helper$_jsObject;
    this.__js_helper$_keys = __js_helper$_keys;
    this.$deferredAction();
  }
  ConstantStringMap.builtin$cls = "ConstantStringMap";
  if (!"name" in ConstantStringMap)
    ConstantStringMap.name = "ConstantStringMap";
  $desc = $collectedClasses.ConstantStringMap[1];
  ConstantStringMap.prototype = $desc;
  ConstantStringMap.$__fields__ = ["length", "__js_helper$_jsObject", "__js_helper$_keys"];
  ConstantStringMap.prototype.get$length = function(receiver) {
    return this.length;
  };
  function _ConstantMapKeyIterable(_map) {
    this._map = _map;
    this.$deferredAction();
  }
  _ConstantMapKeyIterable.builtin$cls = "_ConstantMapKeyIterable";
  if (!"name" in _ConstantMapKeyIterable)
    _ConstantMapKeyIterable.name = "_ConstantMapKeyIterable";
  $desc = $collectedClasses._ConstantMapKeyIterable[1];
  _ConstantMapKeyIterable.prototype = $desc;
  _ConstantMapKeyIterable.$__fields__ = ["_map"];
  function JSInvocationMirror(__js_helper$_memberName, _internalName, _kind, _arguments, _namedArgumentNames, _namedIndices) {
    this.__js_helper$_memberName = __js_helper$_memberName;
    this._internalName = _internalName;
    this._kind = _kind;
    this._arguments = _arguments;
    this._namedArgumentNames = _namedArgumentNames;
    this._namedIndices = _namedIndices;
    this.$deferredAction();
  }
  JSInvocationMirror.builtin$cls = "JSInvocationMirror";
  if (!"name" in JSInvocationMirror)
    JSInvocationMirror.name = "JSInvocationMirror";
  $desc = $collectedClasses.JSInvocationMirror[1];
  JSInvocationMirror.prototype = $desc;
  JSInvocationMirror.$__fields__ = ["__js_helper$_memberName", "_internalName", "_kind", "_arguments", "_namedArgumentNames", "_namedIndices"];
  function ReflectionInfo(jsFunction, data, isAccessor, requiredParameterCount, optionalParameterCount, areOptionalParametersNamed, functionType, cachedSortedIndices) {
    this.jsFunction = jsFunction;
    this.data = data;
    this.isAccessor = isAccessor;
    this.requiredParameterCount = requiredParameterCount;
    this.optionalParameterCount = optionalParameterCount;
    this.areOptionalParametersNamed = areOptionalParametersNamed;
    this.functionType = functionType;
    this.cachedSortedIndices = cachedSortedIndices;
    this.$deferredAction();
  }
  ReflectionInfo.builtin$cls = "ReflectionInfo";
  if (!"name" in ReflectionInfo)
    ReflectionInfo.name = "ReflectionInfo";
  $desc = $collectedClasses.ReflectionInfo[1];
  ReflectionInfo.prototype = $desc;
  ReflectionInfo.$__fields__ = ["jsFunction", "data", "isAccessor", "requiredParameterCount", "optionalParameterCount", "areOptionalParametersNamed", "functionType", "cachedSortedIndices"];
  ReflectionInfo.prototype.get$data = function(receiver) {
    return this.data;
  };
  function Primitives_initTicker_closure(_captured_performance_0) {
    this._captured_performance_0 = _captured_performance_0;
    this.$deferredAction();
  }
  Primitives_initTicker_closure.builtin$cls = "Primitives_initTicker_closure";
  if (!"name" in Primitives_initTicker_closure)
    Primitives_initTicker_closure.name = "Primitives_initTicker_closure";
  $desc = $collectedClasses.Primitives_initTicker_closure[1];
  Primitives_initTicker_closure.prototype = $desc;
  Primitives_initTicker_closure.$__fields__ = ["_captured_performance_0"];
  function Primitives_functionNoSuchMethod_closure(__js_helper$_box_0, _captured_arguments_1, _captured_namedArgumentList_2) {
    this.__js_helper$_box_0 = __js_helper$_box_0;
    this._captured_arguments_1 = _captured_arguments_1;
    this._captured_namedArgumentList_2 = _captured_namedArgumentList_2;
    this.$deferredAction();
  }
  Primitives_functionNoSuchMethod_closure.builtin$cls = "Primitives_functionNoSuchMethod_closure";
  if (!"name" in Primitives_functionNoSuchMethod_closure)
    Primitives_functionNoSuchMethod_closure.name = "Primitives_functionNoSuchMethod_closure";
  $desc = $collectedClasses.Primitives_functionNoSuchMethod_closure[1];
  Primitives_functionNoSuchMethod_closure.prototype = $desc;
  Primitives_functionNoSuchMethod_closure.$__fields__ = ["__js_helper$_box_0", "_captured_arguments_1", "_captured_namedArgumentList_2"];
  function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
    this._pattern = _pattern;
    this._arguments = _arguments;
    this._argumentsExpr = _argumentsExpr;
    this._expr = _expr;
    this._method = _method;
    this._receiver = _receiver;
    this.$deferredAction();
  }
  TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
  if (!"name" in TypeErrorDecoder)
    TypeErrorDecoder.name = "TypeErrorDecoder";
  $desc = $collectedClasses.TypeErrorDecoder[1];
  TypeErrorDecoder.prototype = $desc;
  TypeErrorDecoder.$__fields__ = ["_pattern", "_arguments", "_argumentsExpr", "_expr", "_method", "_receiver"];
  function NullError(_message, _method) {
    this._message = _message;
    this._method = _method;
    this.$deferredAction();
  }
  NullError.builtin$cls = "NullError";
  if (!"name" in NullError)
    NullError.name = "NullError";
  $desc = $collectedClasses.NullError[1];
  NullError.prototype = $desc;
  NullError.$__fields__ = ["_message", "_method"];
  function JsNoSuchMethodError(_message, _method, _receiver) {
    this._message = _message;
    this._method = _method;
    this._receiver = _receiver;
    this.$deferredAction();
  }
  JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
  if (!"name" in JsNoSuchMethodError)
    JsNoSuchMethodError.name = "JsNoSuchMethodError";
  $desc = $collectedClasses.JsNoSuchMethodError[1];
  JsNoSuchMethodError.prototype = $desc;
  JsNoSuchMethodError.$__fields__ = ["_message", "_method", "_receiver"];
  function UnknownJsTypeError(_message) {
    this._message = _message;
    this.$deferredAction();
  }
  UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
  if (!"name" in UnknownJsTypeError)
    UnknownJsTypeError.name = "UnknownJsTypeError";
  $desc = $collectedClasses.UnknownJsTypeError[1];
  UnknownJsTypeError.prototype = $desc;
  UnknownJsTypeError.$__fields__ = ["_message"];
  function unwrapException_saveStackTrace(_captured_ex_0) {
    this._captured_ex_0 = _captured_ex_0;
    this.$deferredAction();
  }
  unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
  if (!"name" in unwrapException_saveStackTrace)
    unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
  $desc = $collectedClasses.unwrapException_saveStackTrace[1];
  unwrapException_saveStackTrace.prototype = $desc;
  unwrapException_saveStackTrace.$__fields__ = ["_captured_ex_0"];
  function _StackTrace(_exception, _trace) {
    this._exception = _exception;
    this._trace = _trace;
    this.$deferredAction();
  }
  _StackTrace.builtin$cls = "_StackTrace";
  if (!"name" in _StackTrace)
    _StackTrace.name = "_StackTrace";
  $desc = $collectedClasses._StackTrace[1];
  _StackTrace.prototype = $desc;
  _StackTrace.$__fields__ = ["_exception", "_trace"];
  function invokeClosure_closure(_captured_closure_0) {
    this._captured_closure_0 = _captured_closure_0;
    this.$deferredAction();
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure[1];
  invokeClosure_closure.prototype = $desc;
  invokeClosure_closure.$__fields__ = ["_captured_closure_0"];
  function invokeClosure_closure0(_captured_closure_1, _captured_arg1_2) {
    this._captured_closure_1 = _captured_closure_1;
    this._captured_arg1_2 = _captured_arg1_2;
    this.$deferredAction();
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0[1];
  invokeClosure_closure0.prototype = $desc;
  invokeClosure_closure0.$__fields__ = ["_captured_closure_1", "_captured_arg1_2"];
  function invokeClosure_closure1(_captured_closure_3, _captured_arg1_4, _captured_arg2_5) {
    this._captured_closure_3 = _captured_closure_3;
    this._captured_arg1_4 = _captured_arg1_4;
    this._captured_arg2_5 = _captured_arg2_5;
    this.$deferredAction();
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1[1];
  invokeClosure_closure1.prototype = $desc;
  invokeClosure_closure1.$__fields__ = ["_captured_closure_3", "_captured_arg1_4", "_captured_arg2_5"];
  function invokeClosure_closure2(_captured_closure_6, _captured_arg1_7, _captured_arg2_8, _captured_arg3_9) {
    this._captured_closure_6 = _captured_closure_6;
    this._captured_arg1_7 = _captured_arg1_7;
    this._captured_arg2_8 = _captured_arg2_8;
    this._captured_arg3_9 = _captured_arg3_9;
    this.$deferredAction();
  }
  invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
  if (!"name" in invokeClosure_closure2)
    invokeClosure_closure2.name = "invokeClosure_closure2";
  $desc = $collectedClasses.invokeClosure_closure2[1];
  invokeClosure_closure2.prototype = $desc;
  invokeClosure_closure2.$__fields__ = ["_captured_closure_6", "_captured_arg1_7", "_captured_arg2_8", "_captured_arg3_9"];
  function invokeClosure_closure3(_captured_closure_10, _captured_arg1_11, _captured_arg2_12, _captured_arg3_13, _captured_arg4_14) {
    this._captured_closure_10 = _captured_closure_10;
    this._captured_arg1_11 = _captured_arg1_11;
    this._captured_arg2_12 = _captured_arg2_12;
    this._captured_arg3_13 = _captured_arg3_13;
    this._captured_arg4_14 = _captured_arg4_14;
    this.$deferredAction();
  }
  invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
  if (!"name" in invokeClosure_closure3)
    invokeClosure_closure3.name = "invokeClosure_closure3";
  $desc = $collectedClasses.invokeClosure_closure3[1];
  invokeClosure_closure3.prototype = $desc;
  invokeClosure_closure3.$__fields__ = ["_captured_closure_10", "_captured_arg1_11", "_captured_arg2_12", "_captured_arg3_13", "_captured_arg4_14"];
  function Closure() {
    this.$deferredAction();
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure[1];
  Closure.prototype = $desc;
  Closure.$__fields__ = [];
  function TearOffClosure() {
    this.$deferredAction();
  }
  TearOffClosure.builtin$cls = "TearOffClosure";
  if (!"name" in TearOffClosure)
    TearOffClosure.name = "TearOffClosure";
  $desc = $collectedClasses.TearOffClosure[1];
  TearOffClosure.prototype = $desc;
  TearOffClosure.$__fields__ = [];
  function BoundClosure(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
    this.$deferredAction();
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure[1];
  BoundClosure.prototype = $desc;
  BoundClosure.$__fields__ = ["_self", "__js_helper$_target", "_receiver", "__js_helper$_name"];
  function CastErrorImplementation(message) {
    this.message = message;
    this.$deferredAction();
  }
  CastErrorImplementation.builtin$cls = "CastErrorImplementation";
  if (!"name" in CastErrorImplementation)
    CastErrorImplementation.name = "CastErrorImplementation";
  $desc = $collectedClasses.CastErrorImplementation[1];
  CastErrorImplementation.prototype = $desc;
  CastErrorImplementation.$__fields__ = ["message"];
  CastErrorImplementation.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RuntimeError(message) {
    this.message = message;
    this.$deferredAction();
  }
  RuntimeError.builtin$cls = "RuntimeError";
  if (!"name" in RuntimeError)
    RuntimeError.name = "RuntimeError";
  $desc = $collectedClasses.RuntimeError[1];
  RuntimeError.prototype = $desc;
  RuntimeError.$__fields__ = ["message"];
  RuntimeError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RuntimeType() {
    this.$deferredAction();
  }
  RuntimeType.builtin$cls = "RuntimeType";
  if (!"name" in RuntimeType)
    RuntimeType.name = "RuntimeType";
  $desc = $collectedClasses.RuntimeType[1];
  RuntimeType.prototype = $desc;
  RuntimeType.$__fields__ = [];
  function RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, namedParameters) {
    this.returnType = returnType;
    this.parameterTypes = parameterTypes;
    this.optionalParameterTypes = optionalParameterTypes;
    this.namedParameters = namedParameters;
    this.$deferredAction();
  }
  RuntimeFunctionType.builtin$cls = "RuntimeFunctionType";
  if (!"name" in RuntimeFunctionType)
    RuntimeFunctionType.name = "RuntimeFunctionType";
  $desc = $collectedClasses.RuntimeFunctionType[1];
  RuntimeFunctionType.prototype = $desc;
  RuntimeFunctionType.$__fields__ = ["returnType", "parameterTypes", "optionalParameterTypes", "namedParameters"];
  function DynamicRuntimeType() {
    this.$deferredAction();
  }
  DynamicRuntimeType.builtin$cls = "DynamicRuntimeType";
  if (!"name" in DynamicRuntimeType)
    DynamicRuntimeType.name = "DynamicRuntimeType";
  $desc = $collectedClasses.DynamicRuntimeType[1];
  DynamicRuntimeType.prototype = $desc;
  DynamicRuntimeType.$__fields__ = [];
  function TypeImpl(_typeName, _unmangledName) {
    this._typeName = _typeName;
    this._unmangledName = _unmangledName;
    this.$deferredAction();
  }
  TypeImpl.builtin$cls = "TypeImpl";
  if (!"name" in TypeImpl)
    TypeImpl.name = "TypeImpl";
  $desc = $collectedClasses.TypeImpl[1];
  TypeImpl.prototype = $desc;
  TypeImpl.$__fields__ = ["_typeName", "_unmangledName"];
  function JsLinkedHashMap(__js_helper$_length, __js_helper$_strings, __js_helper$_nums, __js_helper$_rest, __js_helper$_first, __js_helper$_last, __js_helper$_modifications) {
    this.__js_helper$_length = __js_helper$_length;
    this.__js_helper$_strings = __js_helper$_strings;
    this.__js_helper$_nums = __js_helper$_nums;
    this.__js_helper$_rest = __js_helper$_rest;
    this.__js_helper$_first = __js_helper$_first;
    this.__js_helper$_last = __js_helper$_last;
    this.__js_helper$_modifications = __js_helper$_modifications;
    this.$deferredAction();
  }
  JsLinkedHashMap.builtin$cls = "JsLinkedHashMap";
  if (!"name" in JsLinkedHashMap)
    JsLinkedHashMap.name = "JsLinkedHashMap";
  $desc = $collectedClasses.JsLinkedHashMap[1];
  JsLinkedHashMap.prototype = $desc;
  JsLinkedHashMap.$__fields__ = ["__js_helper$_length", "__js_helper$_strings", "__js_helper$_nums", "__js_helper$_rest", "__js_helper$_first", "__js_helper$_last", "__js_helper$_modifications"];
  function JsLinkedHashMap_values_closure(__js_helper$_captured_this_0) {
    this.__js_helper$_captured_this_0 = __js_helper$_captured_this_0;
    this.$deferredAction();
  }
  JsLinkedHashMap_values_closure.builtin$cls = "JsLinkedHashMap_values_closure";
  if (!"name" in JsLinkedHashMap_values_closure)
    JsLinkedHashMap_values_closure.name = "JsLinkedHashMap_values_closure";
  $desc = $collectedClasses.JsLinkedHashMap_values_closure[1];
  JsLinkedHashMap_values_closure.prototype = $desc;
  JsLinkedHashMap_values_closure.$__fields__ = ["__js_helper$_captured_this_0"];
  function JsLinkedHashMap_addAll_closure(__js_helper$_captured_this_0) {
    this.__js_helper$_captured_this_0 = __js_helper$_captured_this_0;
    this.$deferredAction();
  }
  JsLinkedHashMap_addAll_closure.builtin$cls = "JsLinkedHashMap_addAll_closure";
  if (!"name" in JsLinkedHashMap_addAll_closure)
    JsLinkedHashMap_addAll_closure.name = "JsLinkedHashMap_addAll_closure";
  $desc = $collectedClasses.JsLinkedHashMap_addAll_closure[1];
  JsLinkedHashMap_addAll_closure.prototype = $desc;
  JsLinkedHashMap_addAll_closure.$__fields__ = ["__js_helper$_captured_this_0"];
  function LinkedHashMapCell(hashMapCellKey, hashMapCellValue, __js_helper$_next, __js_helper$_previous) {
    this.hashMapCellKey = hashMapCellKey;
    this.hashMapCellValue = hashMapCellValue;
    this.__js_helper$_next = __js_helper$_next;
    this.__js_helper$_previous = __js_helper$_previous;
    this.$deferredAction();
  }
  LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
  if (!"name" in LinkedHashMapCell)
    LinkedHashMapCell.name = "LinkedHashMapCell";
  $desc = $collectedClasses.LinkedHashMapCell[1];
  LinkedHashMapCell.prototype = $desc;
  LinkedHashMapCell.$__fields__ = ["hashMapCellKey", "hashMapCellValue", "__js_helper$_next", "__js_helper$_previous"];
  LinkedHashMapCell.prototype.get$hashMapCellKey = function() {
    return this.hashMapCellKey;
  };
  LinkedHashMapCell.prototype.get$hashMapCellValue = function() {
    return this.hashMapCellValue;
  };
  LinkedHashMapCell.prototype.set$hashMapCellValue = function(v) {
    return this.hashMapCellValue = v;
  };
  LinkedHashMapCell.prototype.get$__js_helper$_next = function() {
    return this.__js_helper$_next;
  };
  LinkedHashMapCell.prototype.get$__js_helper$_previous = function() {
    return this.__js_helper$_previous;
  };
  function LinkedHashMapKeyIterable(_map) {
    this._map = _map;
    this.$deferredAction();
  }
  LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
  if (!"name" in LinkedHashMapKeyIterable)
    LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
  $desc = $collectedClasses.LinkedHashMapKeyIterable[1];
  LinkedHashMapKeyIterable.prototype = $desc;
  LinkedHashMapKeyIterable.$__fields__ = ["_map"];
  function LinkedHashMapKeyIterator(_map, __js_helper$_modifications, __js_helper$_cell, __js_helper$_current) {
    this._map = _map;
    this.__js_helper$_modifications = __js_helper$_modifications;
    this.__js_helper$_cell = __js_helper$_cell;
    this.__js_helper$_current = __js_helper$_current;
    this.$deferredAction();
  }
  LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
  if (!"name" in LinkedHashMapKeyIterator)
    LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
  $desc = $collectedClasses.LinkedHashMapKeyIterator[1];
  LinkedHashMapKeyIterator.prototype = $desc;
  LinkedHashMapKeyIterator.$__fields__ = ["_map", "__js_helper$_modifications", "__js_helper$_cell", "__js_helper$_current"];
  function initHooks_closure(_captured_getTag_0) {
    this._captured_getTag_0 = _captured_getTag_0;
    this.$deferredAction();
  }
  initHooks_closure.builtin$cls = "initHooks_closure";
  if (!"name" in initHooks_closure)
    initHooks_closure.name = "initHooks_closure";
  $desc = $collectedClasses.initHooks_closure[1];
  initHooks_closure.prototype = $desc;
  initHooks_closure.$__fields__ = ["_captured_getTag_0"];
  function initHooks_closure0(_captured_getUnknownTag_1) {
    this._captured_getUnknownTag_1 = _captured_getUnknownTag_1;
    this.$deferredAction();
  }
  initHooks_closure0.builtin$cls = "initHooks_closure0";
  if (!"name" in initHooks_closure0)
    initHooks_closure0.name = "initHooks_closure0";
  $desc = $collectedClasses.initHooks_closure0[1];
  initHooks_closure0.prototype = $desc;
  initHooks_closure0.$__fields__ = ["_captured_getUnknownTag_1"];
  function initHooks_closure1(_captured_prototypeForTag_2) {
    this._captured_prototypeForTag_2 = _captured_prototypeForTag_2;
    this.$deferredAction();
  }
  initHooks_closure1.builtin$cls = "initHooks_closure1";
  if (!"name" in initHooks_closure1)
    initHooks_closure1.name = "initHooks_closure1";
  $desc = $collectedClasses.initHooks_closure1[1];
  initHooks_closure1.prototype = $desc;
  initHooks_closure1.$__fields__ = ["_captured_prototypeForTag_2"];
  function JSSyntaxRegExp(pattern, _nativeRegExp, _nativeGlobalRegExp, _nativeAnchoredRegExp) {
    this.pattern = pattern;
    this._nativeRegExp = _nativeRegExp;
    this._nativeGlobalRegExp = _nativeGlobalRegExp;
    this._nativeAnchoredRegExp = _nativeAnchoredRegExp;
    this.$deferredAction();
  }
  JSSyntaxRegExp.builtin$cls = "JSSyntaxRegExp";
  if (!"name" in JSSyntaxRegExp)
    JSSyntaxRegExp.name = "JSSyntaxRegExp";
  $desc = $collectedClasses.JSSyntaxRegExp[1];
  JSSyntaxRegExp.prototype = $desc;
  JSSyntaxRegExp.$__fields__ = ["pattern", "_nativeRegExp", "_nativeGlobalRegExp", "_nativeAnchoredRegExp"];
  function _MatchImplementation(pattern, _match) {
    this.pattern = pattern;
    this._match = _match;
    this.$deferredAction();
  }
  _MatchImplementation.builtin$cls = "_MatchImplementation";
  if (!"name" in _MatchImplementation)
    _MatchImplementation.name = "_MatchImplementation";
  $desc = $collectedClasses._MatchImplementation[1];
  _MatchImplementation.prototype = $desc;
  _MatchImplementation.$__fields__ = ["pattern", "_match"];
  function _AllMatchesIterable(_re, __js_helper$_string, __js_helper$_start) {
    this._re = _re;
    this.__js_helper$_string = __js_helper$_string;
    this.__js_helper$_start = __js_helper$_start;
    this.$deferredAction();
  }
  _AllMatchesIterable.builtin$cls = "_AllMatchesIterable";
  if (!"name" in _AllMatchesIterable)
    _AllMatchesIterable.name = "_AllMatchesIterable";
  $desc = $collectedClasses._AllMatchesIterable[1];
  _AllMatchesIterable.prototype = $desc;
  _AllMatchesIterable.$__fields__ = ["_re", "__js_helper$_string", "__js_helper$_start"];
  function _AllMatchesIterator(_regExp, __js_helper$_string, _nextIndex, __js_helper$_current) {
    this._regExp = _regExp;
    this.__js_helper$_string = __js_helper$_string;
    this._nextIndex = _nextIndex;
    this.__js_helper$_current = __js_helper$_current;
    this.$deferredAction();
  }
  _AllMatchesIterator.builtin$cls = "_AllMatchesIterator";
  if (!"name" in _AllMatchesIterator)
    _AllMatchesIterator.name = "_AllMatchesIterator";
  $desc = $collectedClasses._AllMatchesIterator[1];
  _AllMatchesIterator.prototype = $desc;
  _AllMatchesIterator.$__fields__ = ["_regExp", "__js_helper$_string", "_nextIndex", "__js_helper$_current"];
  function Disposable() {
    this.$deferredAction();
  }
  Disposable.builtin$cls = "Disposable";
  if (!"name" in Disposable)
    Disposable.name = "Disposable";
  $desc = $collectedClasses.Disposable[1];
  Disposable.prototype = $desc;
  Disposable.$__fields__ = [];
  function Implementation() {
    this.$deferredAction();
  }
  Implementation.builtin$cls = "Implementation";
  if (!"name" in Implementation)
    Implementation.name = "Implementation";
  $desc = $collectedClasses.Implementation[1];
  Implementation.prototype = $desc;
  Implementation.$__fields__ = [];
  function Completion(value, snippet, score, meta) {
    this.value = value;
    this.snippet = snippet;
    this.score = score;
    this.meta = meta;
    this.$deferredAction();
  }
  Completion.builtin$cls = "Completion";
  if (!"name" in Completion)
    Completion.name = "Completion";
  $desc = $collectedClasses.Completion[1];
  Completion.prototype = $desc;
  Completion.$__fields__ = ["value", "snippet", "score", "meta"];
  Completion.prototype.get$value = function(receiver) {
    return this.value;
  };
  Completion.prototype.get$snippet = function() {
    return this.snippet;
  };
  Completion.prototype.get$score = function() {
    return this.score;
  };
  Completion.prototype.get$meta = function() {
    return this.meta;
  };
  function Point(row, column) {
    this.row = row;
    this.column = column;
    this.$deferredAction();
  }
  Point.builtin$cls = "Point";
  if (!"name" in Point)
    Point.name = "Point";
  $desc = $collectedClasses.Point[1];
  Point.prototype = $desc;
  Point.$__fields__ = ["row", "column"];
  function _ProxyImplementation() {
    this.$deferredAction();
  }
  _ProxyImplementation.builtin$cls = "_ProxyImplementation";
  if (!"name" in _ProxyImplementation)
    _ProxyImplementation.name = "_ProxyImplementation";
  $desc = $collectedClasses._ProxyImplementation[1];
  _ProxyImplementation.prototype = $desc;
  _ProxyImplementation.$__fields__ = [];
  function _jsMap_closure(_captured_jsMap_0) {
    this._captured_jsMap_0 = _captured_jsMap_0;
    this.$deferredAction();
  }
  _jsMap_closure.builtin$cls = "_jsMap_closure";
  if (!"name" in _jsMap_closure)
    _jsMap_closure.name = "_jsMap_closure";
  $desc = $collectedClasses._jsMap_closure[1];
  _jsMap_closure.prototype = $desc;
  _jsMap_closure.$__fields__ = ["_captured_jsMap_0"];
  function HasProxy() {
    this.$deferredAction();
  }
  HasProxy.builtin$cls = "HasProxy";
  if (!"name" in HasProxy)
    HasProxy.name = "HasProxy";
  $desc = $collectedClasses.HasProxy[1];
  HasProxy.prototype = $desc;
  HasProxy.$__fields__ = [];
  function HasProxy$async_closure(_proxy$_captured_this_0) {
    this._proxy$_captured_this_0 = _proxy$_captured_this_0;
    this.$deferredAction();
  }
  HasProxy$async_closure.builtin$cls = "HasProxy$async_closure";
  if (!"name" in HasProxy$async_closure)
    HasProxy$async_closure.name = "HasProxy$async_closure";
  $desc = $collectedClasses.HasProxy$async_closure[1];
  HasProxy$async_closure.prototype = $desc;
  HasProxy$async_closure.$__fields__ = ["_proxy$_captured_this_0"];
  function HasProxy_dispose_closure(_proxy$_captured_this_0) {
    this._proxy$_captured_this_0 = _proxy$_captured_this_0;
    this.$deferredAction();
  }
  HasProxy_dispose_closure.builtin$cls = "HasProxy_dispose_closure";
  if (!"name" in HasProxy_dispose_closure)
    HasProxy_dispose_closure.name = "HasProxy_dispose_closure";
  $desc = $collectedClasses.HasProxy_dispose_closure[1];
  HasProxy_dispose_closure.prototype = $desc;
  HasProxy_dispose_closure.$__fields__ = ["_proxy$_captured_this_0"];
  function _ConfigProxy(_proxy, _onHasProxy) {
    this._proxy = _proxy;
    this._onHasProxy = _onHasProxy;
    this.$deferredAction();
  }
  _ConfigProxy.builtin$cls = "_ConfigProxy";
  if (!"name" in _ConfigProxy)
    _ConfigProxy.name = "_ConfigProxy";
  $desc = $collectedClasses._ConfigProxy[1];
  _ConfigProxy.prototype = $desc;
  _ConfigProxy.$__fields__ = ["_proxy", "_onHasProxy"];
  function _ConfigProxy_loadModule_closure(_captured_completer_0) {
    this._captured_completer_0 = _captured_completer_0;
    this.$deferredAction();
  }
  _ConfigProxy_loadModule_closure.builtin$cls = "_ConfigProxy_loadModule_closure";
  if (!"name" in _ConfigProxy_loadModule_closure)
    _ConfigProxy_loadModule_closure.name = "_ConfigProxy_loadModule_closure";
  $desc = $collectedClasses._ConfigProxy_loadModule_closure[1];
  _ConfigProxy_loadModule_closure.prototype = $desc;
  _ConfigProxy_loadModule_closure.$__fields__ = ["_captured_completer_0"];
  function _EditSessionProxy(_onChange, _onChangeAnnotation, _onChangeBackMarker, _onChangeBreakpoint, _onChangeFold, _onChangeFrontMarker, _onChangeOverwrite, _onChangeScrollLeft, _onChangeScrollTop, _onChangeTabSize, _onChangeWrapLimit, _onChangeWrapMode, _proxy, _onHasProxy) {
    this._onChange = _onChange;
    this._onChangeAnnotation = _onChangeAnnotation;
    this._onChangeBackMarker = _onChangeBackMarker;
    this._onChangeBreakpoint = _onChangeBreakpoint;
    this._onChangeFold = _onChangeFold;
    this._onChangeFrontMarker = _onChangeFrontMarker;
    this._onChangeOverwrite = _onChangeOverwrite;
    this._onChangeScrollLeft = _onChangeScrollLeft;
    this._onChangeScrollTop = _onChangeScrollTop;
    this._onChangeTabSize = _onChangeTabSize;
    this._onChangeWrapLimit = _onChangeWrapLimit;
    this._onChangeWrapMode = _onChangeWrapMode;
    this._proxy = _proxy;
    this._onHasProxy = _onHasProxy;
    this.$deferredAction();
  }
  _EditSessionProxy.builtin$cls = "_EditSessionProxy";
  if (!"name" in _EditSessionProxy)
    _EditSessionProxy.name = "_EditSessionProxy";
  $desc = $collectedClasses._EditSessionProxy[1];
  _EditSessionProxy.prototype = $desc;
  _EditSessionProxy.$__fields__ = ["_onChange", "_onChangeAnnotation", "_onChangeBackMarker", "_onChangeBreakpoint", "_onChangeFold", "_onChangeFrontMarker", "_onChangeOverwrite", "_onChangeScrollLeft", "_onChangeScrollTop", "_onChangeTabSize", "_onChangeWrapLimit", "_onChangeWrapMode", "_proxy", "_onHasProxy"];
  function _EditorProxy(_onBlur, _onLinkClick, _onLinkHover, _onChange, _onChangeSelection, _onChangeSession, _onCopy, _onFocus, _onPaste, _proxy, _onHasProxy) {
    this._onBlur = _onBlur;
    this._onLinkClick = _onLinkClick;
    this._onLinkHover = _onLinkHover;
    this._onChange = _onChange;
    this._onChangeSelection = _onChangeSelection;
    this._onChangeSession = _onChangeSession;
    this._onCopy = _onCopy;
    this._onFocus = _onFocus;
    this._onPaste = _onPaste;
    this._proxy = _proxy;
    this._onHasProxy = _onHasProxy;
    this.$deferredAction();
  }
  _EditorProxy.builtin$cls = "_EditorProxy";
  if (!"name" in _EditorProxy)
    _EditorProxy.name = "_EditorProxy";
  $desc = $collectedClasses._EditorProxy[1];
  _EditorProxy.prototype = $desc;
  _EditorProxy.$__fields__ = ["_onBlur", "_onLinkClick", "_onLinkHover", "_onChange", "_onChangeSelection", "_onChangeSession", "_onCopy", "_onFocus", "_onPaste", "_proxy", "_onHasProxy"];
  function _AutoCompleterReverseProxy(getCompletions, _proxy, _onHasProxy) {
    this.getCompletions = getCompletions;
    this._proxy = _proxy;
    this._onHasProxy = _onHasProxy;
    this.$deferredAction();
  }
  _AutoCompleterReverseProxy.builtin$cls = "_AutoCompleterReverseProxy";
  if (!"name" in _AutoCompleterReverseProxy)
    _AutoCompleterReverseProxy.name = "_AutoCompleterReverseProxy";
  $desc = $collectedClasses._AutoCompleterReverseProxy[1];
  _AutoCompleterReverseProxy.prototype = $desc;
  _AutoCompleterReverseProxy.$__fields__ = ["getCompletions", "_proxy", "_onHasProxy"];
  function _AutoCompleterReverseProxy_closure(_proxy$_captured_this_0) {
    this._proxy$_captured_this_0 = _proxy$_captured_this_0;
    this.$deferredAction();
  }
  _AutoCompleterReverseProxy_closure.builtin$cls = "_AutoCompleterReverseProxy_closure";
  if (!"name" in _AutoCompleterReverseProxy_closure)
    _AutoCompleterReverseProxy_closure.name = "_AutoCompleterReverseProxy_closure";
  $desc = $collectedClasses._AutoCompleterReverseProxy_closure[1];
  _AutoCompleterReverseProxy_closure.prototype = $desc;
  _AutoCompleterReverseProxy_closure.$__fields__ = ["_proxy$_captured_this_0"];
  function _AutoCompleterReverseProxy__closure(_proxy$_captured_callback_1) {
    this._proxy$_captured_callback_1 = _proxy$_captured_callback_1;
    this.$deferredAction();
  }
  _AutoCompleterReverseProxy__closure.builtin$cls = "_AutoCompleterReverseProxy__closure";
  if (!"name" in _AutoCompleterReverseProxy__closure)
    _AutoCompleterReverseProxy__closure.name = "_AutoCompleterReverseProxy__closure";
  $desc = $collectedClasses._AutoCompleterReverseProxy__closure[1];
  _AutoCompleterReverseProxy__closure.prototype = $desc;
  _AutoCompleterReverseProxy__closure.$__fields__ = ["_proxy$_captured_callback_1"];
  function _AutoCompleterReverseProxy__closure0(_captured_callback_2) {
    this._captured_callback_2 = _captured_callback_2;
    this.$deferredAction();
  }
  _AutoCompleterReverseProxy__closure0.builtin$cls = "_AutoCompleterReverseProxy__closure0";
  if (!"name" in _AutoCompleterReverseProxy__closure0)
    _AutoCompleterReverseProxy__closure0.name = "_AutoCompleterReverseProxy__closure0";
  $desc = $collectedClasses._AutoCompleterReverseProxy__closure0[1];
  _AutoCompleterReverseProxy__closure0.prototype = $desc;
  _AutoCompleterReverseProxy__closure0.$__fields__ = ["_captured_callback_2"];
  function _AutoCompleterReverseProxy__closure1(_captured__editor_3, _captured__session_4) {
    this._captured__editor_3 = _captured__editor_3;
    this._captured__session_4 = _captured__session_4;
    this.$deferredAction();
  }
  _AutoCompleterReverseProxy__closure1.builtin$cls = "_AutoCompleterReverseProxy__closure1";
  if (!"name" in _AutoCompleterReverseProxy__closure1)
    _AutoCompleterReverseProxy__closure1.name = "_AutoCompleterReverseProxy__closure1";
  $desc = $collectedClasses._AutoCompleterReverseProxy__closure1[1];
  _AutoCompleterReverseProxy__closure1.prototype = $desc;
  _AutoCompleterReverseProxy__closure1.$__fields__ = ["_captured__editor_3", "_captured__session_4"];
  function _LanguageToolsProxy(_proxy, _onHasProxy) {
    this._proxy = _proxy;
    this._onHasProxy = _onHasProxy;
    this.$deferredAction();
  }
  _LanguageToolsProxy.builtin$cls = "_LanguageToolsProxy";
  if (!"name" in _LanguageToolsProxy)
    _LanguageToolsProxy.name = "_LanguageToolsProxy";
  $desc = $collectedClasses._LanguageToolsProxy[1];
  _LanguageToolsProxy.prototype = $desc;
  _LanguageToolsProxy.$__fields__ = ["_proxy", "_onHasProxy"];
  function _ModeProxy(path, _proxy, _onHasProxy) {
    this.path = path;
    this._proxy = _proxy;
    this._onHasProxy = _onHasProxy;
    this.$deferredAction();
  }
  _ModeProxy.builtin$cls = "_ModeProxy";
  if (!"name" in _ModeProxy)
    _ModeProxy.name = "_ModeProxy";
  $desc = $collectedClasses._ModeProxy[1];
  _ModeProxy.prototype = $desc;
  _ModeProxy.$__fields__ = ["path", "_proxy", "_onHasProxy"];
  _ModeProxy.prototype.get$path = function(receiver) {
    return this.path;
  };
  function _ModeProxy_closure() {
    this.$deferredAction();
  }
  _ModeProxy_closure.builtin$cls = "_ModeProxy_closure";
  if (!"name" in _ModeProxy_closure)
    _ModeProxy_closure.name = "_ModeProxy_closure";
  $desc = $collectedClasses._ModeProxy_closure[1];
  _ModeProxy_closure.prototype = $desc;
  _ModeProxy_closure.$__fields__ = [];
  function _ThemeProxy(path, _proxy, _onHasProxy) {
    this.path = path;
    this._proxy = _proxy;
    this._onHasProxy = _onHasProxy;
    this.$deferredAction();
  }
  _ThemeProxy.builtin$cls = "_ThemeProxy";
  if (!"name" in _ThemeProxy)
    _ThemeProxy.name = "_ThemeProxy";
  $desc = $collectedClasses._ThemeProxy[1];
  _ThemeProxy.prototype = $desc;
  _ThemeProxy.$__fields__ = ["path", "_proxy", "_onHasProxy"];
  _ThemeProxy.prototype.get$path = function(receiver) {
    return this.path;
  };
  function ArchiveException(message) {
    this.message = message;
    this.$deferredAction();
  }
  ArchiveException.builtin$cls = "ArchiveException";
  if (!"name" in ArchiveException)
    ArchiveException.name = "ArchiveException";
  $desc = $collectedClasses.ArchiveException[1];
  ArchiveException.prototype = $desc;
  ArchiveException.$__fields__ = ["message"];
  ArchiveException.prototype.get$message = function(receiver) {
    return this.message;
  };
  function InputStream(buffer, offset, start, byteOrder, _archive$_length) {
    this.buffer = buffer;
    this.offset = offset;
    this.start = start;
    this.byteOrder = byteOrder;
    this._archive$_length = _archive$_length;
    this.$deferredAction();
  }
  InputStream.builtin$cls = "InputStream";
  if (!"name" in InputStream)
    InputStream.name = "InputStream";
  $desc = $collectedClasses.InputStream[1];
  InputStream.prototype = $desc;
  InputStream.$__fields__ = ["buffer", "offset", "start", "byteOrder", "_archive$_length"];
  InputStream.prototype.get$buffer = function(receiver) {
    return this.buffer;
  };
  InputStream.prototype.get$offset = function(receiver) {
    return this.offset;
  };
  function OutputStream(length, byteOrder, _archive$_buffer) {
    this.length = length;
    this.byteOrder = byteOrder;
    this._archive$_buffer = _archive$_buffer;
    this.$deferredAction();
  }
  OutputStream.builtin$cls = "OutputStream";
  if (!"name" in OutputStream)
    OutputStream.name = "OutputStream";
  $desc = $collectedClasses.OutputStream[1];
  OutputStream.prototype = $desc;
  OutputStream.$__fields__ = ["length", "byteOrder", "_archive$_buffer"];
  OutputStream.prototype.get$length = function(receiver) {
    return this.length;
  };
  function HuffmanTable(table, maxCodeLength, minCodeLength) {
    this.table = table;
    this.maxCodeLength = maxCodeLength;
    this.minCodeLength = minCodeLength;
    this.$deferredAction();
  }
  HuffmanTable.builtin$cls = "HuffmanTable";
  if (!"name" in HuffmanTable)
    HuffmanTable.name = "HuffmanTable";
  $desc = $collectedClasses.HuffmanTable[1];
  HuffmanTable.prototype = $desc;
  HuffmanTable.$__fields__ = ["table", "maxCodeLength", "minCodeLength"];
  function Inflate(input, output, _bitBuffer, _bitBufferLen, _blockPos, _fixedLiteralLengthTable, _fixedDistanceTable) {
    this.input = input;
    this.output = output;
    this._bitBuffer = _bitBuffer;
    this._bitBufferLen = _bitBufferLen;
    this._blockPos = _blockPos;
    this._fixedLiteralLengthTable = _fixedLiteralLengthTable;
    this._fixedDistanceTable = _fixedDistanceTable;
    this.$deferredAction();
  }
  Inflate.builtin$cls = "Inflate";
  if (!"name" in Inflate)
    Inflate.name = "Inflate";
  $desc = $collectedClasses.Inflate[1];
  Inflate.prototype = $desc;
  Inflate.$__fields__ = ["input", "output", "_bitBuffer", "_bitBufferLen", "_blockPos", "_fixedLiteralLengthTable", "_fixedDistanceTable"];
  function ChromeObject() {
    this.$deferredAction();
  }
  ChromeObject.builtin$cls = "ChromeObject";
  if (!"name" in ChromeObject)
    ChromeObject.name = "ChromeObject";
  $desc = $collectedClasses.ChromeObject[1];
  ChromeObject.prototype = $desc;
  ChromeObject.$__fields__ = [];
  function ArrayBuffer(jsProxy) {
    this.jsProxy = jsProxy;
    this.$deferredAction();
  }
  ArrayBuffer.builtin$cls = "ArrayBuffer";
  if (!"name" in ArrayBuffer)
    ArrayBuffer.name = "ArrayBuffer";
  $desc = $collectedClasses.ArrayBuffer[1];
  ArrayBuffer.prototype = $desc;
  ArrayBuffer.$__fields__ = ["jsProxy"];
  function CrEntry() {
    this.$deferredAction();
  }
  CrEntry.builtin$cls = "CrEntry";
  if (!"name" in CrEntry)
    CrEntry.name = "CrEntry";
  $desc = $collectedClasses.CrEntry[1];
  CrEntry.prototype = $desc;
  CrEntry.$__fields__ = [];
  function CrFileEntry() {
    this.$deferredAction();
  }
  CrFileEntry.builtin$cls = "CrFileEntry";
  if (!"name" in CrFileEntry)
    CrFileEntry.name = "CrFileEntry";
  $desc = $collectedClasses.CrFileEntry[1];
  CrFileEntry.prototype = $desc;
  CrFileEntry.$__fields__ = [];
  function ChromeFileEntry() {
    this.$deferredAction();
  }
  ChromeFileEntry.builtin$cls = "ChromeFileEntry";
  if (!"name" in ChromeFileEntry)
    ChromeFileEntry.name = "ChromeFileEntry";
  $desc = $collectedClasses.ChromeFileEntry[1];
  ChromeFileEntry.prototype = $desc;
  ChromeFileEntry.$__fields__ = [];
  function CodeUnits(_string) {
    this._string = _string;
    this.$deferredAction();
  }
  CodeUnits.builtin$cls = "CodeUnits";
  if (!"name" in CodeUnits)
    CodeUnits.name = "CodeUnits";
  $desc = $collectedClasses.CodeUnits[1];
  CodeUnits.prototype = $desc;
  CodeUnits.$__fields__ = ["_string"];
  function ListIterable() {
    this.$deferredAction();
  }
  ListIterable.builtin$cls = "ListIterable";
  if (!"name" in ListIterable)
    ListIterable.name = "ListIterable";
  $desc = $collectedClasses.ListIterable[1];
  ListIterable.prototype = $desc;
  ListIterable.$__fields__ = [];
  function SubListIterable(_iterable, __internal$_start, _endOrLength) {
    this._iterable = _iterable;
    this.__internal$_start = __internal$_start;
    this._endOrLength = _endOrLength;
    this.$deferredAction();
  }
  SubListIterable.builtin$cls = "SubListIterable";
  if (!"name" in SubListIterable)
    SubListIterable.name = "SubListIterable";
  $desc = $collectedClasses.SubListIterable[1];
  SubListIterable.prototype = $desc;
  SubListIterable.$__fields__ = ["_iterable", "__internal$_start", "_endOrLength"];
  function ListIterator(_iterable, __internal$_length, _index, __internal$_current) {
    this._iterable = _iterable;
    this.__internal$_length = __internal$_length;
    this._index = _index;
    this.__internal$_current = __internal$_current;
    this.$deferredAction();
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator[1];
  ListIterator.prototype = $desc;
  ListIterator.$__fields__ = ["_iterable", "__internal$_length", "_index", "__internal$_current"];
  function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
    this.$deferredAction();
  }
  MappedIterable.builtin$cls = "MappedIterable";
  if (!"name" in MappedIterable)
    MappedIterable.name = "MappedIterable";
  $desc = $collectedClasses.MappedIterable[1];
  MappedIterable.prototype = $desc;
  MappedIterable.$__fields__ = ["_iterable", "_f"];
  function EfficientLengthMappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
    this.$deferredAction();
  }
  EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
  if (!"name" in EfficientLengthMappedIterable)
    EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
  $desc = $collectedClasses.EfficientLengthMappedIterable[1];
  EfficientLengthMappedIterable.prototype = $desc;
  EfficientLengthMappedIterable.$__fields__ = ["_iterable", "_f"];
  function MappedIterator(__internal$_current, _iterator, _f) {
    this.__internal$_current = __internal$_current;
    this._iterator = _iterator;
    this._f = _f;
    this.$deferredAction();
  }
  MappedIterator.builtin$cls = "MappedIterator";
  if (!"name" in MappedIterator)
    MappedIterator.name = "MappedIterator";
  $desc = $collectedClasses.MappedIterator[1];
  MappedIterator.prototype = $desc;
  MappedIterator.$__fields__ = ["__internal$_current", "_iterator", "_f"];
  function MappedListIterable(__internal$_source, _f) {
    this.__internal$_source = __internal$_source;
    this._f = _f;
    this.$deferredAction();
  }
  MappedListIterable.builtin$cls = "MappedListIterable";
  if (!"name" in MappedListIterable)
    MappedListIterable.name = "MappedListIterable";
  $desc = $collectedClasses.MappedListIterable[1];
  MappedListIterable.prototype = $desc;
  MappedListIterable.$__fields__ = ["__internal$_source", "_f"];
  function SkipIterable(_iterable, _skipCount) {
    this._iterable = _iterable;
    this._skipCount = _skipCount;
    this.$deferredAction();
  }
  SkipIterable.builtin$cls = "SkipIterable";
  if (!"name" in SkipIterable)
    SkipIterable.name = "SkipIterable";
  $desc = $collectedClasses.SkipIterable[1];
  SkipIterable.prototype = $desc;
  SkipIterable.$__fields__ = ["_iterable", "_skipCount"];
  function EfficientLengthSkipIterable(_iterable, _skipCount) {
    this._iterable = _iterable;
    this._skipCount = _skipCount;
    this.$deferredAction();
  }
  EfficientLengthSkipIterable.builtin$cls = "EfficientLengthSkipIterable";
  if (!"name" in EfficientLengthSkipIterable)
    EfficientLengthSkipIterable.name = "EfficientLengthSkipIterable";
  $desc = $collectedClasses.EfficientLengthSkipIterable[1];
  EfficientLengthSkipIterable.prototype = $desc;
  EfficientLengthSkipIterable.$__fields__ = ["_iterable", "_skipCount"];
  function SkipIterator(_iterator, _skipCount) {
    this._iterator = _iterator;
    this._skipCount = _skipCount;
    this.$deferredAction();
  }
  SkipIterator.builtin$cls = "SkipIterator";
  if (!"name" in SkipIterator)
    SkipIterator.name = "SkipIterator";
  $desc = $collectedClasses.SkipIterator[1];
  SkipIterator.prototype = $desc;
  SkipIterator.$__fields__ = ["_iterator", "_skipCount"];
  function EmptyIterable() {
    this.$deferredAction();
  }
  EmptyIterable.builtin$cls = "EmptyIterable";
  if (!"name" in EmptyIterable)
    EmptyIterable.name = "EmptyIterable";
  $desc = $collectedClasses.EmptyIterable[1];
  EmptyIterable.prototype = $desc;
  EmptyIterable.$__fields__ = [];
  function EmptyIterator() {
    this.$deferredAction();
  }
  EmptyIterator.builtin$cls = "EmptyIterator";
  if (!"name" in EmptyIterator)
    EmptyIterator.name = "EmptyIterator";
  $desc = $collectedClasses.EmptyIterator[1];
  EmptyIterator.prototype = $desc;
  EmptyIterator.$__fields__ = [];
  function FixedLengthListMixin() {
    this.$deferredAction();
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin[1];
  FixedLengthListMixin.prototype = $desc;
  FixedLengthListMixin.$__fields__ = [];
  function UnmodifiableListMixin() {
    this.$deferredAction();
  }
  UnmodifiableListMixin.builtin$cls = "UnmodifiableListMixin";
  if (!"name" in UnmodifiableListMixin)
    UnmodifiableListMixin.name = "UnmodifiableListMixin";
  $desc = $collectedClasses.UnmodifiableListMixin[1];
  UnmodifiableListMixin.prototype = $desc;
  UnmodifiableListMixin.$__fields__ = [];
  function UnmodifiableListBase() {
    this.$deferredAction();
  }
  UnmodifiableListBase.builtin$cls = "UnmodifiableListBase";
  if (!"name" in UnmodifiableListBase)
    UnmodifiableListBase.name = "UnmodifiableListBase";
  $desc = $collectedClasses.UnmodifiableListBase[1];
  UnmodifiableListBase.prototype = $desc;
  UnmodifiableListBase.$__fields__ = [];
  function Symbol0(_name) {
    this._name = _name;
    this.$deferredAction();
  }
  Symbol0.builtin$cls = "Symbol0";
  if (!"name" in Symbol0)
    Symbol0.name = "Symbol0";
  $desc = $collectedClasses.Symbol0[1];
  Symbol0.prototype = $desc;
  Symbol0.$__fields__ = ["_name"];
  Symbol0.prototype.get$_name = function() {
    return this._name;
  };
  function _AsyncRun__initializeScheduleImmediate_internalCallback(_box_0) {
    this._box_0 = _box_0;
    this.$deferredAction();
  }
  _AsyncRun__initializeScheduleImmediate_internalCallback.builtin$cls = "_AsyncRun__initializeScheduleImmediate_internalCallback";
  if (!"name" in _AsyncRun__initializeScheduleImmediate_internalCallback)
    _AsyncRun__initializeScheduleImmediate_internalCallback.name = "_AsyncRun__initializeScheduleImmediate_internalCallback";
  $desc = $collectedClasses._AsyncRun__initializeScheduleImmediate_internalCallback[1];
  _AsyncRun__initializeScheduleImmediate_internalCallback.prototype = $desc;
  _AsyncRun__initializeScheduleImmediate_internalCallback.$__fields__ = ["_box_0"];
  function _AsyncRun__initializeScheduleImmediate_closure(_box_0, _captured_div_1, _captured_span_2) {
    this._box_0 = _box_0;
    this._captured_div_1 = _captured_div_1;
    this._captured_span_2 = _captured_span_2;
    this.$deferredAction();
  }
  _AsyncRun__initializeScheduleImmediate_closure.builtin$cls = "_AsyncRun__initializeScheduleImmediate_closure";
  if (!"name" in _AsyncRun__initializeScheduleImmediate_closure)
    _AsyncRun__initializeScheduleImmediate_closure.name = "_AsyncRun__initializeScheduleImmediate_closure";
  $desc = $collectedClasses._AsyncRun__initializeScheduleImmediate_closure[1];
  _AsyncRun__initializeScheduleImmediate_closure.prototype = $desc;
  _AsyncRun__initializeScheduleImmediate_closure.$__fields__ = ["_box_0", "_captured_div_1", "_captured_span_2"];
  function _AsyncRun__scheduleImmediateJsOverride_internalCallback(_captured_callback_0) {
    this._captured_callback_0 = _captured_callback_0;
    this.$deferredAction();
  }
  _AsyncRun__scheduleImmediateJsOverride_internalCallback.builtin$cls = "_AsyncRun__scheduleImmediateJsOverride_internalCallback";
  if (!"name" in _AsyncRun__scheduleImmediateJsOverride_internalCallback)
    _AsyncRun__scheduleImmediateJsOverride_internalCallback.name = "_AsyncRun__scheduleImmediateJsOverride_internalCallback";
  $desc = $collectedClasses._AsyncRun__scheduleImmediateJsOverride_internalCallback[1];
  _AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = $desc;
  _AsyncRun__scheduleImmediateJsOverride_internalCallback.$__fields__ = ["_captured_callback_0"];
  function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(_captured_callback_0) {
    this._captured_callback_0 = _captured_callback_0;
    this.$deferredAction();
  }
  _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.builtin$cls = "_AsyncRun__scheduleImmediateWithSetImmediate_internalCallback";
  if (!"name" in _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback)
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.name = "_AsyncRun__scheduleImmediateWithSetImmediate_internalCallback";
  $desc = $collectedClasses._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback[1];
  _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = $desc;
  _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.$__fields__ = ["_captured_callback_0"];
  function _UncaughtAsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
    this.$deferredAction();
  }
  _UncaughtAsyncError.builtin$cls = "_UncaughtAsyncError";
  if (!"name" in _UncaughtAsyncError)
    _UncaughtAsyncError.name = "_UncaughtAsyncError";
  $desc = $collectedClasses._UncaughtAsyncError[1];
  _UncaughtAsyncError.prototype = $desc;
  _UncaughtAsyncError.$__fields__ = ["error", "stackTrace"];
  function Future() {
    this.$deferredAction();
  }
  Future.builtin$cls = "Future";
  if (!"name" in Future)
    Future.name = "Future";
  $desc = $collectedClasses.Future[1];
  Future.prototype = $desc;
  Future.$__fields__ = [];
  function Future_Future$delayed_closure(_captured_computation_0, _async$_captured_result_1) {
    this._captured_computation_0 = _captured_computation_0;
    this._async$_captured_result_1 = _async$_captured_result_1;
    this.$deferredAction();
  }
  Future_Future$delayed_closure.builtin$cls = "Future_Future$delayed_closure";
  if (!"name" in Future_Future$delayed_closure)
    Future_Future$delayed_closure.name = "Future_Future$delayed_closure";
  $desc = $collectedClasses.Future_Future$delayed_closure[1];
  Future_Future$delayed_closure.prototype = $desc;
  Future_Future$delayed_closure.$__fields__ = ["_captured_computation_0", "_async$_captured_result_1"];
  function Future_wait_handleError(_box_0, _captured_eagerError_1, _captured_cleanUp_2, _captured_result_3) {
    this._box_0 = _box_0;
    this._captured_eagerError_1 = _captured_eagerError_1;
    this._captured_cleanUp_2 = _captured_cleanUp_2;
    this._captured_result_3 = _captured_result_3;
    this.$deferredAction();
  }
  Future_wait_handleError.builtin$cls = "Future_wait_handleError";
  if (!"name" in Future_wait_handleError)
    Future_wait_handleError.name = "Future_wait_handleError";
  $desc = $collectedClasses.Future_wait_handleError[1];
  Future_wait_handleError.prototype = $desc;
  Future_wait_handleError.$__fields__ = ["_box_0", "_captured_eagerError_1", "_captured_cleanUp_2", "_captured_result_3"];
  function Future_wait_handleError_closure(_captured_cleanUp_4, _captured_value_5) {
    this._captured_cleanUp_4 = _captured_cleanUp_4;
    this._captured_value_5 = _captured_value_5;
    this.$deferredAction();
  }
  Future_wait_handleError_closure.builtin$cls = "Future_wait_handleError_closure";
  if (!"name" in Future_wait_handleError_closure)
    Future_wait_handleError_closure.name = "Future_wait_handleError_closure";
  $desc = $collectedClasses.Future_wait_handleError_closure[1];
  Future_wait_handleError_closure.prototype = $desc;
  Future_wait_handleError_closure.$__fields__ = ["_captured_cleanUp_4", "_captured_value_5"];
  function Future_wait_closure(_box_0, _captured_eagerError_6, _captured_cleanUp_7, _captured_result_8, _captured_pos_9) {
    this._box_0 = _box_0;
    this._captured_eagerError_6 = _captured_eagerError_6;
    this._captured_cleanUp_7 = _captured_cleanUp_7;
    this._captured_result_8 = _captured_result_8;
    this._captured_pos_9 = _captured_pos_9;
    this.$deferredAction();
  }
  Future_wait_closure.builtin$cls = "Future_wait_closure";
  if (!"name" in Future_wait_closure)
    Future_wait_closure.name = "Future_wait_closure";
  $desc = $collectedClasses.Future_wait_closure[1];
  Future_wait_closure.prototype = $desc;
  Future_wait_closure.$__fields__ = ["_box_0", "_captured_eagerError_6", "_captured_cleanUp_7", "_captured_result_8", "_captured_pos_9"];
  function Future_wait__closure(_captured_cleanUp_10, _captured_value_11) {
    this._captured_cleanUp_10 = _captured_cleanUp_10;
    this._captured_value_11 = _captured_value_11;
    this.$deferredAction();
  }
  Future_wait__closure.builtin$cls = "Future_wait__closure";
  if (!"name" in Future_wait__closure)
    Future_wait__closure.name = "Future_wait__closure";
  $desc = $collectedClasses.Future_wait__closure[1];
  Future_wait__closure.prototype = $desc;
  Future_wait__closure.$__fields__ = ["_captured_cleanUp_10", "_captured_value_11"];
  function Future_forEach_closure(_captured_f_0, _captured_iterator_1) {
    this._captured_f_0 = _captured_f_0;
    this._captured_iterator_1 = _captured_iterator_1;
    this.$deferredAction();
  }
  Future_forEach_closure.builtin$cls = "Future_forEach_closure";
  if (!"name" in Future_forEach_closure)
    Future_forEach_closure.name = "Future_forEach_closure";
  $desc = $collectedClasses.Future_forEach_closure[1];
  Future_forEach_closure.prototype = $desc;
  Future_forEach_closure.$__fields__ = ["_captured_f_0", "_captured_iterator_1"];
  function Future_forEach__closure(_captured_f_2, _captured_iterator_3) {
    this._captured_f_2 = _captured_f_2;
    this._captured_iterator_3 = _captured_iterator_3;
    this.$deferredAction();
  }
  Future_forEach__closure.builtin$cls = "Future_forEach__closure";
  if (!"name" in Future_forEach__closure)
    Future_forEach__closure.name = "Future_forEach__closure";
  $desc = $collectedClasses.Future_forEach__closure[1];
  Future_forEach__closure.prototype = $desc;
  Future_forEach__closure.$__fields__ = ["_captured_f_2", "_captured_iterator_3"];
  function Future_forEach__closure0() {
    this.$deferredAction();
  }
  Future_forEach__closure0.builtin$cls = "Future_forEach__closure0";
  if (!"name" in Future_forEach__closure0)
    Future_forEach__closure0.name = "Future_forEach__closure0";
  $desc = $collectedClasses.Future_forEach__closure0[1];
  Future_forEach__closure0.prototype = $desc;
  Future_forEach__closure0.$__fields__ = [];
  function Future_doWhile_closure(_box_0, _captured_f_1, _captured_doneSignal_2) {
    this._box_0 = _box_0;
    this._captured_f_1 = _captured_f_1;
    this._captured_doneSignal_2 = _captured_doneSignal_2;
    this.$deferredAction();
  }
  Future_doWhile_closure.builtin$cls = "Future_doWhile_closure";
  if (!"name" in Future_doWhile_closure)
    Future_doWhile_closure.name = "Future_doWhile_closure";
  $desc = $collectedClasses.Future_doWhile_closure[1];
  Future_doWhile_closure.prototype = $desc;
  Future_doWhile_closure.$__fields__ = ["_box_0", "_captured_f_1", "_captured_doneSignal_2"];
  function _Completer() {
    this.$deferredAction();
  }
  _Completer.builtin$cls = "_Completer";
  if (!"name" in _Completer)
    _Completer.name = "_Completer";
  $desc = $collectedClasses._Completer[1];
  _Completer.prototype = $desc;
  _Completer.$__fields__ = [];
  function _AsyncCompleter(future) {
    this.future = future;
    this.$deferredAction();
  }
  _AsyncCompleter.builtin$cls = "_AsyncCompleter";
  if (!"name" in _AsyncCompleter)
    _AsyncCompleter.name = "_AsyncCompleter";
  $desc = $collectedClasses._AsyncCompleter[1];
  _AsyncCompleter.prototype = $desc;
  _AsyncCompleter.$__fields__ = ["future"];
  function _FutureListener(_nextListener, result, state, callback, errorCallback) {
    this._nextListener = _nextListener;
    this.result = result;
    this.state = state;
    this.callback = callback;
    this.errorCallback = errorCallback;
    this.$deferredAction();
  }
  _FutureListener.builtin$cls = "_FutureListener";
  if (!"name" in _FutureListener)
    _FutureListener.name = "_FutureListener";
  $desc = $collectedClasses._FutureListener[1];
  _FutureListener.prototype = $desc;
  _FutureListener.$__fields__ = ["_nextListener", "result", "state", "callback", "errorCallback"];
  _FutureListener.prototype.get$_nextListener = function() {
    return this._nextListener;
  };
  _FutureListener.prototype.set$_nextListener = function(v) {
    return this._nextListener = v;
  };
  _FutureListener.prototype.get$result = function(receiver) {
    return this.result;
  };
  function _Future(_state, _zone, _resultOrListeners) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
    this.$deferredAction();
  }
  _Future.builtin$cls = "_Future";
  if (!"name" in _Future)
    _Future.name = "_Future";
  $desc = $collectedClasses._Future[1];
  _Future.prototype = $desc;
  _Future.$__fields__ = ["_state", "_zone", "_resultOrListeners"];
  _Future.prototype.get$_zone = function() {
    return this._zone;
  };
  function _Future__addListener_closure(_captured_this_0, _captured_listener_1) {
    this._captured_this_0 = _captured_this_0;
    this._captured_listener_1 = _captured_listener_1;
    this.$deferredAction();
  }
  _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
  if (!"name" in _Future__addListener_closure)
    _Future__addListener_closure.name = "_Future__addListener_closure";
  $desc = $collectedClasses._Future__addListener_closure[1];
  _Future__addListener_closure.prototype = $desc;
  _Future__addListener_closure.$__fields__ = ["_captured_this_0", "_captured_listener_1"];
  function _Future__chainForeignFuture_closure(_captured_target_0) {
    this._captured_target_0 = _captured_target_0;
    this.$deferredAction();
  }
  _Future__chainForeignFuture_closure.builtin$cls = "_Future__chainForeignFuture_closure";
  if (!"name" in _Future__chainForeignFuture_closure)
    _Future__chainForeignFuture_closure.name = "_Future__chainForeignFuture_closure";
  $desc = $collectedClasses._Future__chainForeignFuture_closure[1];
  _Future__chainForeignFuture_closure.prototype = $desc;
  _Future__chainForeignFuture_closure.$__fields__ = ["_captured_target_0"];
  function _Future__chainForeignFuture_closure0(_captured_target_1) {
    this._captured_target_1 = _captured_target_1;
    this.$deferredAction();
  }
  _Future__chainForeignFuture_closure0.builtin$cls = "_Future__chainForeignFuture_closure0";
  if (!"name" in _Future__chainForeignFuture_closure0)
    _Future__chainForeignFuture_closure0.name = "_Future__chainForeignFuture_closure0";
  $desc = $collectedClasses._Future__chainForeignFuture_closure0[1];
  _Future__chainForeignFuture_closure0.prototype = $desc;
  _Future__chainForeignFuture_closure0.$__fields__ = ["_captured_target_1"];
  function _Future__chainForeignFuture_closure1(_captured_target_2, _captured_e_3, _captured_s_4) {
    this._captured_target_2 = _captured_target_2;
    this._captured_e_3 = _captured_e_3;
    this._captured_s_4 = _captured_s_4;
    this.$deferredAction();
  }
  _Future__chainForeignFuture_closure1.builtin$cls = "_Future__chainForeignFuture_closure1";
  if (!"name" in _Future__chainForeignFuture_closure1)
    _Future__chainForeignFuture_closure1.name = "_Future__chainForeignFuture_closure1";
  $desc = $collectedClasses._Future__chainForeignFuture_closure1[1];
  _Future__chainForeignFuture_closure1.prototype = $desc;
  _Future__chainForeignFuture_closure1.$__fields__ = ["_captured_target_2", "_captured_e_3", "_captured_s_4"];
  function _Future__asyncComplete_closure(_captured_this_0, _captured_coreFuture_1) {
    this._captured_this_0 = _captured_this_0;
    this._captured_coreFuture_1 = _captured_coreFuture_1;
    this.$deferredAction();
  }
  _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
  if (!"name" in _Future__asyncComplete_closure)
    _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
  $desc = $collectedClasses._Future__asyncComplete_closure[1];
  _Future__asyncComplete_closure.prototype = $desc;
  _Future__asyncComplete_closure.$__fields__ = ["_captured_this_0", "_captured_coreFuture_1"];
  function _Future__asyncComplete_closure0(_captured_this_2, _captured_value_3) {
    this._captured_this_2 = _captured_this_2;
    this._captured_value_3 = _captured_value_3;
    this.$deferredAction();
  }
  _Future__asyncComplete_closure0.builtin$cls = "_Future__asyncComplete_closure0";
  if (!"name" in _Future__asyncComplete_closure0)
    _Future__asyncComplete_closure0.name = "_Future__asyncComplete_closure0";
  $desc = $collectedClasses._Future__asyncComplete_closure0[1];
  _Future__asyncComplete_closure0.prototype = $desc;
  _Future__asyncComplete_closure0.$__fields__ = ["_captured_this_2", "_captured_value_3"];
  function _Future__asyncCompleteError_closure(_captured_this_0, _captured_error_1, _captured_stackTrace_2) {
    this._captured_this_0 = _captured_this_0;
    this._captured_error_1 = _captured_error_1;
    this._captured_stackTrace_2 = _captured_stackTrace_2;
    this.$deferredAction();
  }
  _Future__asyncCompleteError_closure.builtin$cls = "_Future__asyncCompleteError_closure";
  if (!"name" in _Future__asyncCompleteError_closure)
    _Future__asyncCompleteError_closure.name = "_Future__asyncCompleteError_closure";
  $desc = $collectedClasses._Future__asyncCompleteError_closure[1];
  _Future__asyncCompleteError_closure.prototype = $desc;
  _Future__asyncCompleteError_closure.$__fields__ = ["_captured_this_0", "_captured_error_1", "_captured_stackTrace_2"];
  function _Future__propagateToListeners_handleValueCallback(_box_1, _captured_listener_3, _captured_sourceValue_4, _captured_zone_5) {
    this._box_1 = _box_1;
    this._captured_listener_3 = _captured_listener_3;
    this._captured_sourceValue_4 = _captured_sourceValue_4;
    this._captured_zone_5 = _captured_zone_5;
    this.$deferredAction();
  }
  _Future__propagateToListeners_handleValueCallback.builtin$cls = "_Future__propagateToListeners_handleValueCallback";
  if (!"name" in _Future__propagateToListeners_handleValueCallback)
    _Future__propagateToListeners_handleValueCallback.name = "_Future__propagateToListeners_handleValueCallback";
  $desc = $collectedClasses._Future__propagateToListeners_handleValueCallback[1];
  _Future__propagateToListeners_handleValueCallback.prototype = $desc;
  _Future__propagateToListeners_handleValueCallback.$__fields__ = ["_box_1", "_captured_listener_3", "_captured_sourceValue_4", "_captured_zone_5"];
  function _Future__propagateToListeners_handleError(_box_2, _box_1, _captured_listener_6, _captured_zone_7) {
    this._box_2 = _box_2;
    this._box_1 = _box_1;
    this._captured_listener_6 = _captured_listener_6;
    this._captured_zone_7 = _captured_zone_7;
    this.$deferredAction();
  }
  _Future__propagateToListeners_handleError.builtin$cls = "_Future__propagateToListeners_handleError";
  if (!"name" in _Future__propagateToListeners_handleError)
    _Future__propagateToListeners_handleError.name = "_Future__propagateToListeners_handleError";
  $desc = $collectedClasses._Future__propagateToListeners_handleError[1];
  _Future__propagateToListeners_handleError.prototype = $desc;
  _Future__propagateToListeners_handleError.$__fields__ = ["_box_2", "_box_1", "_captured_listener_6", "_captured_zone_7"];
  function _Future__propagateToListeners_handleWhenCompleteCallback(_box_2, _box_1, _captured_hasError_8, _captured_listener_9, _captured_zone_10) {
    this._box_2 = _box_2;
    this._box_1 = _box_1;
    this._captured_hasError_8 = _captured_hasError_8;
    this._captured_listener_9 = _captured_listener_9;
    this._captured_zone_10 = _captured_zone_10;
    this.$deferredAction();
  }
  _Future__propagateToListeners_handleWhenCompleteCallback.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback)
    _Future__propagateToListeners_handleWhenCompleteCallback.name = "_Future__propagateToListeners_handleWhenCompleteCallback";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback[1];
  _Future__propagateToListeners_handleWhenCompleteCallback.prototype = $desc;
  _Future__propagateToListeners_handleWhenCompleteCallback.$__fields__ = ["_box_2", "_box_1", "_captured_hasError_8", "_captured_listener_9", "_captured_zone_10"];
  function _Future__propagateToListeners_handleWhenCompleteCallback_closure(_box_2, _captured_result_11) {
    this._box_2 = _box_2;
    this._captured_result_11 = _captured_result_11;
    this.$deferredAction();
  }
  _Future__propagateToListeners_handleWhenCompleteCallback_closure.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure)
    _Future__propagateToListeners_handleWhenCompleteCallback_closure.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback_closure[1];
  _Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = $desc;
  _Future__propagateToListeners_handleWhenCompleteCallback_closure.$__fields__ = ["_box_2", "_captured_result_11"];
  function _Future__propagateToListeners_handleWhenCompleteCallback_closure0(_box_0, _captured_result_12) {
    this._box_0 = _box_0;
    this._captured_result_12 = _captured_result_12;
    this.$deferredAction();
  }
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure0";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure0)
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure0";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback_closure0[1];
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0.prototype = $desc;
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0.$__fields__ = ["_box_0", "_captured_result_12"];
  function _AsyncCallbackEntry(callback, next) {
    this.callback = callback;
    this.next = next;
    this.$deferredAction();
  }
  _AsyncCallbackEntry.builtin$cls = "_AsyncCallbackEntry";
  if (!"name" in _AsyncCallbackEntry)
    _AsyncCallbackEntry.name = "_AsyncCallbackEntry";
  $desc = $collectedClasses._AsyncCallbackEntry[1];
  _AsyncCallbackEntry.prototype = $desc;
  _AsyncCallbackEntry.$__fields__ = ["callback", "next"];
  function Stream() {
    this.$deferredAction();
  }
  Stream.builtin$cls = "Stream";
  if (!"name" in Stream)
    Stream.name = "Stream";
  $desc = $collectedClasses.Stream[1];
  Stream.prototype = $desc;
  Stream.$__fields__ = [];
  function Stream_forEach_closure(_box_0, _async$_captured_this_1, _captured_action_2, _captured_future_3) {
    this._box_0 = _box_0;
    this._async$_captured_this_1 = _async$_captured_this_1;
    this._captured_action_2 = _captured_action_2;
    this._captured_future_3 = _captured_future_3;
    this.$deferredAction();
  }
  Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
  if (!"name" in Stream_forEach_closure)
    Stream_forEach_closure.name = "Stream_forEach_closure";
  $desc = $collectedClasses.Stream_forEach_closure[1];
  Stream_forEach_closure.prototype = $desc;
  Stream_forEach_closure.$__fields__ = ["_box_0", "_async$_captured_this_1", "_captured_action_2", "_captured_future_3"];
  function Stream_forEach__closure(_captured_action_4, _captured_element_5) {
    this._captured_action_4 = _captured_action_4;
    this._captured_element_5 = _captured_element_5;
    this.$deferredAction();
  }
  Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
  if (!"name" in Stream_forEach__closure)
    Stream_forEach__closure.name = "Stream_forEach__closure";
  $desc = $collectedClasses.Stream_forEach__closure[1];
  Stream_forEach__closure.prototype = $desc;
  Stream_forEach__closure.$__fields__ = ["_captured_action_4", "_captured_element_5"];
  function Stream_forEach__closure0() {
    this.$deferredAction();
  }
  Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
  if (!"name" in Stream_forEach__closure0)
    Stream_forEach__closure0.name = "Stream_forEach__closure0";
  $desc = $collectedClasses.Stream_forEach__closure0[1];
  Stream_forEach__closure0.prototype = $desc;
  Stream_forEach__closure0.$__fields__ = [];
  function Stream_forEach_closure0(_captured_future_6) {
    this._captured_future_6 = _captured_future_6;
    this.$deferredAction();
  }
  Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
  if (!"name" in Stream_forEach_closure0)
    Stream_forEach_closure0.name = "Stream_forEach_closure0";
  $desc = $collectedClasses.Stream_forEach_closure0[1];
  Stream_forEach_closure0.prototype = $desc;
  Stream_forEach_closure0.$__fields__ = ["_captured_future_6"];
  function Stream_length_closure(_box_0) {
    this._box_0 = _box_0;
    this.$deferredAction();
  }
  Stream_length_closure.builtin$cls = "Stream_length_closure";
  if (!"name" in Stream_length_closure)
    Stream_length_closure.name = "Stream_length_closure";
  $desc = $collectedClasses.Stream_length_closure[1];
  Stream_length_closure.prototype = $desc;
  Stream_length_closure.$__fields__ = ["_box_0"];
  function Stream_length_closure0(_box_0, _captured_future_1) {
    this._box_0 = _box_0;
    this._captured_future_1 = _captured_future_1;
    this.$deferredAction();
  }
  Stream_length_closure0.builtin$cls = "Stream_length_closure0";
  if (!"name" in Stream_length_closure0)
    Stream_length_closure0.name = "Stream_length_closure0";
  $desc = $collectedClasses.Stream_length_closure0[1];
  Stream_length_closure0.prototype = $desc;
  Stream_length_closure0.$__fields__ = ["_box_0", "_captured_future_1"];
  function Stream_isEmpty_closure(_box_0, _captured_future_1) {
    this._box_0 = _box_0;
    this._captured_future_1 = _captured_future_1;
    this.$deferredAction();
  }
  Stream_isEmpty_closure.builtin$cls = "Stream_isEmpty_closure";
  if (!"name" in Stream_isEmpty_closure)
    Stream_isEmpty_closure.name = "Stream_isEmpty_closure";
  $desc = $collectedClasses.Stream_isEmpty_closure[1];
  Stream_isEmpty_closure.prototype = $desc;
  Stream_isEmpty_closure.$__fields__ = ["_box_0", "_captured_future_1"];
  function Stream_isEmpty_closure0(_captured_future_2) {
    this._captured_future_2 = _captured_future_2;
    this.$deferredAction();
  }
  Stream_isEmpty_closure0.builtin$cls = "Stream_isEmpty_closure0";
  if (!"name" in Stream_isEmpty_closure0)
    Stream_isEmpty_closure0.name = "Stream_isEmpty_closure0";
  $desc = $collectedClasses.Stream_isEmpty_closure0[1];
  Stream_isEmpty_closure0.prototype = $desc;
  Stream_isEmpty_closure0.$__fields__ = ["_captured_future_2"];
  function Stream_toList_closure(_captured_this_0, _async$_captured_result_1) {
    this._captured_this_0 = _captured_this_0;
    this._async$_captured_result_1 = _async$_captured_result_1;
    this.$deferredAction();
  }
  Stream_toList_closure.builtin$cls = "Stream_toList_closure";
  if (!"name" in Stream_toList_closure)
    Stream_toList_closure.name = "Stream_toList_closure";
  $desc = $collectedClasses.Stream_toList_closure[1];
  Stream_toList_closure.prototype = $desc;
  Stream_toList_closure.$__fields__ = ["_captured_this_0", "_async$_captured_result_1"];
  function Stream_toList_closure0(_captured_result_2, _captured_future_3) {
    this._captured_result_2 = _captured_result_2;
    this._captured_future_3 = _captured_future_3;
    this.$deferredAction();
  }
  Stream_toList_closure0.builtin$cls = "Stream_toList_closure0";
  if (!"name" in Stream_toList_closure0)
    Stream_toList_closure0.name = "Stream_toList_closure0";
  $desc = $collectedClasses.Stream_toList_closure0[1];
  Stream_toList_closure0.prototype = $desc;
  Stream_toList_closure0.$__fields__ = ["_captured_result_2", "_captured_future_3"];
  function Stream_first_closure(_box_0, _async$_captured_this_1, _captured_future_2) {
    this._box_0 = _box_0;
    this._async$_captured_this_1 = _async$_captured_this_1;
    this._captured_future_2 = _captured_future_2;
    this.$deferredAction();
  }
  Stream_first_closure.builtin$cls = "Stream_first_closure";
  if (!"name" in Stream_first_closure)
    Stream_first_closure.name = "Stream_first_closure";
  $desc = $collectedClasses.Stream_first_closure[1];
  Stream_first_closure.prototype = $desc;
  Stream_first_closure.$__fields__ = ["_box_0", "_async$_captured_this_1", "_captured_future_2"];
  function Stream_first_closure0(_captured_future_3) {
    this._captured_future_3 = _captured_future_3;
    this.$deferredAction();
  }
  Stream_first_closure0.builtin$cls = "Stream_first_closure0";
  if (!"name" in Stream_first_closure0)
    Stream_first_closure0.name = "Stream_first_closure0";
  $desc = $collectedClasses.Stream_first_closure0[1];
  Stream_first_closure0.prototype = $desc;
  Stream_first_closure0.$__fields__ = ["_captured_future_3"];
  function StreamSubscription() {
    this.$deferredAction();
  }
  StreamSubscription.builtin$cls = "StreamSubscription";
  if (!"name" in StreamSubscription)
    StreamSubscription.name = "StreamSubscription";
  $desc = $collectedClasses.StreamSubscription[1];
  StreamSubscription.prototype = $desc;
  StreamSubscription.$__fields__ = [];
  function _StreamController() {
    this.$deferredAction();
  }
  _StreamController.builtin$cls = "_StreamController";
  if (!"name" in _StreamController)
    _StreamController.name = "_StreamController";
  $desc = $collectedClasses._StreamController[1];
  _StreamController.prototype = $desc;
  _StreamController.$__fields__ = [];
  function _StreamController__subscribe_closure(_captured_this_0) {
    this._captured_this_0 = _captured_this_0;
    this.$deferredAction();
  }
  _StreamController__subscribe_closure.builtin$cls = "_StreamController__subscribe_closure";
  if (!"name" in _StreamController__subscribe_closure)
    _StreamController__subscribe_closure.name = "_StreamController__subscribe_closure";
  $desc = $collectedClasses._StreamController__subscribe_closure[1];
  _StreamController__subscribe_closure.prototype = $desc;
  _StreamController__subscribe_closure.$__fields__ = ["_captured_this_0"];
  function _StreamController__recordCancel_complete(_captured_this_0) {
    this._captured_this_0 = _captured_this_0;
    this.$deferredAction();
  }
  _StreamController__recordCancel_complete.builtin$cls = "_StreamController__recordCancel_complete";
  if (!"name" in _StreamController__recordCancel_complete)
    _StreamController__recordCancel_complete.name = "_StreamController__recordCancel_complete";
  $desc = $collectedClasses._StreamController__recordCancel_complete[1];
  _StreamController__recordCancel_complete.prototype = $desc;
  _StreamController__recordCancel_complete.$__fields__ = ["_captured_this_0"];
  function _SyncStreamControllerDispatch() {
    this.$deferredAction();
  }
  _SyncStreamControllerDispatch.builtin$cls = "_SyncStreamControllerDispatch";
  if (!"name" in _SyncStreamControllerDispatch)
    _SyncStreamControllerDispatch.name = "_SyncStreamControllerDispatch";
  $desc = $collectedClasses._SyncStreamControllerDispatch[1];
  _SyncStreamControllerDispatch.prototype = $desc;
  _SyncStreamControllerDispatch.$__fields__ = [];
  function _AsyncStreamControllerDispatch() {
    this.$deferredAction();
  }
  _AsyncStreamControllerDispatch.builtin$cls = "_AsyncStreamControllerDispatch";
  if (!"name" in _AsyncStreamControllerDispatch)
    _AsyncStreamControllerDispatch.name = "_AsyncStreamControllerDispatch";
  $desc = $collectedClasses._AsyncStreamControllerDispatch[1];
  _AsyncStreamControllerDispatch.prototype = $desc;
  _AsyncStreamControllerDispatch.$__fields__ = [];
  function _AsyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
    this.$deferredAction();
  }
  _AsyncStreamController.builtin$cls = "_AsyncStreamController";
  if (!"name" in _AsyncStreamController)
    _AsyncStreamController.name = "_AsyncStreamController";
  $desc = $collectedClasses._AsyncStreamController[1];
  _AsyncStreamController.prototype = $desc;
  _AsyncStreamController.$__fields__ = ["_onListen", "_onPause", "_onResume", "_onCancel", "_varData", "_state", "_doneFuture"];
  _AsyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _AsyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _AsyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _AsyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__AsyncStreamControllerDispatch() {
    this.$deferredAction();
  }
  _StreamController__AsyncStreamControllerDispatch.builtin$cls = "_StreamController__AsyncStreamControllerDispatch";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch)
    _StreamController__AsyncStreamControllerDispatch.name = "_StreamController__AsyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch[1];
  _StreamController__AsyncStreamControllerDispatch.prototype = $desc;
  _StreamController__AsyncStreamControllerDispatch.$__fields__ = [];
  function _SyncStreamController(_onListen, _onPause, _onResume, _onCancel, _varData, _state, _doneFuture) {
    this._onListen = _onListen;
    this._onPause = _onPause;
    this._onResume = _onResume;
    this._onCancel = _onCancel;
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
    this.$deferredAction();
  }
  _SyncStreamController.builtin$cls = "_SyncStreamController";
  if (!"name" in _SyncStreamController)
    _SyncStreamController.name = "_SyncStreamController";
  $desc = $collectedClasses._SyncStreamController[1];
  _SyncStreamController.prototype = $desc;
  _SyncStreamController.$__fields__ = ["_onListen", "_onPause", "_onResume", "_onCancel", "_varData", "_state", "_doneFuture"];
  _SyncStreamController.prototype.get$_onListen = function() {
    return this._onListen;
  };
  _SyncStreamController.prototype.get$_onPause = function() {
    return this._onPause;
  };
  _SyncStreamController.prototype.get$_onResume = function() {
    return this._onResume;
  };
  _SyncStreamController.prototype.get$_onCancel = function() {
    return this._onCancel;
  };
  function _StreamController__SyncStreamControllerDispatch() {
    this.$deferredAction();
  }
  _StreamController__SyncStreamControllerDispatch.builtin$cls = "_StreamController__SyncStreamControllerDispatch";
  if (!"name" in _StreamController__SyncStreamControllerDispatch)
    _StreamController__SyncStreamControllerDispatch.name = "_StreamController__SyncStreamControllerDispatch";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch[1];
  _StreamController__SyncStreamControllerDispatch.prototype = $desc;
  _StreamController__SyncStreamControllerDispatch.$__fields__ = [];
  function _NoCallbacks() {
    this.$deferredAction();
  }
  _NoCallbacks.builtin$cls = "_NoCallbacks";
  if (!"name" in _NoCallbacks)
    _NoCallbacks.name = "_NoCallbacks";
  $desc = $collectedClasses._NoCallbacks[1];
  _NoCallbacks.prototype = $desc;
  _NoCallbacks.$__fields__ = [];
  function _NoCallbackAsyncStreamController(_varData, _state, _doneFuture) {
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
    this.$deferredAction();
  }
  _NoCallbackAsyncStreamController.builtin$cls = "_NoCallbackAsyncStreamController";
  if (!"name" in _NoCallbackAsyncStreamController)
    _NoCallbackAsyncStreamController.name = "_NoCallbackAsyncStreamController";
  $desc = $collectedClasses._NoCallbackAsyncStreamController[1];
  _NoCallbackAsyncStreamController.prototype = $desc;
  _NoCallbackAsyncStreamController.$__fields__ = ["_varData", "_state", "_doneFuture"];
  function _StreamController__AsyncStreamControllerDispatch0() {
    this.$deferredAction();
  }
  _StreamController__AsyncStreamControllerDispatch0.builtin$cls = "_StreamController__AsyncStreamControllerDispatch0";
  if (!"name" in _StreamController__AsyncStreamControllerDispatch0)
    _StreamController__AsyncStreamControllerDispatch0.name = "_StreamController__AsyncStreamControllerDispatch0";
  $desc = $collectedClasses._StreamController__AsyncStreamControllerDispatch0[1];
  _StreamController__AsyncStreamControllerDispatch0.prototype = $desc;
  _StreamController__AsyncStreamControllerDispatch0.$__fields__ = [];
  function _NoCallbackSyncStreamController(_varData, _state, _doneFuture) {
    this._varData = _varData;
    this._state = _state;
    this._doneFuture = _doneFuture;
    this.$deferredAction();
  }
  _NoCallbackSyncStreamController.builtin$cls = "_NoCallbackSyncStreamController";
  if (!"name" in _NoCallbackSyncStreamController)
    _NoCallbackSyncStreamController.name = "_NoCallbackSyncStreamController";
  $desc = $collectedClasses._NoCallbackSyncStreamController[1];
  _NoCallbackSyncStreamController.prototype = $desc;
  _NoCallbackSyncStreamController.$__fields__ = ["_varData", "_state", "_doneFuture"];
  function _StreamController__SyncStreamControllerDispatch0() {
    this.$deferredAction();
  }
  _StreamController__SyncStreamControllerDispatch0.builtin$cls = "_StreamController__SyncStreamControllerDispatch0";
  if (!"name" in _StreamController__SyncStreamControllerDispatch0)
    _StreamController__SyncStreamControllerDispatch0.name = "_StreamController__SyncStreamControllerDispatch0";
  $desc = $collectedClasses._StreamController__SyncStreamControllerDispatch0[1];
  _StreamController__SyncStreamControllerDispatch0.prototype = $desc;
  _StreamController__SyncStreamControllerDispatch0.$__fields__ = [];
  function _ControllerStream(_async$_controller) {
    this._async$_controller = _async$_controller;
    this.$deferredAction();
  }
  _ControllerStream.builtin$cls = "_ControllerStream";
  if (!"name" in _ControllerStream)
    _ControllerStream.name = "_ControllerStream";
  $desc = $collectedClasses._ControllerStream[1];
  _ControllerStream.prototype = $desc;
  _ControllerStream.$__fields__ = ["_async$_controller"];
  function _ControllerSubscription(_async$_controller, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_controller = _async$_controller;
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
    this.$deferredAction();
  }
  _ControllerSubscription.builtin$cls = "_ControllerSubscription";
  if (!"name" in _ControllerSubscription)
    _ControllerSubscription.name = "_ControllerSubscription";
  $desc = $collectedClasses._ControllerSubscription[1];
  _ControllerSubscription.prototype = $desc;
  _ControllerSubscription.$__fields__ = ["_async$_controller", "_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
  function _EventSink() {
    this.$deferredAction();
  }
  _EventSink.builtin$cls = "_EventSink";
  if (!"name" in _EventSink)
    _EventSink.name = "_EventSink";
  $desc = $collectedClasses._EventSink[1];
  _EventSink.prototype = $desc;
  _EventSink.$__fields__ = [];
  function _BufferingStreamSubscription(_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
    this.$deferredAction();
  }
  _BufferingStreamSubscription.builtin$cls = "_BufferingStreamSubscription";
  if (!"name" in _BufferingStreamSubscription)
    _BufferingStreamSubscription.name = "_BufferingStreamSubscription";
  $desc = $collectedClasses._BufferingStreamSubscription[1];
  _BufferingStreamSubscription.prototype = $desc;
  _BufferingStreamSubscription.$__fields__ = ["_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
  _BufferingStreamSubscription.prototype.get$_onError = function() {
    return this._onError;
  };
  _BufferingStreamSubscription.prototype.get$_zone = function() {
    return this._zone;
  };
  function _BufferingStreamSubscription__sendError_sendError(_captured_this_0, _captured_error_1, _captured_stackTrace_2) {
    this._captured_this_0 = _captured_this_0;
    this._captured_error_1 = _captured_error_1;
    this._captured_stackTrace_2 = _captured_stackTrace_2;
    this.$deferredAction();
  }
  _BufferingStreamSubscription__sendError_sendError.builtin$cls = "_BufferingStreamSubscription__sendError_sendError";
  if (!"name" in _BufferingStreamSubscription__sendError_sendError)
    _BufferingStreamSubscription__sendError_sendError.name = "_BufferingStreamSubscription__sendError_sendError";
  $desc = $collectedClasses._BufferingStreamSubscription__sendError_sendError[1];
  _BufferingStreamSubscription__sendError_sendError.prototype = $desc;
  _BufferingStreamSubscription__sendError_sendError.$__fields__ = ["_captured_this_0", "_captured_error_1", "_captured_stackTrace_2"];
  function _BufferingStreamSubscription__sendDone_sendDone(_captured_this_0) {
    this._captured_this_0 = _captured_this_0;
    this.$deferredAction();
  }
  _BufferingStreamSubscription__sendDone_sendDone.builtin$cls = "_BufferingStreamSubscription__sendDone_sendDone";
  if (!"name" in _BufferingStreamSubscription__sendDone_sendDone)
    _BufferingStreamSubscription__sendDone_sendDone.name = "_BufferingStreamSubscription__sendDone_sendDone";
  $desc = $collectedClasses._BufferingStreamSubscription__sendDone_sendDone[1];
  _BufferingStreamSubscription__sendDone_sendDone.prototype = $desc;
  _BufferingStreamSubscription__sendDone_sendDone.$__fields__ = ["_captured_this_0"];
  function _StreamImpl() {
    this.$deferredAction();
  }
  _StreamImpl.builtin$cls = "_StreamImpl";
  if (!"name" in _StreamImpl)
    _StreamImpl.name = "_StreamImpl";
  $desc = $collectedClasses._StreamImpl[1];
  _StreamImpl.prototype = $desc;
  _StreamImpl.$__fields__ = [];
  function _DelayedEvent(next) {
    this.next = next;
    this.$deferredAction();
  }
  _DelayedEvent.builtin$cls = "_DelayedEvent";
  if (!"name" in _DelayedEvent)
    _DelayedEvent.name = "_DelayedEvent";
  $desc = $collectedClasses._DelayedEvent[1];
  _DelayedEvent.prototype = $desc;
  _DelayedEvent.$__fields__ = ["next"];
  _DelayedEvent.prototype.get$next = function() {
    return this.next;
  };
  _DelayedEvent.prototype.set$next = function(v) {
    return this.next = v;
  };
  function _DelayedData(value, next) {
    this.value = value;
    this.next = next;
    this.$deferredAction();
  }
  _DelayedData.builtin$cls = "_DelayedData";
  if (!"name" in _DelayedData)
    _DelayedData.name = "_DelayedData";
  $desc = $collectedClasses._DelayedData[1];
  _DelayedData.prototype = $desc;
  _DelayedData.$__fields__ = ["value", "next"];
  _DelayedData.prototype.get$value = function(receiver) {
    return this.value;
  };
  function _DelayedError(error, stackTrace, next) {
    this.error = error;
    this.stackTrace = stackTrace;
    this.next = next;
    this.$deferredAction();
  }
  _DelayedError.builtin$cls = "_DelayedError";
  if (!"name" in _DelayedError)
    _DelayedError.name = "_DelayedError";
  $desc = $collectedClasses._DelayedError[1];
  _DelayedError.prototype = $desc;
  _DelayedError.$__fields__ = ["error", "stackTrace", "next"];
  _DelayedError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _DelayedError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _DelayedDone() {
    this.$deferredAction();
  }
  _DelayedDone.builtin$cls = "_DelayedDone";
  if (!"name" in _DelayedDone)
    _DelayedDone.name = "_DelayedDone";
  $desc = $collectedClasses._DelayedDone[1];
  _DelayedDone.prototype = $desc;
  _DelayedDone.$__fields__ = [];
  function _PendingEvents() {
    this.$deferredAction();
  }
  _PendingEvents.builtin$cls = "_PendingEvents";
  if (!"name" in _PendingEvents)
    _PendingEvents.name = "_PendingEvents";
  $desc = $collectedClasses._PendingEvents[1];
  _PendingEvents.prototype = $desc;
  _PendingEvents.$__fields__ = [];
  function _PendingEvents_schedule_closure(_captured_this_0, _captured_dispatch_1) {
    this._captured_this_0 = _captured_this_0;
    this._captured_dispatch_1 = _captured_dispatch_1;
    this.$deferredAction();
  }
  _PendingEvents_schedule_closure.builtin$cls = "_PendingEvents_schedule_closure";
  if (!"name" in _PendingEvents_schedule_closure)
    _PendingEvents_schedule_closure.name = "_PendingEvents_schedule_closure";
  $desc = $collectedClasses._PendingEvents_schedule_closure[1];
  _PendingEvents_schedule_closure.prototype = $desc;
  _PendingEvents_schedule_closure.$__fields__ = ["_captured_this_0", "_captured_dispatch_1"];
  function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state) {
    this.firstPendingEvent = firstPendingEvent;
    this.lastPendingEvent = lastPendingEvent;
    this._state = _state;
    this.$deferredAction();
  }
  _StreamImplEvents.builtin$cls = "_StreamImplEvents";
  if (!"name" in _StreamImplEvents)
    _StreamImplEvents.name = "_StreamImplEvents";
  $desc = $collectedClasses._StreamImplEvents[1];
  _StreamImplEvents.prototype = $desc;
  _StreamImplEvents.$__fields__ = ["firstPendingEvent", "lastPendingEvent", "_state"];
  function _cancelAndError_closure(_captured_future_0, _captured_error_1, _captured_stackTrace_2) {
    this._captured_future_0 = _captured_future_0;
    this._captured_error_1 = _captured_error_1;
    this._captured_stackTrace_2 = _captured_stackTrace_2;
    this.$deferredAction();
  }
  _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
  if (!"name" in _cancelAndError_closure)
    _cancelAndError_closure.name = "_cancelAndError_closure";
  $desc = $collectedClasses._cancelAndError_closure[1];
  _cancelAndError_closure.prototype = $desc;
  _cancelAndError_closure.$__fields__ = ["_captured_future_0", "_captured_error_1", "_captured_stackTrace_2"];
  function _cancelAndErrorClosure_closure(_captured_subscription_0, _captured_future_1) {
    this._captured_subscription_0 = _captured_subscription_0;
    this._captured_future_1 = _captured_future_1;
    this.$deferredAction();
  }
  _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
  if (!"name" in _cancelAndErrorClosure_closure)
    _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
  $desc = $collectedClasses._cancelAndErrorClosure_closure[1];
  _cancelAndErrorClosure_closure.prototype = $desc;
  _cancelAndErrorClosure_closure.$__fields__ = ["_captured_subscription_0", "_captured_future_1"];
  function _cancelAndValue_closure(_captured_future_0, _captured_value_1) {
    this._captured_future_0 = _captured_future_0;
    this._captured_value_1 = _captured_value_1;
    this.$deferredAction();
  }
  _cancelAndValue_closure.builtin$cls = "_cancelAndValue_closure";
  if (!"name" in _cancelAndValue_closure)
    _cancelAndValue_closure.name = "_cancelAndValue_closure";
  $desc = $collectedClasses._cancelAndValue_closure[1];
  _cancelAndValue_closure.prototype = $desc;
  _cancelAndValue_closure.$__fields__ = ["_captured_future_0", "_captured_value_1"];
  function _ForwardingStream() {
    this.$deferredAction();
  }
  _ForwardingStream.builtin$cls = "_ForwardingStream";
  if (!"name" in _ForwardingStream)
    _ForwardingStream.name = "_ForwardingStream";
  $desc = $collectedClasses._ForwardingStream[1];
  _ForwardingStream.prototype = $desc;
  _ForwardingStream.$__fields__ = [];
  function _ForwardingStreamSubscription(_stream, _subscription, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._stream = _stream;
    this._subscription = _subscription;
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
    this.$deferredAction();
  }
  _ForwardingStreamSubscription.builtin$cls = "_ForwardingStreamSubscription";
  if (!"name" in _ForwardingStreamSubscription)
    _ForwardingStreamSubscription.name = "_ForwardingStreamSubscription";
  $desc = $collectedClasses._ForwardingStreamSubscription[1];
  _ForwardingStreamSubscription.prototype = $desc;
  _ForwardingStreamSubscription.$__fields__ = ["_stream", "_subscription", "_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
  function _MapStream(_transform, _source) {
    this._transform = _transform;
    this._source = _source;
    this.$deferredAction();
  }
  _MapStream.builtin$cls = "_MapStream";
  if (!"name" in _MapStream)
    _MapStream.name = "_MapStream";
  $desc = $collectedClasses._MapStream[1];
  _MapStream.prototype = $desc;
  _MapStream.$__fields__ = ["_transform", "_source"];
  function _StateStreamSubscription(_sharedState, _stream, _subscription, _onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._sharedState = _sharedState;
    this._stream = _stream;
    this._subscription = _subscription;
    this._onData = _onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
    this.$deferredAction();
  }
  _StateStreamSubscription.builtin$cls = "_StateStreamSubscription";
  if (!"name" in _StateStreamSubscription)
    _StateStreamSubscription.name = "_StateStreamSubscription";
  $desc = $collectedClasses._StateStreamSubscription[1];
  _StateStreamSubscription.prototype = $desc;
  _StateStreamSubscription.$__fields__ = ["_sharedState", "_stream", "_subscription", "_onData", "_onError", "_onDone", "_zone", "_state", "_cancelFuture", "_pending"];
  function _SkipStream(_count, _source) {
    this._count = _count;
    this._source = _source;
    this.$deferredAction();
  }
  _SkipStream.builtin$cls = "_SkipStream";
  if (!"name" in _SkipStream)
    _SkipStream.name = "_SkipStream";
  $desc = $collectedClasses._SkipStream[1];
  _SkipStream.prototype = $desc;
  _SkipStream.$__fields__ = ["_count", "_source"];
  function AsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
    this.$deferredAction();
  }
  AsyncError.builtin$cls = "AsyncError";
  if (!"name" in AsyncError)
    AsyncError.name = "AsyncError";
  $desc = $collectedClasses.AsyncError[1];
  AsyncError.prototype = $desc;
  AsyncError.$__fields__ = ["error", "stackTrace"];
  AsyncError.prototype.get$error = function(receiver) {
    return this.error;
  };
  AsyncError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _Zone() {
    this.$deferredAction();
  }
  _Zone.builtin$cls = "_Zone";
  if (!"name" in _Zone)
    _Zone.name = "_Zone";
  $desc = $collectedClasses._Zone[1];
  _Zone.prototype = $desc;
  _Zone.$__fields__ = [];
  function _rootHandleUncaughtError_closure(_captured_error_0, _captured_stackTrace_1) {
    this._captured_error_0 = _captured_error_0;
    this._captured_stackTrace_1 = _captured_stackTrace_1;
    this.$deferredAction();
  }
  _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
  if (!"name" in _rootHandleUncaughtError_closure)
    _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
  $desc = $collectedClasses._rootHandleUncaughtError_closure[1];
  _rootHandleUncaughtError_closure.prototype = $desc;
  _rootHandleUncaughtError_closure.$__fields__ = ["_captured_error_0", "_captured_stackTrace_1"];
  function _RootZone() {
    this.$deferredAction();
  }
  _RootZone.builtin$cls = "_RootZone";
  if (!"name" in _RootZone)
    _RootZone.name = "_RootZone";
  $desc = $collectedClasses._RootZone[1];
  _RootZone.prototype = $desc;
  _RootZone.$__fields__ = [];
  function _RootZone_bindCallback_closure(_captured_this_0, _captured_f_1) {
    this._captured_this_0 = _captured_this_0;
    this._captured_f_1 = _captured_f_1;
    this.$deferredAction();
  }
  _RootZone_bindCallback_closure.builtin$cls = "_RootZone_bindCallback_closure";
  if (!"name" in _RootZone_bindCallback_closure)
    _RootZone_bindCallback_closure.name = "_RootZone_bindCallback_closure";
  $desc = $collectedClasses._RootZone_bindCallback_closure[1];
  _RootZone_bindCallback_closure.prototype = $desc;
  _RootZone_bindCallback_closure.$__fields__ = ["_captured_this_0", "_captured_f_1"];
  function _RootZone_bindCallback_closure0(_captured_this_2, _captured_f_3) {
    this._captured_this_2 = _captured_this_2;
    this._captured_f_3 = _captured_f_3;
    this.$deferredAction();
  }
  _RootZone_bindCallback_closure0.builtin$cls = "_RootZone_bindCallback_closure0";
  if (!"name" in _RootZone_bindCallback_closure0)
    _RootZone_bindCallback_closure0.name = "_RootZone_bindCallback_closure0";
  $desc = $collectedClasses._RootZone_bindCallback_closure0[1];
  _RootZone_bindCallback_closure0.prototype = $desc;
  _RootZone_bindCallback_closure0.$__fields__ = ["_captured_this_2", "_captured_f_3"];
  function _RootZone_bindUnaryCallback_closure(_captured_this_0, _captured_f_1) {
    this._captured_this_0 = _captured_this_0;
    this._captured_f_1 = _captured_f_1;
    this.$deferredAction();
  }
  _RootZone_bindUnaryCallback_closure.builtin$cls = "_RootZone_bindUnaryCallback_closure";
  if (!"name" in _RootZone_bindUnaryCallback_closure)
    _RootZone_bindUnaryCallback_closure.name = "_RootZone_bindUnaryCallback_closure";
  $desc = $collectedClasses._RootZone_bindUnaryCallback_closure[1];
  _RootZone_bindUnaryCallback_closure.prototype = $desc;
  _RootZone_bindUnaryCallback_closure.$__fields__ = ["_captured_this_0", "_captured_f_1"];
  function _RootZone_bindUnaryCallback_closure0(_captured_this_2, _captured_f_3) {
    this._captured_this_2 = _captured_this_2;
    this._captured_f_3 = _captured_f_3;
    this.$deferredAction();
  }
  _RootZone_bindUnaryCallback_closure0.builtin$cls = "_RootZone_bindUnaryCallback_closure0";
  if (!"name" in _RootZone_bindUnaryCallback_closure0)
    _RootZone_bindUnaryCallback_closure0.name = "_RootZone_bindUnaryCallback_closure0";
  $desc = $collectedClasses._RootZone_bindUnaryCallback_closure0[1];
  _RootZone_bindUnaryCallback_closure0.prototype = $desc;
  _RootZone_bindUnaryCallback_closure0.$__fields__ = ["_captured_this_2", "_captured_f_3"];
  function _HashMap() {
    this.$deferredAction();
  }
  _HashMap.builtin$cls = "_HashMap";
  if (!"name" in _HashMap)
    _HashMap.name = "_HashMap";
  $desc = $collectedClasses._HashMap[1];
  _HashMap.prototype = $desc;
  _HashMap.$__fields__ = [];
  function _IdentityHashMap(_collection$_length, _strings, _nums, _rest, _keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
    this.$deferredAction();
  }
  _IdentityHashMap.builtin$cls = "_IdentityHashMap";
  if (!"name" in _IdentityHashMap)
    _IdentityHashMap.name = "_IdentityHashMap";
  $desc = $collectedClasses._IdentityHashMap[1];
  _IdentityHashMap.prototype = $desc;
  _IdentityHashMap.$__fields__ = ["_collection$_length", "_strings", "_nums", "_rest", "_keys"];
  function HashMapKeyIterable(_collection$_map) {
    this._collection$_map = _collection$_map;
    this.$deferredAction();
  }
  HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
  if (!"name" in HashMapKeyIterable)
    HashMapKeyIterable.name = "HashMapKeyIterable";
  $desc = $collectedClasses.HashMapKeyIterable[1];
  HashMapKeyIterable.prototype = $desc;
  HashMapKeyIterable.$__fields__ = ["_collection$_map"];
  function HashMapKeyIterator(_collection$_map, _keys, _offset, _collection$_current) {
    this._collection$_map = _collection$_map;
    this._keys = _keys;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
    this.$deferredAction();
  }
  HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
  if (!"name" in HashMapKeyIterator)
    HashMapKeyIterator.name = "HashMapKeyIterator";
  $desc = $collectedClasses.HashMapKeyIterator[1];
  HashMapKeyIterator.prototype = $desc;
  HashMapKeyIterator.$__fields__ = ["_collection$_map", "_keys", "_offset", "_collection$_current"];
  function _LinkedIdentityHashMap(__js_helper$_length, __js_helper$_strings, __js_helper$_nums, __js_helper$_rest, __js_helper$_first, __js_helper$_last, __js_helper$_modifications) {
    this.__js_helper$_length = __js_helper$_length;
    this.__js_helper$_strings = __js_helper$_strings;
    this.__js_helper$_nums = __js_helper$_nums;
    this.__js_helper$_rest = __js_helper$_rest;
    this.__js_helper$_first = __js_helper$_first;
    this.__js_helper$_last = __js_helper$_last;
    this.__js_helper$_modifications = __js_helper$_modifications;
    this.$deferredAction();
  }
  _LinkedIdentityHashMap.builtin$cls = "_LinkedIdentityHashMap";
  if (!"name" in _LinkedIdentityHashMap)
    _LinkedIdentityHashMap.name = "_LinkedIdentityHashMap";
  $desc = $collectedClasses._LinkedIdentityHashMap[1];
  _LinkedIdentityHashMap.prototype = $desc;
  _LinkedIdentityHashMap.$__fields__ = ["__js_helper$_length", "__js_helper$_strings", "__js_helper$_nums", "__js_helper$_rest", "__js_helper$_first", "__js_helper$_last", "__js_helper$_modifications"];
  function _LinkedHashSet(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
    this.$deferredAction();
  }
  _LinkedHashSet.builtin$cls = "_LinkedHashSet";
  if (!"name" in _LinkedHashSet)
    _LinkedHashSet.name = "_LinkedHashSet";
  $desc = $collectedClasses._LinkedHashSet[1];
  _LinkedHashSet.prototype = $desc;
  _LinkedHashSet.$__fields__ = ["_collection$_length", "_strings", "_nums", "_rest", "_first", "_last", "_modifications"];
  function LinkedHashSetCell(_collection$_element, _next, _previous) {
    this._collection$_element = _collection$_element;
    this._next = _next;
    this._previous = _previous;
    this.$deferredAction();
  }
  LinkedHashSetCell.builtin$cls = "LinkedHashSetCell";
  if (!"name" in LinkedHashSetCell)
    LinkedHashSetCell.name = "LinkedHashSetCell";
  $desc = $collectedClasses.LinkedHashSetCell[1];
  LinkedHashSetCell.prototype = $desc;
  LinkedHashSetCell.$__fields__ = ["_collection$_element", "_next", "_previous"];
  LinkedHashSetCell.prototype.get$_collection$_element = function() {
    return this._collection$_element;
  };
  LinkedHashSetCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashSetCell.prototype.get$_previous = function() {
    return this._previous;
  };
  function LinkedHashSetIterator(_set, _modifications, _cell, _collection$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
    this.$deferredAction();
  }
  LinkedHashSetIterator.builtin$cls = "LinkedHashSetIterator";
  if (!"name" in LinkedHashSetIterator)
    LinkedHashSetIterator.name = "LinkedHashSetIterator";
  $desc = $collectedClasses.LinkedHashSetIterator[1];
  LinkedHashSetIterator.prototype = $desc;
  LinkedHashSetIterator.$__fields__ = ["_set", "_modifications", "_cell", "_collection$_current"];
  function _HashSetBase() {
    this.$deferredAction();
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase[1];
  _HashSetBase.prototype = $desc;
  _HashSetBase.$__fields__ = [];
  function IterableBase() {
    this.$deferredAction();
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase[1];
  IterableBase.prototype = $desc;
  IterableBase.$__fields__ = [];
  function ListBase() {
    this.$deferredAction();
  }
  ListBase.builtin$cls = "ListBase";
  if (!"name" in ListBase)
    ListBase.name = "ListBase";
  $desc = $collectedClasses.ListBase[1];
  ListBase.prototype = $desc;
  ListBase.$__fields__ = [];
  function Object_ListMixin() {
    this.$deferredAction();
  }
  Object_ListMixin.builtin$cls = "Object_ListMixin";
  if (!"name" in Object_ListMixin)
    Object_ListMixin.name = "Object_ListMixin";
  $desc = $collectedClasses.Object_ListMixin[1];
  Object_ListMixin.prototype = $desc;
  Object_ListMixin.$__fields__ = [];
  function ListMixin() {
    this.$deferredAction();
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin[1];
  ListMixin.prototype = $desc;
  ListMixin.$__fields__ = [];
  function _UnmodifiableMapMixin() {
    this.$deferredAction();
  }
  _UnmodifiableMapMixin.builtin$cls = "_UnmodifiableMapMixin";
  if (!"name" in _UnmodifiableMapMixin)
    _UnmodifiableMapMixin.name = "_UnmodifiableMapMixin";
  $desc = $collectedClasses._UnmodifiableMapMixin[1];
  _UnmodifiableMapMixin.prototype = $desc;
  _UnmodifiableMapMixin.$__fields__ = [];
  function MapView() {
    this.$deferredAction();
  }
  MapView.builtin$cls = "MapView";
  if (!"name" in MapView)
    MapView.name = "MapView";
  $desc = $collectedClasses.MapView[1];
  MapView.prototype = $desc;
  MapView.$__fields__ = [];
  function UnmodifiableMapView(_collection$_map) {
    this._collection$_map = _collection$_map;
    this.$deferredAction();
  }
  UnmodifiableMapView.builtin$cls = "UnmodifiableMapView";
  if (!"name" in UnmodifiableMapView)
    UnmodifiableMapView.name = "UnmodifiableMapView";
  $desc = $collectedClasses.UnmodifiableMapView[1];
  UnmodifiableMapView.prototype = $desc;
  UnmodifiableMapView.$__fields__ = ["_collection$_map"];
  function Maps_mapToString_closure(_collection$_box_0, _captured_result_1) {
    this._collection$_box_0 = _collection$_box_0;
    this._captured_result_1 = _captured_result_1;
    this.$deferredAction();
  }
  Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
  if (!"name" in Maps_mapToString_closure)
    Maps_mapToString_closure.name = "Maps_mapToString_closure";
  $desc = $collectedClasses.Maps_mapToString_closure[1];
  Maps_mapToString_closure.prototype = $desc;
  Maps_mapToString_closure.$__fields__ = ["_collection$_box_0", "_captured_result_1"];
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
    this.$deferredAction();
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue[1];
  ListQueue.prototype = $desc;
  ListQueue.$__fields__ = ["_table", "_head", "_tail", "_modificationCount"];
  function _ListQueueIterator(_queue, _collection$_end, _modificationCount, _collection$_position, _collection$_current) {
    this._queue = _queue;
    this._collection$_end = _collection$_end;
    this._modificationCount = _modificationCount;
    this._collection$_position = _collection$_position;
    this._collection$_current = _collection$_current;
    this.$deferredAction();
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator[1];
  _ListQueueIterator.prototype = $desc;
  _ListQueueIterator.$__fields__ = ["_queue", "_collection$_end", "_modificationCount", "_collection$_position", "_collection$_current"];
  function SetMixin() {
    this.$deferredAction();
  }
  SetMixin.builtin$cls = "SetMixin";
  if (!"name" in SetMixin)
    SetMixin.name = "SetMixin";
  $desc = $collectedClasses.SetMixin[1];
  SetMixin.prototype = $desc;
  SetMixin.$__fields__ = [];
  function SetBase() {
    this.$deferredAction();
  }
  SetBase.builtin$cls = "SetBase";
  if (!"name" in SetBase)
    SetBase.name = "SetBase";
  $desc = $collectedClasses.SetBase[1];
  SetBase.prototype = $desc;
  SetBase.$__fields__ = [];
  function Codec() {
    this.$deferredAction();
  }
  Codec.builtin$cls = "Codec";
  if (!"name" in Codec)
    Codec.name = "Codec";
  $desc = $collectedClasses.Codec[1];
  Codec.prototype = $desc;
  Codec.$__fields__ = [];
  function Converter() {
    this.$deferredAction();
  }
  Converter.builtin$cls = "Converter";
  if (!"name" in Converter)
    Converter.name = "Converter";
  $desc = $collectedClasses.Converter[1];
  Converter.prototype = $desc;
  Converter.$__fields__ = [];
  function Encoding() {
    this.$deferredAction();
  }
  Encoding.builtin$cls = "Encoding";
  if (!"name" in Encoding)
    Encoding.name = "Encoding";
  $desc = $collectedClasses.Encoding[1];
  Encoding.prototype = $desc;
  Encoding.$__fields__ = [];
  function HtmlEscapeMode(_convert$_name, escapeLtGt, escapeQuot, escapeApos, escapeSlash) {
    this._convert$_name = _convert$_name;
    this.escapeLtGt = escapeLtGt;
    this.escapeQuot = escapeQuot;
    this.escapeApos = escapeApos;
    this.escapeSlash = escapeSlash;
    this.$deferredAction();
  }
  HtmlEscapeMode.builtin$cls = "HtmlEscapeMode";
  if (!"name" in HtmlEscapeMode)
    HtmlEscapeMode.name = "HtmlEscapeMode";
  $desc = $collectedClasses.HtmlEscapeMode[1];
  HtmlEscapeMode.prototype = $desc;
  HtmlEscapeMode.$__fields__ = ["_convert$_name", "escapeLtGt", "escapeQuot", "escapeApos", "escapeSlash"];
  function HtmlEscape(mode) {
    this.mode = mode;
    this.$deferredAction();
  }
  HtmlEscape.builtin$cls = "HtmlEscape";
  if (!"name" in HtmlEscape)
    HtmlEscape.name = "HtmlEscape";
  $desc = $collectedClasses.HtmlEscape[1];
  HtmlEscape.prototype = $desc;
  HtmlEscape.$__fields__ = ["mode"];
  function JsonUnsupportedObjectError(unsupportedObject, cause) {
    this.unsupportedObject = unsupportedObject;
    this.cause = cause;
    this.$deferredAction();
  }
  JsonUnsupportedObjectError.builtin$cls = "JsonUnsupportedObjectError";
  if (!"name" in JsonUnsupportedObjectError)
    JsonUnsupportedObjectError.name = "JsonUnsupportedObjectError";
  $desc = $collectedClasses.JsonUnsupportedObjectError[1];
  JsonUnsupportedObjectError.prototype = $desc;
  JsonUnsupportedObjectError.$__fields__ = ["unsupportedObject", "cause"];
  function JsonCyclicError(unsupportedObject, cause) {
    this.unsupportedObject = unsupportedObject;
    this.cause = cause;
    this.$deferredAction();
  }
  JsonCyclicError.builtin$cls = "JsonCyclicError";
  if (!"name" in JsonCyclicError)
    JsonCyclicError.name = "JsonCyclicError";
  $desc = $collectedClasses.JsonCyclicError[1];
  JsonCyclicError.prototype = $desc;
  JsonCyclicError.$__fields__ = ["unsupportedObject", "cause"];
  function JsonCodec(_reviver, _toEncodable) {
    this._reviver = _reviver;
    this._toEncodable = _toEncodable;
    this.$deferredAction();
  }
  JsonCodec.builtin$cls = "JsonCodec";
  if (!"name" in JsonCodec)
    JsonCodec.name = "JsonCodec";
  $desc = $collectedClasses.JsonCodec[1];
  JsonCodec.prototype = $desc;
  JsonCodec.$__fields__ = ["_reviver", "_toEncodable"];
  function JsonEncoder(indent, _toEncodable) {
    this.indent = indent;
    this._toEncodable = _toEncodable;
    this.$deferredAction();
  }
  JsonEncoder.builtin$cls = "JsonEncoder";
  if (!"name" in JsonEncoder)
    JsonEncoder.name = "JsonEncoder";
  $desc = $collectedClasses.JsonEncoder[1];
  JsonEncoder.prototype = $desc;
  JsonEncoder.$__fields__ = ["indent", "_toEncodable"];
  function _JsonStringifier() {
    this.$deferredAction();
  }
  _JsonStringifier.builtin$cls = "_JsonStringifier";
  if (!"name" in _JsonStringifier)
    _JsonStringifier.name = "_JsonStringifier";
  $desc = $collectedClasses._JsonStringifier[1];
  _JsonStringifier.prototype = $desc;
  _JsonStringifier.$__fields__ = [];
  function _JsonStringifier_writeMap_closure(_convert$_box_0, _captured_this_1) {
    this._convert$_box_0 = _convert$_box_0;
    this._captured_this_1 = _captured_this_1;
    this.$deferredAction();
  }
  _JsonStringifier_writeMap_closure.builtin$cls = "_JsonStringifier_writeMap_closure";
  if (!"name" in _JsonStringifier_writeMap_closure)
    _JsonStringifier_writeMap_closure.name = "_JsonStringifier_writeMap_closure";
  $desc = $collectedClasses._JsonStringifier_writeMap_closure[1];
  _JsonStringifier_writeMap_closure.prototype = $desc;
  _JsonStringifier_writeMap_closure.$__fields__ = ["_convert$_box_0", "_captured_this_1"];
  function _JsonStringStringifier(_sink, _seen, _toEncodable) {
    this._sink = _sink;
    this._seen = _seen;
    this._toEncodable = _toEncodable;
    this.$deferredAction();
  }
  _JsonStringStringifier.builtin$cls = "_JsonStringStringifier";
  if (!"name" in _JsonStringStringifier)
    _JsonStringStringifier.name = "_JsonStringStringifier";
  $desc = $collectedClasses._JsonStringStringifier[1];
  _JsonStringStringifier.prototype = $desc;
  _JsonStringStringifier.$__fields__ = ["_sink", "_seen", "_toEncodable"];
  function Utf8Codec(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
    this.$deferredAction();
  }
  Utf8Codec.builtin$cls = "Utf8Codec";
  if (!"name" in Utf8Codec)
    Utf8Codec.name = "Utf8Codec";
  $desc = $collectedClasses.Utf8Codec[1];
  Utf8Codec.prototype = $desc;
  Utf8Codec.$__fields__ = ["_allowMalformed"];
  function Utf8Encoder() {
    this.$deferredAction();
  }
  Utf8Encoder.builtin$cls = "Utf8Encoder";
  if (!"name" in Utf8Encoder)
    Utf8Encoder.name = "Utf8Encoder";
  $desc = $collectedClasses.Utf8Encoder[1];
  Utf8Encoder.prototype = $desc;
  Utf8Encoder.$__fields__ = [];
  function _Utf8Encoder(_carry, _bufferIndex, _buffer) {
    this._carry = _carry;
    this._bufferIndex = _bufferIndex;
    this._buffer = _buffer;
    this.$deferredAction();
  }
  _Utf8Encoder.builtin$cls = "_Utf8Encoder";
  if (!"name" in _Utf8Encoder)
    _Utf8Encoder.name = "_Utf8Encoder";
  $desc = $collectedClasses._Utf8Encoder[1];
  _Utf8Encoder.prototype = $desc;
  _Utf8Encoder.$__fields__ = ["_carry", "_bufferIndex", "_buffer"];
  function Utf8Decoder(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
    this.$deferredAction();
  }
  Utf8Decoder.builtin$cls = "Utf8Decoder";
  if (!"name" in Utf8Decoder)
    Utf8Decoder.name = "Utf8Decoder";
  $desc = $collectedClasses.Utf8Decoder[1];
  Utf8Decoder.prototype = $desc;
  Utf8Decoder.$__fields__ = ["_allowMalformed"];
  function _Utf8Decoder(_allowMalformed, _stringSink, _isFirstCharacter, _convert$_value, _expectedUnits, _extraUnits) {
    this._allowMalformed = _allowMalformed;
    this._stringSink = _stringSink;
    this._isFirstCharacter = _isFirstCharacter;
    this._convert$_value = _convert$_value;
    this._expectedUnits = _expectedUnits;
    this._extraUnits = _extraUnits;
    this.$deferredAction();
  }
  _Utf8Decoder.builtin$cls = "_Utf8Decoder";
  if (!"name" in _Utf8Decoder)
    _Utf8Decoder.name = "_Utf8Decoder";
  $desc = $collectedClasses._Utf8Decoder[1];
  _Utf8Decoder.prototype = $desc;
  _Utf8Decoder.$__fields__ = ["_allowMalformed", "_stringSink", "_isFirstCharacter", "_convert$_value", "_expectedUnits", "_extraUnits"];
  function _Utf8Decoder_convert_scanOneByteCharacters(_captured_endIndex_0) {
    this._captured_endIndex_0 = _captured_endIndex_0;
    this.$deferredAction();
  }
  _Utf8Decoder_convert_scanOneByteCharacters.builtin$cls = "_Utf8Decoder_convert_scanOneByteCharacters";
  if (!"name" in _Utf8Decoder_convert_scanOneByteCharacters)
    _Utf8Decoder_convert_scanOneByteCharacters.name = "_Utf8Decoder_convert_scanOneByteCharacters";
  $desc = $collectedClasses._Utf8Decoder_convert_scanOneByteCharacters[1];
  _Utf8Decoder_convert_scanOneByteCharacters.prototype = $desc;
  _Utf8Decoder_convert_scanOneByteCharacters.$__fields__ = ["_captured_endIndex_0"];
  function _Utf8Decoder_convert_addSingleBytes(_captured_this_1, _captured_codeUnits_2, _captured_startIndex_3, _captured_endIndex_4) {
    this._captured_this_1 = _captured_this_1;
    this._captured_codeUnits_2 = _captured_codeUnits_2;
    this._captured_startIndex_3 = _captured_startIndex_3;
    this._captured_endIndex_4 = _captured_endIndex_4;
    this.$deferredAction();
  }
  _Utf8Decoder_convert_addSingleBytes.builtin$cls = "_Utf8Decoder_convert_addSingleBytes";
  if (!"name" in _Utf8Decoder_convert_addSingleBytes)
    _Utf8Decoder_convert_addSingleBytes.name = "_Utf8Decoder_convert_addSingleBytes";
  $desc = $collectedClasses._Utf8Decoder_convert_addSingleBytes[1];
  _Utf8Decoder_convert_addSingleBytes.prototype = $desc;
  _Utf8Decoder_convert_addSingleBytes.$__fields__ = ["_captured_this_1", "_captured_codeUnits_2", "_captured_startIndex_3", "_captured_endIndex_4"];
  function NoSuchMethodError_toString_closure(_core$_box_0) {
    this._core$_box_0 = _core$_box_0;
    this.$deferredAction();
  }
  NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
  if (!"name" in NoSuchMethodError_toString_closure)
    NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
  $desc = $collectedClasses.NoSuchMethodError_toString_closure[1];
  NoSuchMethodError_toString_closure.prototype = $desc;
  NoSuchMethodError_toString_closure.$__fields__ = ["_core$_box_0"];
  function bool() {
    this.$deferredAction();
  }
  bool.builtin$cls = "bool";
  if (!"name" in bool)
    bool.name = "bool";
  $desc = $collectedClasses.bool[1];
  bool.prototype = $desc;
  bool.$__fields__ = [];
  function Comparable() {
    this.$deferredAction();
  }
  Comparable.builtin$cls = "Comparable";
  if (!"name" in Comparable)
    Comparable.name = "Comparable";
  $desc = $collectedClasses.Comparable[1];
  Comparable.prototype = $desc;
  Comparable.$__fields__ = [];
  function DateTime(millisecondsSinceEpoch, isUtc) {
    this.millisecondsSinceEpoch = millisecondsSinceEpoch;
    this.isUtc = isUtc;
    this.$deferredAction();
  }
  DateTime.builtin$cls = "DateTime";
  if (!"name" in DateTime)
    DateTime.name = "DateTime";
  $desc = $collectedClasses.DateTime[1];
  DateTime.prototype = $desc;
  DateTime.$__fields__ = ["millisecondsSinceEpoch", "isUtc"];
  DateTime.prototype.get$millisecondsSinceEpoch = function() {
    return this.millisecondsSinceEpoch;
  };
  function $double() {
    this.$deferredAction();
  }
  $double.builtin$cls = "$double";
  if (!"name" in $double)
    $double.name = "$double";
  $desc = $collectedClasses.$double[1];
  $double.prototype = $desc;
  $double.$__fields__ = [];
  function Duration(_duration) {
    this._duration = _duration;
    this.$deferredAction();
  }
  Duration.builtin$cls = "Duration";
  if (!"name" in Duration)
    Duration.name = "Duration";
  $desc = $collectedClasses.Duration[1];
  Duration.prototype = $desc;
  Duration.$__fields__ = ["_duration"];
  Duration.prototype.get$_duration = function() {
    return this._duration;
  };
  function Duration_toString_sixDigits() {
    this.$deferredAction();
  }
  Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
  if (!"name" in Duration_toString_sixDigits)
    Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
  $desc = $collectedClasses.Duration_toString_sixDigits[1];
  Duration_toString_sixDigits.prototype = $desc;
  Duration_toString_sixDigits.$__fields__ = [];
  function Duration_toString_twoDigits() {
    this.$deferredAction();
  }
  Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
  if (!"name" in Duration_toString_twoDigits)
    Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
  $desc = $collectedClasses.Duration_toString_twoDigits[1];
  Duration_toString_twoDigits.prototype = $desc;
  Duration_toString_twoDigits.$__fields__ = [];
  function Error() {
    this.$deferredAction();
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error[1];
  Error.prototype = $desc;
  Error.$__fields__ = [];
  function NullThrownError() {
    this.$deferredAction();
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError[1];
  NullThrownError.prototype = $desc;
  NullThrownError.$__fields__ = [];
  function ArgumentError(_hasValue, invalidValue, name, message) {
    this._hasValue = _hasValue;
    this.invalidValue = invalidValue;
    this.name = name;
    this.message = message;
    this.$deferredAction();
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError[1];
  ArgumentError.prototype = $desc;
  ArgumentError.$__fields__ = ["_hasValue", "invalidValue", "name", "message"];
  ArgumentError.prototype.get$name = function(receiver) {
    return this.name;
  };
  ArgumentError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RangeError(start, end, _hasValue, invalidValue, name, message) {
    this.start = start;
    this.end = end;
    this._hasValue = _hasValue;
    this.invalidValue = invalidValue;
    this.name = name;
    this.message = message;
    this.$deferredAction();
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError[1];
  RangeError.prototype = $desc;
  RangeError.$__fields__ = ["start", "end", "_hasValue", "invalidValue", "name", "message"];
  function IndexError(indexable, length, _hasValue, invalidValue, name, message) {
    this.indexable = indexable;
    this.length = length;
    this._hasValue = _hasValue;
    this.invalidValue = invalidValue;
    this.name = name;
    this.message = message;
    this.$deferredAction();
  }
  IndexError.builtin$cls = "IndexError";
  if (!"name" in IndexError)
    IndexError.name = "IndexError";
  $desc = $collectedClasses.IndexError[1];
  IndexError.prototype = $desc;
  IndexError.$__fields__ = ["indexable", "length", "_hasValue", "invalidValue", "name", "message"];
  IndexError.prototype.get$length = function(receiver) {
    return this.length;
  };
  function NoSuchMethodError(_core$_receiver, _memberName, _core$_arguments, _namedArguments, _existingArgumentNames) {
    this._core$_receiver = _core$_receiver;
    this._memberName = _memberName;
    this._core$_arguments = _core$_arguments;
    this._namedArguments = _namedArguments;
    this._existingArgumentNames = _existingArgumentNames;
    this.$deferredAction();
  }
  NoSuchMethodError.builtin$cls = "NoSuchMethodError";
  if (!"name" in NoSuchMethodError)
    NoSuchMethodError.name = "NoSuchMethodError";
  $desc = $collectedClasses.NoSuchMethodError[1];
  NoSuchMethodError.prototype = $desc;
  NoSuchMethodError.$__fields__ = ["_core$_receiver", "_memberName", "_core$_arguments", "_namedArguments", "_existingArgumentNames"];
  function UnsupportedError(message) {
    this.message = message;
    this.$deferredAction();
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError[1];
  UnsupportedError.prototype = $desc;
  UnsupportedError.$__fields__ = ["message"];
  UnsupportedError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function UnimplementedError(message) {
    this.message = message;
    this.$deferredAction();
  }
  UnimplementedError.builtin$cls = "UnimplementedError";
  if (!"name" in UnimplementedError)
    UnimplementedError.name = "UnimplementedError";
  $desc = $collectedClasses.UnimplementedError[1];
  UnimplementedError.prototype = $desc;
  UnimplementedError.$__fields__ = ["message"];
  UnimplementedError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function StateError(message) {
    this.message = message;
    this.$deferredAction();
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError[1];
  StateError.prototype = $desc;
  StateError.$__fields__ = ["message"];
  StateError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
    this.$deferredAction();
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError[1];
  ConcurrentModificationError.prototype = $desc;
  ConcurrentModificationError.$__fields__ = ["modifiedObject"];
  function OutOfMemoryError() {
    this.$deferredAction();
  }
  OutOfMemoryError.builtin$cls = "OutOfMemoryError";
  if (!"name" in OutOfMemoryError)
    OutOfMemoryError.name = "OutOfMemoryError";
  $desc = $collectedClasses.OutOfMemoryError[1];
  OutOfMemoryError.prototype = $desc;
  OutOfMemoryError.$__fields__ = [];
  function StackOverflowError() {
    this.$deferredAction();
  }
  StackOverflowError.builtin$cls = "StackOverflowError";
  if (!"name" in StackOverflowError)
    StackOverflowError.name = "StackOverflowError";
  $desc = $collectedClasses.StackOverflowError[1];
  StackOverflowError.prototype = $desc;
  StackOverflowError.$__fields__ = [];
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
    this.$deferredAction();
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError[1];
  CyclicInitializationError.prototype = $desc;
  CyclicInitializationError.$__fields__ = ["variableName"];
  function _ExceptionImplementation(message) {
    this.message = message;
    this.$deferredAction();
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation[1];
  _ExceptionImplementation.prototype = $desc;
  _ExceptionImplementation.$__fields__ = ["message"];
  _ExceptionImplementation.prototype.get$message = function(receiver) {
    return this.message;
  };
  function FormatException(message, source, offset) {
    this.message = message;
    this.source = source;
    this.offset = offset;
    this.$deferredAction();
  }
  FormatException.builtin$cls = "FormatException";
  if (!"name" in FormatException)
    FormatException.name = "FormatException";
  $desc = $collectedClasses.FormatException[1];
  FormatException.prototype = $desc;
  FormatException.$__fields__ = ["message", "source", "offset"];
  FormatException.prototype.get$message = function(receiver) {
    return this.message;
  };
  FormatException.prototype.get$offset = function(receiver) {
    return this.offset;
  };
  function IntegerDivisionByZeroException() {
    this.$deferredAction();
  }
  IntegerDivisionByZeroException.builtin$cls = "IntegerDivisionByZeroException";
  if (!"name" in IntegerDivisionByZeroException)
    IntegerDivisionByZeroException.name = "IntegerDivisionByZeroException";
  $desc = $collectedClasses.IntegerDivisionByZeroException[1];
  IntegerDivisionByZeroException.prototype = $desc;
  IntegerDivisionByZeroException.$__fields__ = [];
  function Expando(name) {
    this.name = name;
    this.$deferredAction();
  }
  Expando.builtin$cls = "Expando";
  if (!"name" in Expando)
    Expando.name = "Expando";
  $desc = $collectedClasses.Expando[1];
  Expando.prototype = $desc;
  Expando.$__fields__ = ["name"];
  Expando.prototype.get$name = function(receiver) {
    return this.name;
  };
  function Function() {
    this.$deferredAction();
  }
  Function.builtin$cls = "Function";
  if (!"name" in Function)
    Function.name = "Function";
  $desc = $collectedClasses.Function[1];
  Function.prototype = $desc;
  Function.$__fields__ = [];
  function $int() {
    this.$deferredAction();
  }
  $int.builtin$cls = "$int";
  if (!"name" in $int)
    $int.name = "$int";
  $desc = $collectedClasses.$int[1];
  $int.prototype = $desc;
  $int.$__fields__ = [];
  function Iterator() {
    this.$deferredAction();
  }
  Iterator.builtin$cls = "Iterator";
  if (!"name" in Iterator)
    Iterator.name = "Iterator";
  $desc = $collectedClasses.Iterator[1];
  Iterator.prototype = $desc;
  Iterator.$__fields__ = [];
  function List() {
    this.$deferredAction();
  }
  List.builtin$cls = "List";
  if (!"name" in List)
    List.name = "List";
  $desc = $collectedClasses.List[1];
  List.prototype = $desc;
  List.$__fields__ = [];
  function Null() {
    this.$deferredAction();
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null[1];
  Null.prototype = $desc;
  Null.$__fields__ = [];
  function num() {
    this.$deferredAction();
  }
  num.builtin$cls = "num";
  if (!"name" in num)
    num.name = "num";
  $desc = $collectedClasses.num[1];
  num.prototype = $desc;
  num.$__fields__ = [];
  function Object() {
    this.$deferredAction();
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object[1];
  Object.prototype = $desc;
  Object.$__fields__ = [];
  function Match() {
    this.$deferredAction();
  }
  Match.builtin$cls = "Match";
  if (!"name" in Match)
    Match.name = "Match";
  $desc = $collectedClasses.Match[1];
  Match.prototype = $desc;
  Match.$__fields__ = [];
  function StackTrace() {
    this.$deferredAction();
  }
  StackTrace.builtin$cls = "StackTrace";
  if (!"name" in StackTrace)
    StackTrace.name = "StackTrace";
  $desc = $collectedClasses.StackTrace[1];
  StackTrace.prototype = $desc;
  StackTrace.$__fields__ = [];
  function Stopwatch(_start, _stop) {
    this._start = _start;
    this._stop = _stop;
    this.$deferredAction();
  }
  Stopwatch.builtin$cls = "Stopwatch";
  if (!"name" in Stopwatch)
    Stopwatch.name = "Stopwatch";
  $desc = $collectedClasses.Stopwatch[1];
  Stopwatch.prototype = $desc;
  Stopwatch.$__fields__ = ["_start", "_stop"];
  function String() {
    this.$deferredAction();
  }
  String.builtin$cls = "String";
  if (!"name" in String)
    String.name = "String";
  $desc = $collectedClasses.String[1];
  String.prototype = $desc;
  String.$__fields__ = [];
  function StringBuffer(_contents) {
    this._contents = _contents;
    this.$deferredAction();
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer[1];
  StringBuffer.prototype = $desc;
  StringBuffer.$__fields__ = ["_contents"];
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  StringBuffer.prototype.set$_contents = function(v) {
    return this._contents = v;
  };
  function Symbol() {
    this.$deferredAction();
  }
  Symbol.builtin$cls = "Symbol";
  if (!"name" in Symbol)
    Symbol.name = "Symbol";
  $desc = $collectedClasses.Symbol[1];
  Symbol.prototype = $desc;
  Symbol.$__fields__ = [];
  function Uri__uriEncode_byteToHex() {
    this.$deferredAction();
  }
  Uri__uriEncode_byteToHex.builtin$cls = "Uri__uriEncode_byteToHex";
  if (!"name" in Uri__uriEncode_byteToHex)
    Uri__uriEncode_byteToHex.name = "Uri__uriEncode_byteToHex";
  $desc = $collectedClasses.Uri__uriEncode_byteToHex[1];
  Uri__uriEncode_byteToHex.prototype = $desc;
  Uri__uriEncode_byteToHex.$__fields__ = [];
  function HtmlElement() {
    this.$deferredAction();
  }
  HtmlElement.builtin$cls = "HtmlElement";
  if (!"name" in HtmlElement)
    HtmlElement.name = "HtmlElement";
  $desc = $collectedClasses.HtmlElement[1];
  HtmlElement.prototype = $desc;
  HtmlElement.$__fields__ = [];
  function _EntryArray() {
    this.$deferredAction();
  }
  _EntryArray.builtin$cls = "_EntryArray";
  if (!"name" in _EntryArray)
    _EntryArray.name = "_EntryArray";
  $desc = $collectedClasses._EntryArray[1];
  _EntryArray.prototype = $desc;
  _EntryArray.$__fields__ = [];
  function AnchorElement() {
    this.$deferredAction();
  }
  AnchorElement.builtin$cls = "AnchorElement";
  if (!"name" in AnchorElement)
    AnchorElement.name = "AnchorElement";
  $desc = $collectedClasses.AnchorElement[1];
  AnchorElement.prototype = $desc;
  AnchorElement.$__fields__ = [];
  AnchorElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  AnchorElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function ApplicationCacheErrorEvent() {
    this.$deferredAction();
  }
  ApplicationCacheErrorEvent.builtin$cls = "ApplicationCacheErrorEvent";
  if (!"name" in ApplicationCacheErrorEvent)
    ApplicationCacheErrorEvent.name = "ApplicationCacheErrorEvent";
  $desc = $collectedClasses.ApplicationCacheErrorEvent[1];
  ApplicationCacheErrorEvent.prototype = $desc;
  ApplicationCacheErrorEvent.$__fields__ = [];
  ApplicationCacheErrorEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  ApplicationCacheErrorEvent.prototype.get$status = function(receiver) {
    return receiver.status;
  };
  function AreaElement() {
    this.$deferredAction();
  }
  AreaElement.builtin$cls = "AreaElement";
  if (!"name" in AreaElement)
    AreaElement.name = "AreaElement";
  $desc = $collectedClasses.AreaElement[1];
  AreaElement.prototype = $desc;
  AreaElement.$__fields__ = [];
  function Blob() {
    this.$deferredAction();
  }
  Blob.builtin$cls = "Blob";
  if (!"name" in Blob)
    Blob.name = "Blob";
  $desc = $collectedClasses.Blob[1];
  Blob.prototype = $desc;
  Blob.$__fields__ = [];
  Blob.prototype.get$size = function(receiver) {
    return receiver.size;
  };
  Blob.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function BodyElement() {
    this.$deferredAction();
  }
  BodyElement.builtin$cls = "BodyElement";
  if (!"name" in BodyElement)
    BodyElement.name = "BodyElement";
  $desc = $collectedClasses.BodyElement[1];
  BodyElement.prototype = $desc;
  BodyElement.$__fields__ = [];
  function ButtonElement() {
    this.$deferredAction();
  }
  ButtonElement.builtin$cls = "ButtonElement";
  if (!"name" in ButtonElement)
    ButtonElement.name = "ButtonElement";
  $desc = $collectedClasses.ButtonElement[1];
  ButtonElement.prototype = $desc;
  ButtonElement.$__fields__ = [];
  ButtonElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ButtonElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ButtonElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  ButtonElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function CharacterData() {
    this.$deferredAction();
  }
  CharacterData.builtin$cls = "CharacterData";
  if (!"name" in CharacterData)
    CharacterData.name = "CharacterData";
  $desc = $collectedClasses.CharacterData[1];
  CharacterData.prototype = $desc;
  CharacterData.$__fields__ = [];
  CharacterData.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  CharacterData.prototype.set$data = function(receiver, v) {
    return receiver.data = v;
  };
  CharacterData.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CompositionEvent() {
    this.$deferredAction();
  }
  CompositionEvent.builtin$cls = "CompositionEvent";
  if (!"name" in CompositionEvent)
    CompositionEvent.name = "CompositionEvent";
  $desc = $collectedClasses.CompositionEvent[1];
  CompositionEvent.prototype = $desc;
  CompositionEvent.$__fields__ = [];
  CompositionEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function CssStyleDeclaration() {
    this.$deferredAction();
  }
  CssStyleDeclaration.builtin$cls = "CssStyleDeclaration";
  if (!"name" in CssStyleDeclaration)
    CssStyleDeclaration.name = "CssStyleDeclaration";
  $desc = $collectedClasses.CssStyleDeclaration[1];
  CssStyleDeclaration.prototype = $desc;
  CssStyleDeclaration.$__fields__ = [];
  CssStyleDeclaration.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function Interceptor_CssStyleDeclarationBase() {
    this.$deferredAction();
  }
  Interceptor_CssStyleDeclarationBase.builtin$cls = "Interceptor_CssStyleDeclarationBase";
  if (!"name" in Interceptor_CssStyleDeclarationBase)
    Interceptor_CssStyleDeclarationBase.name = "Interceptor_CssStyleDeclarationBase";
  $desc = $collectedClasses.Interceptor_CssStyleDeclarationBase[1];
  Interceptor_CssStyleDeclarationBase.prototype = $desc;
  Interceptor_CssStyleDeclarationBase.$__fields__ = [];
  function CssStyleDeclarationBase() {
    this.$deferredAction();
  }
  CssStyleDeclarationBase.builtin$cls = "CssStyleDeclarationBase";
  if (!"name" in CssStyleDeclarationBase)
    CssStyleDeclarationBase.name = "CssStyleDeclarationBase";
  $desc = $collectedClasses.CssStyleDeclarationBase[1];
  CssStyleDeclarationBase.prototype = $desc;
  CssStyleDeclarationBase.$__fields__ = [];
  function DeviceLightEvent() {
    this.$deferredAction();
  }
  DeviceLightEvent.builtin$cls = "DeviceLightEvent";
  if (!"name" in DeviceLightEvent)
    DeviceLightEvent.name = "DeviceLightEvent";
  $desc = $collectedClasses.DeviceLightEvent[1];
  DeviceLightEvent.prototype = $desc;
  DeviceLightEvent.$__fields__ = [];
  DeviceLightEvent.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function DirectoryEntry() {
    this.$deferredAction();
  }
  DirectoryEntry.builtin$cls = "DirectoryEntry";
  if (!"name" in DirectoryEntry)
    DirectoryEntry.name = "DirectoryEntry";
  $desc = $collectedClasses.DirectoryEntry[1];
  DirectoryEntry.prototype = $desc;
  DirectoryEntry.$__fields__ = [];
  function DirectoryEntry__getDirectory_closure0(_html$_captured_completer_0) {
    this._html$_captured_completer_0 = _html$_captured_completer_0;
    this.$deferredAction();
  }
  DirectoryEntry__getDirectory_closure0.builtin$cls = "DirectoryEntry__getDirectory_closure0";
  if (!"name" in DirectoryEntry__getDirectory_closure0)
    DirectoryEntry__getDirectory_closure0.name = "DirectoryEntry__getDirectory_closure0";
  $desc = $collectedClasses.DirectoryEntry__getDirectory_closure0[1];
  DirectoryEntry__getDirectory_closure0.prototype = $desc;
  DirectoryEntry__getDirectory_closure0.$__fields__ = ["_html$_captured_completer_0"];
  function DirectoryEntry__getDirectory_closure(_captured_completer_1) {
    this._captured_completer_1 = _captured_completer_1;
    this.$deferredAction();
  }
  DirectoryEntry__getDirectory_closure.builtin$cls = "DirectoryEntry__getDirectory_closure";
  if (!"name" in DirectoryEntry__getDirectory_closure)
    DirectoryEntry__getDirectory_closure.name = "DirectoryEntry__getDirectory_closure";
  $desc = $collectedClasses.DirectoryEntry__getDirectory_closure[1];
  DirectoryEntry__getDirectory_closure.prototype = $desc;
  DirectoryEntry__getDirectory_closure.$__fields__ = ["_captured_completer_1"];
  function DirectoryEntry__getFile_closure0(_html$_captured_completer_0) {
    this._html$_captured_completer_0 = _html$_captured_completer_0;
    this.$deferredAction();
  }
  DirectoryEntry__getFile_closure0.builtin$cls = "DirectoryEntry__getFile_closure0";
  if (!"name" in DirectoryEntry__getFile_closure0)
    DirectoryEntry__getFile_closure0.name = "DirectoryEntry__getFile_closure0";
  $desc = $collectedClasses.DirectoryEntry__getFile_closure0[1];
  DirectoryEntry__getFile_closure0.prototype = $desc;
  DirectoryEntry__getFile_closure0.$__fields__ = ["_html$_captured_completer_0"];
  function DirectoryEntry__getFile_closure(_captured_completer_1) {
    this._captured_completer_1 = _captured_completer_1;
    this.$deferredAction();
  }
  DirectoryEntry__getFile_closure.builtin$cls = "DirectoryEntry__getFile_closure";
  if (!"name" in DirectoryEntry__getFile_closure)
    DirectoryEntry__getFile_closure.name = "DirectoryEntry__getFile_closure";
  $desc = $collectedClasses.DirectoryEntry__getFile_closure[1];
  DirectoryEntry__getFile_closure.prototype = $desc;
  DirectoryEntry__getFile_closure.$__fields__ = ["_captured_completer_1"];
  function DirectoryEntry_removeRecursively_closure(_html$_captured_completer_0) {
    this._html$_captured_completer_0 = _html$_captured_completer_0;
    this.$deferredAction();
  }
  DirectoryEntry_removeRecursively_closure.builtin$cls = "DirectoryEntry_removeRecursively_closure";
  if (!"name" in DirectoryEntry_removeRecursively_closure)
    DirectoryEntry_removeRecursively_closure.name = "DirectoryEntry_removeRecursively_closure";
  $desc = $collectedClasses.DirectoryEntry_removeRecursively_closure[1];
  DirectoryEntry_removeRecursively_closure.prototype = $desc;
  DirectoryEntry_removeRecursively_closure.$__fields__ = ["_html$_captured_completer_0"];
  function DirectoryEntry_removeRecursively_closure0(_captured_completer_1) {
    this._captured_completer_1 = _captured_completer_1;
    this.$deferredAction();
  }
  DirectoryEntry_removeRecursively_closure0.builtin$cls = "DirectoryEntry_removeRecursively_closure0";
  if (!"name" in DirectoryEntry_removeRecursively_closure0)
    DirectoryEntry_removeRecursively_closure0.name = "DirectoryEntry_removeRecursively_closure0";
  $desc = $collectedClasses.DirectoryEntry_removeRecursively_closure0[1];
  DirectoryEntry_removeRecursively_closure0.prototype = $desc;
  DirectoryEntry_removeRecursively_closure0.$__fields__ = ["_captured_completer_1"];
  function DirectoryReader() {
    this.$deferredAction();
  }
  DirectoryReader.builtin$cls = "DirectoryReader";
  if (!"name" in DirectoryReader)
    DirectoryReader.name = "DirectoryReader";
  $desc = $collectedClasses.DirectoryReader[1];
  DirectoryReader.prototype = $desc;
  DirectoryReader.$__fields__ = [];
  function DirectoryReader_readEntries_closure(_html$_captured_completer_0) {
    this._html$_captured_completer_0 = _html$_captured_completer_0;
    this.$deferredAction();
  }
  DirectoryReader_readEntries_closure.builtin$cls = "DirectoryReader_readEntries_closure";
  if (!"name" in DirectoryReader_readEntries_closure)
    DirectoryReader_readEntries_closure.name = "DirectoryReader_readEntries_closure";
  $desc = $collectedClasses.DirectoryReader_readEntries_closure[1];
  DirectoryReader_readEntries_closure.prototype = $desc;
  DirectoryReader_readEntries_closure.$__fields__ = ["_html$_captured_completer_0"];
  function DirectoryReader_readEntries_closure0(_captured_completer_1) {
    this._captured_completer_1 = _captured_completer_1;
    this.$deferredAction();
  }
  DirectoryReader_readEntries_closure0.builtin$cls = "DirectoryReader_readEntries_closure0";
  if (!"name" in DirectoryReader_readEntries_closure0)
    DirectoryReader_readEntries_closure0.name = "DirectoryReader_readEntries_closure0";
  $desc = $collectedClasses.DirectoryReader_readEntries_closure0[1];
  DirectoryReader_readEntries_closure0.prototype = $desc;
  DirectoryReader_readEntries_closure0.$__fields__ = ["_captured_completer_1"];
  function DivElement() {
    this.$deferredAction();
  }
  DivElement.builtin$cls = "DivElement";
  if (!"name" in DivElement)
    DivElement.name = "DivElement";
  $desc = $collectedClasses.DivElement[1];
  DivElement.prototype = $desc;
  DivElement.$__fields__ = [];
  function Document() {
    this.$deferredAction();
  }
  Document.builtin$cls = "Document";
  if (!"name" in Document)
    Document.name = "Document";
  $desc = $collectedClasses.Document[1];
  Document.prototype = $desc;
  Document.$__fields__ = [];
  function DocumentFragment() {
    this.$deferredAction();
  }
  DocumentFragment.builtin$cls = "DocumentFragment";
  if (!"name" in DocumentFragment)
    DocumentFragment.name = "DocumentFragment";
  $desc = $collectedClasses.DocumentFragment[1];
  DocumentFragment.prototype = $desc;
  DocumentFragment.$__fields__ = [];
  function DomError() {
    this.$deferredAction();
  }
  DomError.builtin$cls = "DomError";
  if (!"name" in DomError)
    DomError.name = "DomError";
  $desc = $collectedClasses.DomError[1];
  DomError.prototype = $desc;
  DomError.$__fields__ = [];
  DomError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  DomError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function DomException() {
    this.$deferredAction();
  }
  DomException.builtin$cls = "DomException";
  if (!"name" in DomException)
    DomException.name = "DomException";
  $desc = $collectedClasses.DomException[1];
  DomException.prototype = $desc;
  DomException.$__fields__ = [];
  DomException.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function DomRectReadOnly() {
    this.$deferredAction();
  }
  DomRectReadOnly.builtin$cls = "DomRectReadOnly";
  if (!"name" in DomRectReadOnly)
    DomRectReadOnly.name = "DomRectReadOnly";
  $desc = $collectedClasses.DomRectReadOnly[1];
  DomRectReadOnly.prototype = $desc;
  DomRectReadOnly.$__fields__ = [];
  DomRectReadOnly.prototype.get$bottom = function(receiver) {
    return receiver.bottom;
  };
  DomRectReadOnly.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  DomRectReadOnly.prototype.get$left = function(receiver) {
    return receiver.left;
  };
  DomRectReadOnly.prototype.get$right = function(receiver) {
    return receiver.right;
  };
  DomRectReadOnly.prototype.get$top = function(receiver) {
    return receiver.top;
  };
  DomRectReadOnly.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  DomRectReadOnly.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  DomRectReadOnly.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function DomSettableTokenList() {
    this.$deferredAction();
  }
  DomSettableTokenList.builtin$cls = "DomSettableTokenList";
  if (!"name" in DomSettableTokenList)
    DomSettableTokenList.name = "DomSettableTokenList";
  $desc = $collectedClasses.DomSettableTokenList[1];
  DomSettableTokenList.prototype = $desc;
  DomSettableTokenList.$__fields__ = [];
  DomSettableTokenList.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function DomTokenList() {
    this.$deferredAction();
  }
  DomTokenList.builtin$cls = "DomTokenList";
  if (!"name" in DomTokenList)
    DomTokenList.name = "DomTokenList";
  $desc = $collectedClasses.DomTokenList[1];
  DomTokenList.prototype = $desc;
  DomTokenList.$__fields__ = [];
  DomTokenList.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function Element() {
    this.$deferredAction();
  }
  Element.builtin$cls = "Element";
  if (!"name" in Element)
    Element.name = "Element";
  $desc = $collectedClasses.Element[1];
  Element.prototype = $desc;
  Element.$__fields__ = [];
  function EmbedElement() {
    this.$deferredAction();
  }
  EmbedElement.builtin$cls = "EmbedElement";
  if (!"name" in EmbedElement)
    EmbedElement.name = "EmbedElement";
  $desc = $collectedClasses.EmbedElement[1];
  EmbedElement.prototype = $desc;
  EmbedElement.$__fields__ = [];
  EmbedElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  EmbedElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  EmbedElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function Entry() {
    this.$deferredAction();
  }
  Entry.builtin$cls = "Entry";
  if (!"name" in Entry)
    Entry.name = "Entry";
  $desc = $collectedClasses.Entry[1];
  Entry.prototype = $desc;
  Entry.$__fields__ = [];
  Entry.prototype.get$fullPath = function(receiver) {
    return receiver.fullPath;
  };
  Entry.prototype.get$isDirectory = function(receiver) {
    return receiver.isDirectory;
  };
  Entry.prototype.get$isFile = function(receiver) {
    return receiver.isFile;
  };
  Entry.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Entry_getMetadata_closure(_html$_captured_completer_0) {
    this._html$_captured_completer_0 = _html$_captured_completer_0;
    this.$deferredAction();
  }
  Entry_getMetadata_closure.builtin$cls = "Entry_getMetadata_closure";
  if (!"name" in Entry_getMetadata_closure)
    Entry_getMetadata_closure.name = "Entry_getMetadata_closure";
  $desc = $collectedClasses.Entry_getMetadata_closure[1];
  Entry_getMetadata_closure.prototype = $desc;
  Entry_getMetadata_closure.$__fields__ = ["_html$_captured_completer_0"];
  function Entry_getMetadata_closure0(_captured_completer_1) {
    this._captured_completer_1 = _captured_completer_1;
    this.$deferredAction();
  }
  Entry_getMetadata_closure0.builtin$cls = "Entry_getMetadata_closure0";
  if (!"name" in Entry_getMetadata_closure0)
    Entry_getMetadata_closure0.name = "Entry_getMetadata_closure0";
  $desc = $collectedClasses.Entry_getMetadata_closure0[1];
  Entry_getMetadata_closure0.prototype = $desc;
  Entry_getMetadata_closure0.$__fields__ = ["_captured_completer_1"];
  function Entry_getParent_closure(_html$_captured_completer_0) {
    this._html$_captured_completer_0 = _html$_captured_completer_0;
    this.$deferredAction();
  }
  Entry_getParent_closure.builtin$cls = "Entry_getParent_closure";
  if (!"name" in Entry_getParent_closure)
    Entry_getParent_closure.name = "Entry_getParent_closure";
  $desc = $collectedClasses.Entry_getParent_closure[1];
  Entry_getParent_closure.prototype = $desc;
  Entry_getParent_closure.$__fields__ = ["_html$_captured_completer_0"];
  function Entry_getParent_closure0(_captured_completer_1) {
    this._captured_completer_1 = _captured_completer_1;
    this.$deferredAction();
  }
  Entry_getParent_closure0.builtin$cls = "Entry_getParent_closure0";
  if (!"name" in Entry_getParent_closure0)
    Entry_getParent_closure0.name = "Entry_getParent_closure0";
  $desc = $collectedClasses.Entry_getParent_closure0[1];
  Entry_getParent_closure0.prototype = $desc;
  Entry_getParent_closure0.$__fields__ = ["_captured_completer_1"];
  function Entry_remove_closure(_html$_captured_completer_0) {
    this._html$_captured_completer_0 = _html$_captured_completer_0;
    this.$deferredAction();
  }
  Entry_remove_closure.builtin$cls = "Entry_remove_closure";
  if (!"name" in Entry_remove_closure)
    Entry_remove_closure.name = "Entry_remove_closure";
  $desc = $collectedClasses.Entry_remove_closure[1];
  Entry_remove_closure.prototype = $desc;
  Entry_remove_closure.$__fields__ = ["_html$_captured_completer_0"];
  function Entry_remove_closure0(_captured_completer_1) {
    this._captured_completer_1 = _captured_completer_1;
    this.$deferredAction();
  }
  Entry_remove_closure0.builtin$cls = "Entry_remove_closure0";
  if (!"name" in Entry_remove_closure0)
    Entry_remove_closure0.name = "Entry_remove_closure0";
  $desc = $collectedClasses.Entry_remove_closure0[1];
  Entry_remove_closure0.prototype = $desc;
  Entry_remove_closure0.$__fields__ = ["_captured_completer_1"];
  function ErrorEvent() {
    this.$deferredAction();
  }
  ErrorEvent.builtin$cls = "ErrorEvent";
  if (!"name" in ErrorEvent)
    ErrorEvent.name = "ErrorEvent";
  $desc = $collectedClasses.ErrorEvent[1];
  ErrorEvent.prototype = $desc;
  ErrorEvent.$__fields__ = [];
  ErrorEvent.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  ErrorEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function Event() {
    this.$deferredAction();
  }
  Event.builtin$cls = "Event";
  if (!"name" in Event)
    Event.name = "Event";
  $desc = $collectedClasses.Event[1];
  Event.prototype = $desc;
  Event.$__fields__ = [];
  Event.prototype.get$path = function(receiver) {
    return receiver.path;
  };
  Event.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function EventTarget() {
    this.$deferredAction();
  }
  EventTarget.builtin$cls = "EventTarget";
  if (!"name" in EventTarget)
    EventTarget.name = "EventTarget";
  $desc = $collectedClasses.EventTarget[1];
  EventTarget.prototype = $desc;
  EventTarget.$__fields__ = [];
  function FieldSetElement() {
    this.$deferredAction();
  }
  FieldSetElement.builtin$cls = "FieldSetElement";
  if (!"name" in FieldSetElement)
    FieldSetElement.name = "FieldSetElement";
  $desc = $collectedClasses.FieldSetElement[1];
  FieldSetElement.prototype = $desc;
  FieldSetElement.$__fields__ = [];
  FieldSetElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FieldSetElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function File() {
    this.$deferredAction();
  }
  File.builtin$cls = "File";
  if (!"name" in File)
    File.name = "File";
  $desc = $collectedClasses.File[1];
  File.prototype = $desc;
  File.$__fields__ = [];
  File.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function FileEntry() {
    this.$deferredAction();
  }
  FileEntry.builtin$cls = "FileEntry";
  if (!"name" in FileEntry)
    FileEntry.name = "FileEntry";
  $desc = $collectedClasses.FileEntry[1];
  FileEntry.prototype = $desc;
  FileEntry.$__fields__ = [];
  function FileEntry_createWriter_closure(_html$_captured_completer_0) {
    this._html$_captured_completer_0 = _html$_captured_completer_0;
    this.$deferredAction();
  }
  FileEntry_createWriter_closure.builtin$cls = "FileEntry_createWriter_closure";
  if (!"name" in FileEntry_createWriter_closure)
    FileEntry_createWriter_closure.name = "FileEntry_createWriter_closure";
  $desc = $collectedClasses.FileEntry_createWriter_closure[1];
  FileEntry_createWriter_closure.prototype = $desc;
  FileEntry_createWriter_closure.$__fields__ = ["_html$_captured_completer_0"];
  function FileEntry_createWriter_closure0(_captured_completer_1) {
    this._captured_completer_1 = _captured_completer_1;
    this.$deferredAction();
  }
  FileEntry_createWriter_closure0.builtin$cls = "FileEntry_createWriter_closure0";
  if (!"name" in FileEntry_createWriter_closure0)
    FileEntry_createWriter_closure0.name = "FileEntry_createWriter_closure0";
  $desc = $collectedClasses.FileEntry_createWriter_closure0[1];
  FileEntry_createWriter_closure0.prototype = $desc;
  FileEntry_createWriter_closure0.$__fields__ = ["_captured_completer_1"];
  function FileEntry_file_closure(_html$_captured_completer_0) {
    this._html$_captured_completer_0 = _html$_captured_completer_0;
    this.$deferredAction();
  }
  FileEntry_file_closure.builtin$cls = "FileEntry_file_closure";
  if (!"name" in FileEntry_file_closure)
    FileEntry_file_closure.name = "FileEntry_file_closure";
  $desc = $collectedClasses.FileEntry_file_closure[1];
  FileEntry_file_closure.prototype = $desc;
  FileEntry_file_closure.$__fields__ = ["_html$_captured_completer_0"];
  function FileEntry_file_closure0(_captured_completer_1) {
    this._captured_completer_1 = _captured_completer_1;
    this.$deferredAction();
  }
  FileEntry_file_closure0.builtin$cls = "FileEntry_file_closure0";
  if (!"name" in FileEntry_file_closure0)
    FileEntry_file_closure0.name = "FileEntry_file_closure0";
  $desc = $collectedClasses.FileEntry_file_closure0[1];
  FileEntry_file_closure0.prototype = $desc;
  FileEntry_file_closure0.$__fields__ = ["_captured_completer_1"];
  function FileError() {
    this.$deferredAction();
  }
  FileError.builtin$cls = "FileError";
  if (!"name" in FileError)
    FileError.name = "FileError";
  $desc = $collectedClasses.FileError[1];
  FileError.prototype = $desc;
  FileError.$__fields__ = [];
  function FileReader() {
    this.$deferredAction();
  }
  FileReader.builtin$cls = "FileReader";
  if (!"name" in FileReader)
    FileReader.name = "FileReader";
  $desc = $collectedClasses.FileReader[1];
  FileReader.prototype = $desc;
  FileReader.$__fields__ = [];
  FileReader.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function FileSystem() {
    this.$deferredAction();
  }
  FileSystem.builtin$cls = "FileSystem";
  if (!"name" in FileSystem)
    FileSystem.name = "FileSystem";
  $desc = $collectedClasses.FileSystem[1];
  FileSystem.prototype = $desc;
  FileSystem.$__fields__ = [];
  FileSystem.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FileSystem.prototype.get$root = function(receiver) {
    return receiver.root;
  };
  function FileWriter() {
    this.$deferredAction();
  }
  FileWriter.builtin$cls = "FileWriter";
  if (!"name" in FileWriter)
    FileWriter.name = "FileWriter";
  $desc = $collectedClasses.FileWriter[1];
  FileWriter.prototype = $desc;
  FileWriter.$__fields__ = [];
  FileWriter.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  FileWriter.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  FileWriter.prototype.get$position = function(receiver) {
    return receiver.position;
  };
  function FormElement() {
    this.$deferredAction();
  }
  FormElement.builtin$cls = "FormElement";
  if (!"name" in FormElement)
    FormElement.name = "FormElement";
  $desc = $collectedClasses.FormElement[1];
  FormElement.prototype = $desc;
  FormElement.$__fields__ = [];
  FormElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  FormElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function HttpRequest() {
    this.$deferredAction();
  }
  HttpRequest.builtin$cls = "HttpRequest";
  if (!"name" in HttpRequest)
    HttpRequest.name = "HttpRequest";
  $desc = $collectedClasses.HttpRequest[1];
  HttpRequest.prototype = $desc;
  HttpRequest.$__fields__ = [];
  HttpRequest.prototype.get$status = function(receiver) {
    return receiver.status;
  };
  function HttpRequestEventTarget() {
    this.$deferredAction();
  }
  HttpRequestEventTarget.builtin$cls = "HttpRequestEventTarget";
  if (!"name" in HttpRequestEventTarget)
    HttpRequestEventTarget.name = "HttpRequestEventTarget";
  $desc = $collectedClasses.HttpRequestEventTarget[1];
  HttpRequestEventTarget.prototype = $desc;
  HttpRequestEventTarget.$__fields__ = [];
  function IFrameElement() {
    this.$deferredAction();
  }
  IFrameElement.builtin$cls = "IFrameElement";
  if (!"name" in IFrameElement)
    IFrameElement.name = "IFrameElement";
  $desc = $collectedClasses.IFrameElement[1];
  IFrameElement.prototype = $desc;
  IFrameElement.$__fields__ = [];
  IFrameElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function ImageData() {
    this.$deferredAction();
  }
  ImageData.builtin$cls = "ImageData";
  if (!"name" in ImageData)
    ImageData.name = "ImageData";
  $desc = $collectedClasses.ImageData[1];
  ImageData.prototype = $desc;
  ImageData.$__fields__ = [];
  ImageData.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function InputElement() {
    this.$deferredAction();
  }
  InputElement.builtin$cls = "InputElement";
  if (!"name" in InputElement)
    InputElement.name = "InputElement";
  $desc = $collectedClasses.InputElement[1];
  InputElement.prototype = $desc;
  InputElement.$__fields__ = [];
  InputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  InputElement.prototype.get$size = function(receiver) {
    return receiver.size;
  };
  InputElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  InputElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  InputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function KeyboardEvent() {
    this.$deferredAction();
  }
  KeyboardEvent.builtin$cls = "KeyboardEvent";
  if (!"name" in KeyboardEvent)
    KeyboardEvent.name = "KeyboardEvent";
  $desc = $collectedClasses.KeyboardEvent[1];
  KeyboardEvent.prototype = $desc;
  KeyboardEvent.$__fields__ = [];
  function KeygenElement() {
    this.$deferredAction();
  }
  KeygenElement.builtin$cls = "KeygenElement";
  if (!"name" in KeygenElement)
    KeygenElement.name = "KeygenElement";
  $desc = $collectedClasses.KeygenElement[1];
  KeygenElement.prototype = $desc;
  KeygenElement.$__fields__ = [];
  KeygenElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  KeygenElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function LIElement() {
    this.$deferredAction();
  }
  LIElement.builtin$cls = "LIElement";
  if (!"name" in LIElement)
    LIElement.name = "LIElement";
  $desc = $collectedClasses.LIElement[1];
  LIElement.prototype = $desc;
  LIElement.$__fields__ = [];
  LIElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function LinkElement() {
    this.$deferredAction();
  }
  LinkElement.builtin$cls = "LinkElement";
  if (!"name" in LinkElement)
    LinkElement.name = "LinkElement";
  $desc = $collectedClasses.LinkElement[1];
  LinkElement.prototype = $desc;
  LinkElement.$__fields__ = [];
  LinkElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  LinkElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function MapElement() {
    this.$deferredAction();
  }
  MapElement.builtin$cls = "MapElement";
  if (!"name" in MapElement)
    MapElement.name = "MapElement";
  $desc = $collectedClasses.MapElement[1];
  MapElement.prototype = $desc;
  MapElement.$__fields__ = [];
  MapElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function MediaElement() {
    this.$deferredAction();
  }
  MediaElement.builtin$cls = "MediaElement";
  if (!"name" in MediaElement)
    MediaElement.name = "MediaElement";
  $desc = $collectedClasses.MediaElement[1];
  MediaElement.prototype = $desc;
  MediaElement.$__fields__ = [];
  MediaElement.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function MediaKeyEvent() {
    this.$deferredAction();
  }
  MediaKeyEvent.builtin$cls = "MediaKeyEvent";
  if (!"name" in MediaKeyEvent)
    MediaKeyEvent.name = "MediaKeyEvent";
  $desc = $collectedClasses.MediaKeyEvent[1];
  MediaKeyEvent.prototype = $desc;
  MediaKeyEvent.$__fields__ = [];
  MediaKeyEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function MediaKeyMessageEvent() {
    this.$deferredAction();
  }
  MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
  if (!"name" in MediaKeyMessageEvent)
    MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
  $desc = $collectedClasses.MediaKeyMessageEvent[1];
  MediaKeyMessageEvent.prototype = $desc;
  MediaKeyMessageEvent.$__fields__ = [];
  MediaKeyMessageEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function MenuElement() {
    this.$deferredAction();
  }
  MenuElement.builtin$cls = "MenuElement";
  if (!"name" in MenuElement)
    MenuElement.name = "MenuElement";
  $desc = $collectedClasses.MenuElement[1];
  MenuElement.prototype = $desc;
  MenuElement.$__fields__ = [];
  MenuElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  MenuElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function MenuItemElement() {
    this.$deferredAction();
  }
  MenuItemElement.builtin$cls = "MenuItemElement";
  if (!"name" in MenuItemElement)
    MenuItemElement.name = "MenuItemElement";
  $desc = $collectedClasses.MenuItemElement[1];
  MenuItemElement.prototype = $desc;
  MenuItemElement.$__fields__ = [];
  MenuItemElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  MenuItemElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function MessageEvent() {
    this.$deferredAction();
  }
  MessageEvent.builtin$cls = "MessageEvent";
  if (!"name" in MessageEvent)
    MessageEvent.name = "MessageEvent";
  $desc = $collectedClasses.MessageEvent[1];
  MessageEvent.prototype = $desc;
  MessageEvent.$__fields__ = [];
  function MetaElement() {
    this.$deferredAction();
  }
  MetaElement.builtin$cls = "MetaElement";
  if (!"name" in MetaElement)
    MetaElement.name = "MetaElement";
  $desc = $collectedClasses.MetaElement[1];
  MetaElement.prototype = $desc;
  MetaElement.$__fields__ = [];
  MetaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Metadata() {
    this.$deferredAction();
  }
  Metadata.builtin$cls = "Metadata";
  if (!"name" in Metadata)
    Metadata.name = "Metadata";
  $desc = $collectedClasses.Metadata[1];
  Metadata.prototype = $desc;
  Metadata.$__fields__ = [];
  Metadata.prototype.get$size = function(receiver) {
    return receiver.size;
  };
  function MeterElement() {
    this.$deferredAction();
  }
  MeterElement.builtin$cls = "MeterElement";
  if (!"name" in MeterElement)
    MeterElement.name = "MeterElement";
  $desc = $collectedClasses.MeterElement[1];
  MeterElement.prototype = $desc;
  MeterElement.$__fields__ = [];
  MeterElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function MidiMessageEvent() {
    this.$deferredAction();
  }
  MidiMessageEvent.builtin$cls = "MidiMessageEvent";
  if (!"name" in MidiMessageEvent)
    MidiMessageEvent.name = "MidiMessageEvent";
  $desc = $collectedClasses.MidiMessageEvent[1];
  MidiMessageEvent.prototype = $desc;
  MidiMessageEvent.$__fields__ = [];
  MidiMessageEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function MouseEvent() {
    this.$deferredAction();
  }
  MouseEvent.builtin$cls = "MouseEvent";
  if (!"name" in MouseEvent)
    MouseEvent.name = "MouseEvent";
  $desc = $collectedClasses.MouseEvent[1];
  MouseEvent.prototype = $desc;
  MouseEvent.$__fields__ = [];
  function Navigator() {
    this.$deferredAction();
  }
  Navigator.builtin$cls = "Navigator";
  if (!"name" in Navigator)
    Navigator.name = "Navigator";
  $desc = $collectedClasses.Navigator[1];
  Navigator.prototype = $desc;
  Navigator.$__fields__ = [];
  function NavigatorUserMediaError() {
    this.$deferredAction();
  }
  NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
  if (!"name" in NavigatorUserMediaError)
    NavigatorUserMediaError.name = "NavigatorUserMediaError";
  $desc = $collectedClasses.NavigatorUserMediaError[1];
  NavigatorUserMediaError.prototype = $desc;
  NavigatorUserMediaError.$__fields__ = [];
  NavigatorUserMediaError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  NavigatorUserMediaError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Node() {
    this.$deferredAction();
  }
  Node.builtin$cls = "Node";
  if (!"name" in Node)
    Node.name = "Node";
  $desc = $collectedClasses.Node[1];
  Node.prototype = $desc;
  Node.$__fields__ = [];
  Node.prototype.get$parent = function(receiver) {
    return receiver.parentElement;
  };
  function NodeList() {
    this.$deferredAction();
  }
  NodeList.builtin$cls = "NodeList";
  if (!"name" in NodeList)
    NodeList.name = "NodeList";
  $desc = $collectedClasses.NodeList[1];
  NodeList.prototype = $desc;
  NodeList.$__fields__ = [];
  function Interceptor_ListMixin() {
    this.$deferredAction();
  }
  Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
  if (!"name" in Interceptor_ListMixin)
    Interceptor_ListMixin.name = "Interceptor_ListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin[1];
  Interceptor_ListMixin.prototype = $desc;
  Interceptor_ListMixin.$__fields__ = [];
  function Interceptor_ListMixin_ImmutableListMixin() {
    this.$deferredAction();
  }
  Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin)
    Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin[1];
  Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
  Interceptor_ListMixin_ImmutableListMixin.$__fields__ = [];
  function OListElement() {
    this.$deferredAction();
  }
  OListElement.builtin$cls = "OListElement";
  if (!"name" in OListElement)
    OListElement.name = "OListElement";
  $desc = $collectedClasses.OListElement[1];
  OListElement.prototype = $desc;
  OListElement.$__fields__ = [];
  OListElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  OListElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function ObjectElement() {
    this.$deferredAction();
  }
  ObjectElement.builtin$cls = "ObjectElement";
  if (!"name" in ObjectElement)
    ObjectElement.name = "ObjectElement";
  $desc = $collectedClasses.ObjectElement[1];
  ObjectElement.prototype = $desc;
  ObjectElement.$__fields__ = [];
  ObjectElement.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  ObjectElement.prototype.set$data = function(receiver, v) {
    return receiver.data = v;
  };
  ObjectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ObjectElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ObjectElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function OptionElement() {
    this.$deferredAction();
  }
  OptionElement.builtin$cls = "OptionElement";
  if (!"name" in OptionElement)
    OptionElement.name = "OptionElement";
  $desc = $collectedClasses.OptionElement[1];
  OptionElement.prototype = $desc;
  OptionElement.$__fields__ = [];
  OptionElement.prototype.get$index = function(receiver) {
    return receiver.index;
  };
  OptionElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function OutputElement() {
    this.$deferredAction();
  }
  OutputElement.builtin$cls = "OutputElement";
  if (!"name" in OutputElement)
    OutputElement.name = "OutputElement";
  $desc = $collectedClasses.OutputElement[1];
  OutputElement.prototype = $desc;
  OutputElement.$__fields__ = [];
  OutputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  OutputElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  OutputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function ParamElement() {
    this.$deferredAction();
  }
  ParamElement.builtin$cls = "ParamElement";
  if (!"name" in ParamElement)
    ParamElement.name = "ParamElement";
  $desc = $collectedClasses.ParamElement[1];
  ParamElement.prototype = $desc;
  ParamElement.$__fields__ = [];
  ParamElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ParamElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function PluginPlaceholderElement() {
    this.$deferredAction();
  }
  PluginPlaceholderElement.builtin$cls = "PluginPlaceholderElement";
  if (!"name" in PluginPlaceholderElement)
    PluginPlaceholderElement.name = "PluginPlaceholderElement";
  $desc = $collectedClasses.PluginPlaceholderElement[1];
  PluginPlaceholderElement.prototype = $desc;
  PluginPlaceholderElement.$__fields__ = [];
  PluginPlaceholderElement.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function PositionError() {
    this.$deferredAction();
  }
  PositionError.builtin$cls = "PositionError";
  if (!"name" in PositionError)
    PositionError.name = "PositionError";
  $desc = $collectedClasses.PositionError[1];
  PositionError.prototype = $desc;
  PositionError.$__fields__ = [];
  PositionError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function ProgressElement() {
    this.$deferredAction();
  }
  ProgressElement.builtin$cls = "ProgressElement";
  if (!"name" in ProgressElement)
    ProgressElement.name = "ProgressElement";
  $desc = $collectedClasses.ProgressElement[1];
  ProgressElement.prototype = $desc;
  ProgressElement.$__fields__ = [];
  ProgressElement.prototype.get$position = function(receiver) {
    return receiver.position;
  };
  ProgressElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function ProgressEvent() {
    this.$deferredAction();
  }
  ProgressEvent.builtin$cls = "ProgressEvent";
  if (!"name" in ProgressEvent)
    ProgressEvent.name = "ProgressEvent";
  $desc = $collectedClasses.ProgressEvent[1];
  ProgressEvent.prototype = $desc;
  ProgressEvent.$__fields__ = [];
  function PushEvent() {
    this.$deferredAction();
  }
  PushEvent.builtin$cls = "PushEvent";
  if (!"name" in PushEvent)
    PushEvent.name = "PushEvent";
  $desc = $collectedClasses.PushEvent[1];
  PushEvent.prototype = $desc;
  PushEvent.$__fields__ = [];
  PushEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function ScriptElement() {
    this.$deferredAction();
  }
  ScriptElement.builtin$cls = "ScriptElement";
  if (!"name" in ScriptElement)
    ScriptElement.name = "ScriptElement";
  $desc = $collectedClasses.ScriptElement[1];
  ScriptElement.prototype = $desc;
  ScriptElement.$__fields__ = [];
  ScriptElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ScriptElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SelectElement() {
    this.$deferredAction();
  }
  SelectElement.builtin$cls = "SelectElement";
  if (!"name" in SelectElement)
    SelectElement.name = "SelectElement";
  $desc = $collectedClasses.SelectElement[1];
  SelectElement.prototype = $desc;
  SelectElement.$__fields__ = [];
  SelectElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  SelectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  SelectElement.prototype.get$size = function(receiver) {
    return receiver.size;
  };
  SelectElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  SelectElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function SourceElement() {
    this.$deferredAction();
  }
  SourceElement.builtin$cls = "SourceElement";
  if (!"name" in SourceElement)
    SourceElement.name = "SourceElement";
  $desc = $collectedClasses.SourceElement[1];
  SourceElement.prototype = $desc;
  SourceElement.$__fields__ = [];
  SourceElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  SourceElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SpeechRecognitionError() {
    this.$deferredAction();
  }
  SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
  if (!"name" in SpeechRecognitionError)
    SpeechRecognitionError.name = "SpeechRecognitionError";
  $desc = $collectedClasses.SpeechRecognitionError[1];
  SpeechRecognitionError.prototype = $desc;
  SpeechRecognitionError.$__fields__ = [];
  SpeechRecognitionError.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  SpeechRecognitionError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function SpeechSynthesisEvent() {
    this.$deferredAction();
  }
  SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
  if (!"name" in SpeechSynthesisEvent)
    SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
  $desc = $collectedClasses.SpeechSynthesisEvent[1];
  SpeechSynthesisEvent.prototype = $desc;
  SpeechSynthesisEvent.$__fields__ = [];
  SpeechSynthesisEvent.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function StyleElement() {
    this.$deferredAction();
  }
  StyleElement.builtin$cls = "StyleElement";
  if (!"name" in StyleElement)
    StyleElement.name = "StyleElement";
  $desc = $collectedClasses.StyleElement[1];
  StyleElement.prototype = $desc;
  StyleElement.$__fields__ = [];
  StyleElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  StyleElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function TextAreaElement() {
    this.$deferredAction();
  }
  TextAreaElement.builtin$cls = "TextAreaElement";
  if (!"name" in TextAreaElement)
    TextAreaElement.name = "TextAreaElement";
  $desc = $collectedClasses.TextAreaElement[1];
  TextAreaElement.prototype = $desc;
  TextAreaElement.$__fields__ = [];
  TextAreaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  TextAreaElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  TextAreaElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function TextEvent() {
    this.$deferredAction();
  }
  TextEvent.builtin$cls = "TextEvent";
  if (!"name" in TextEvent)
    TextEvent.name = "TextEvent";
  $desc = $collectedClasses.TextEvent[1];
  TextEvent.prototype = $desc;
  TextEvent.$__fields__ = [];
  TextEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function UIEvent() {
    this.$deferredAction();
  }
  UIEvent.builtin$cls = "UIEvent";
  if (!"name" in UIEvent)
    UIEvent.name = "UIEvent";
  $desc = $collectedClasses.UIEvent[1];
  UIEvent.prototype = $desc;
  UIEvent.$__fields__ = [];
  function Window() {
    this.$deferredAction();
  }
  Window.builtin$cls = "Window";
  if (!"name" in Window)
    Window.name = "Window";
  $desc = $collectedClasses.Window[1];
  Window.prototype = $desc;
  Window.$__fields__ = [];
  Window.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  Window.prototype.get$status = function(receiver) {
    return receiver.status;
  };
  function Window__requestFileSystem_closure(_html$_captured_completer_0) {
    this._html$_captured_completer_0 = _html$_captured_completer_0;
    this.$deferredAction();
  }
  Window__requestFileSystem_closure.builtin$cls = "Window__requestFileSystem_closure";
  if (!"name" in Window__requestFileSystem_closure)
    Window__requestFileSystem_closure.name = "Window__requestFileSystem_closure";
  $desc = $collectedClasses.Window__requestFileSystem_closure[1];
  Window__requestFileSystem_closure.prototype = $desc;
  Window__requestFileSystem_closure.$__fields__ = ["_html$_captured_completer_0"];
  function Window__requestFileSystem_closure0(_captured_completer_1) {
    this._captured_completer_1 = _captured_completer_1;
    this.$deferredAction();
  }
  Window__requestFileSystem_closure0.builtin$cls = "Window__requestFileSystem_closure0";
  if (!"name" in Window__requestFileSystem_closure0)
    Window__requestFileSystem_closure0.name = "Window__requestFileSystem_closure0";
  $desc = $collectedClasses.Window__requestFileSystem_closure0[1];
  Window__requestFileSystem_closure0.prototype = $desc;
  Window__requestFileSystem_closure0.$__fields__ = ["_captured_completer_1"];
  function Window_resolveLocalFileSystemUrl_closure(_html$_captured_completer_0) {
    this._html$_captured_completer_0 = _html$_captured_completer_0;
    this.$deferredAction();
  }
  Window_resolveLocalFileSystemUrl_closure.builtin$cls = "Window_resolveLocalFileSystemUrl_closure";
  if (!"name" in Window_resolveLocalFileSystemUrl_closure)
    Window_resolveLocalFileSystemUrl_closure.name = "Window_resolveLocalFileSystemUrl_closure";
  $desc = $collectedClasses.Window_resolveLocalFileSystemUrl_closure[1];
  Window_resolveLocalFileSystemUrl_closure.prototype = $desc;
  Window_resolveLocalFileSystemUrl_closure.$__fields__ = ["_html$_captured_completer_0"];
  function Window_resolveLocalFileSystemUrl_closure0(_captured_completer_1) {
    this._captured_completer_1 = _captured_completer_1;
    this.$deferredAction();
  }
  Window_resolveLocalFileSystemUrl_closure0.builtin$cls = "Window_resolveLocalFileSystemUrl_closure0";
  if (!"name" in Window_resolveLocalFileSystemUrl_closure0)
    Window_resolveLocalFileSystemUrl_closure0.name = "Window_resolveLocalFileSystemUrl_closure0";
  $desc = $collectedClasses.Window_resolveLocalFileSystemUrl_closure0[1];
  Window_resolveLocalFileSystemUrl_closure0.prototype = $desc;
  Window_resolveLocalFileSystemUrl_closure0.$__fields__ = ["_captured_completer_1"];
  function _Attr() {
    this.$deferredAction();
  }
  _Attr.builtin$cls = "_Attr";
  if (!"name" in _Attr)
    _Attr.name = "_Attr";
  $desc = $collectedClasses._Attr[1];
  _Attr.prototype = $desc;
  _Attr.$__fields__ = [];
  _Attr.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  _Attr.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function _ClientRect() {
    this.$deferredAction();
  }
  _ClientRect.builtin$cls = "_ClientRect";
  if (!"name" in _ClientRect)
    _ClientRect.name = "_ClientRect";
  $desc = $collectedClasses._ClientRect[1];
  _ClientRect.prototype = $desc;
  _ClientRect.$__fields__ = [];
  _ClientRect.prototype.get$bottom = function(receiver) {
    return receiver.bottom;
  };
  _ClientRect.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  _ClientRect.prototype.get$left = function(receiver) {
    return receiver.left;
  };
  _ClientRect.prototype.get$right = function(receiver) {
    return receiver.right;
  };
  _ClientRect.prototype.get$top = function(receiver) {
    return receiver.top;
  };
  _ClientRect.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function _DocumentType() {
    this.$deferredAction();
  }
  _DocumentType.builtin$cls = "_DocumentType";
  if (!"name" in _DocumentType)
    _DocumentType.name = "_DocumentType";
  $desc = $collectedClasses._DocumentType[1];
  _DocumentType.prototype = $desc;
  _DocumentType.$__fields__ = [];
  function _DomRect() {
    this.$deferredAction();
  }
  _DomRect.builtin$cls = "_DomRect";
  if (!"name" in _DomRect)
    _DomRect.name = "_DomRect";
  $desc = $collectedClasses._DomRect[1];
  _DomRect.prototype = $desc;
  _DomRect.$__fields__ = [];
  function _HTMLFrameSetElement() {
    this.$deferredAction();
  }
  _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
  if (!"name" in _HTMLFrameSetElement)
    _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
  $desc = $collectedClasses._HTMLFrameSetElement[1];
  _HTMLFrameSetElement.prototype = $desc;
  _HTMLFrameSetElement.$__fields__ = [];
  function _NamedNodeMap() {
    this.$deferredAction();
  }
  _NamedNodeMap.builtin$cls = "_NamedNodeMap";
  if (!"name" in _NamedNodeMap)
    _NamedNodeMap.name = "_NamedNodeMap";
  $desc = $collectedClasses._NamedNodeMap[1];
  _NamedNodeMap.prototype = $desc;
  _NamedNodeMap.$__fields__ = [];
  function Interceptor_ListMixin0() {
    this.$deferredAction();
  }
  Interceptor_ListMixin0.builtin$cls = "Interceptor_ListMixin0";
  if (!"name" in Interceptor_ListMixin0)
    Interceptor_ListMixin0.name = "Interceptor_ListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin0[1];
  Interceptor_ListMixin0.prototype = $desc;
  Interceptor_ListMixin0.$__fields__ = [];
  function Interceptor_ListMixin_ImmutableListMixin0() {
    this.$deferredAction();
  }
  Interceptor_ListMixin_ImmutableListMixin0.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin0";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin0)
    Interceptor_ListMixin_ImmutableListMixin0.name = "Interceptor_ListMixin_ImmutableListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin0[1];
  Interceptor_ListMixin_ImmutableListMixin0.prototype = $desc;
  Interceptor_ListMixin_ImmutableListMixin0.$__fields__ = [];
  function _ElementCssClassSet(_html$_element) {
    this._html$_element = _html$_element;
    this.$deferredAction();
  }
  _ElementCssClassSet.builtin$cls = "_ElementCssClassSet";
  if (!"name" in _ElementCssClassSet)
    _ElementCssClassSet.name = "_ElementCssClassSet";
  $desc = $collectedClasses._ElementCssClassSet[1];
  _ElementCssClassSet.prototype = $desc;
  _ElementCssClassSet.$__fields__ = ["_html$_element"];
  function _EventStream(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
    this.$deferredAction();
  }
  _EventStream.builtin$cls = "_EventStream";
  if (!"name" in _EventStream)
    _EventStream.name = "_EventStream";
  $desc = $collectedClasses._EventStream[1];
  _EventStream.prototype = $desc;
  _EventStream.$__fields__ = ["_target", "_eventType", "_useCapture"];
  function _ElementEventStreamImpl(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
    this.$deferredAction();
  }
  _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
  if (!"name" in _ElementEventStreamImpl)
    _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
  $desc = $collectedClasses._ElementEventStreamImpl[1];
  _ElementEventStreamImpl.prototype = $desc;
  _ElementEventStreamImpl.$__fields__ = ["_target", "_eventType", "_useCapture"];
  function _EventStreamSubscription(_pauseCount, _target, _eventType, _html$_onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._target = _target;
    this._eventType = _eventType;
    this._html$_onData = _html$_onData;
    this._useCapture = _useCapture;
    this.$deferredAction();
  }
  _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
  if (!"name" in _EventStreamSubscription)
    _EventStreamSubscription.name = "_EventStreamSubscription";
  $desc = $collectedClasses._EventStreamSubscription[1];
  _EventStreamSubscription.prototype = $desc;
  _EventStreamSubscription.$__fields__ = ["_pauseCount", "_target", "_eventType", "_html$_onData", "_useCapture"];
  function ImmutableListMixin() {
    this.$deferredAction();
  }
  ImmutableListMixin.builtin$cls = "ImmutableListMixin";
  if (!"name" in ImmutableListMixin)
    ImmutableListMixin.name = "ImmutableListMixin";
  $desc = $collectedClasses.ImmutableListMixin[1];
  ImmutableListMixin.prototype = $desc;
  ImmutableListMixin.$__fields__ = [];
  function FixedSizeListIterator(_array, _length, _position, _current) {
    this._array = _array;
    this._length = _length;
    this._position = _position;
    this._current = _current;
    this.$deferredAction();
  }
  FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
  if (!"name" in FixedSizeListIterator)
    FixedSizeListIterator.name = "FixedSizeListIterator";
  $desc = $collectedClasses.FixedSizeListIterator[1];
  FixedSizeListIterator.prototype = $desc;
  FixedSizeListIterator.$__fields__ = ["_array", "_length", "_position", "_current"];
  function _DOMWindowCrossFrame(_window) {
    this._window = _window;
    this.$deferredAction();
  }
  _DOMWindowCrossFrame.builtin$cls = "_DOMWindowCrossFrame";
  if (!"name" in _DOMWindowCrossFrame)
    _DOMWindowCrossFrame.name = "_DOMWindowCrossFrame";
  $desc = $collectedClasses._DOMWindowCrossFrame[1];
  _DOMWindowCrossFrame.prototype = $desc;
  _DOMWindowCrossFrame.$__fields__ = ["_window"];
  function KeyRange() {
    this.$deferredAction();
  }
  KeyRange.builtin$cls = "KeyRange";
  if (!"name" in KeyRange)
    KeyRange.name = "KeyRange";
  $desc = $collectedClasses.KeyRange[1];
  KeyRange.prototype = $desc;
  KeyRange.$__fields__ = [];
  function AElement() {
    this.$deferredAction();
  }
  AElement.builtin$cls = "AElement";
  if (!"name" in AElement)
    AElement.name = "AElement";
  $desc = $collectedClasses.AElement[1];
  AElement.prototype = $desc;
  AElement.$__fields__ = [];
  function AltGlyphElement() {
    this.$deferredAction();
  }
  AltGlyphElement.builtin$cls = "AltGlyphElement";
  if (!"name" in AltGlyphElement)
    AltGlyphElement.name = "AltGlyphElement";
  $desc = $collectedClasses.AltGlyphElement[1];
  AltGlyphElement.prototype = $desc;
  AltGlyphElement.$__fields__ = [];
  function AnimationElement() {
    this.$deferredAction();
  }
  AnimationElement.builtin$cls = "AnimationElement";
  if (!"name" in AnimationElement)
    AnimationElement.name = "AnimationElement";
  $desc = $collectedClasses.AnimationElement[1];
  AnimationElement.prototype = $desc;
  AnimationElement.$__fields__ = [];
  function FEBlendElement() {
    this.$deferredAction();
  }
  FEBlendElement.builtin$cls = "FEBlendElement";
  if (!"name" in FEBlendElement)
    FEBlendElement.name = "FEBlendElement";
  $desc = $collectedClasses.FEBlendElement[1];
  FEBlendElement.prototype = $desc;
  FEBlendElement.$__fields__ = [];
  FEBlendElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEBlendElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEBlendElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEColorMatrixElement() {
    this.$deferredAction();
  }
  FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
  if (!"name" in FEColorMatrixElement)
    FEColorMatrixElement.name = "FEColorMatrixElement";
  $desc = $collectedClasses.FEColorMatrixElement[1];
  FEColorMatrixElement.prototype = $desc;
  FEColorMatrixElement.$__fields__ = [];
  FEColorMatrixElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  FEColorMatrixElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEColorMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEColorMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEComponentTransferElement() {
    this.$deferredAction();
  }
  FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
  if (!"name" in FEComponentTransferElement)
    FEComponentTransferElement.name = "FEComponentTransferElement";
  $desc = $collectedClasses.FEComponentTransferElement[1];
  FEComponentTransferElement.prototype = $desc;
  FEComponentTransferElement.$__fields__ = [];
  FEComponentTransferElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEComponentTransferElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEComponentTransferElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FECompositeElement() {
    this.$deferredAction();
  }
  FECompositeElement.builtin$cls = "FECompositeElement";
  if (!"name" in FECompositeElement)
    FECompositeElement.name = "FECompositeElement";
  $desc = $collectedClasses.FECompositeElement[1];
  FECompositeElement.prototype = $desc;
  FECompositeElement.$__fields__ = [];
  FECompositeElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FECompositeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FECompositeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEConvolveMatrixElement() {
    this.$deferredAction();
  }
  FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
  if (!"name" in FEConvolveMatrixElement)
    FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
  $desc = $collectedClasses.FEConvolveMatrixElement[1];
  FEConvolveMatrixElement.prototype = $desc;
  FEConvolveMatrixElement.$__fields__ = [];
  FEConvolveMatrixElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEConvolveMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEConvolveMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDiffuseLightingElement() {
    this.$deferredAction();
  }
  FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
  if (!"name" in FEDiffuseLightingElement)
    FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
  $desc = $collectedClasses.FEDiffuseLightingElement[1];
  FEDiffuseLightingElement.prototype = $desc;
  FEDiffuseLightingElement.$__fields__ = [];
  FEDiffuseLightingElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEDiffuseLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDiffuseLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDisplacementMapElement() {
    this.$deferredAction();
  }
  FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
  if (!"name" in FEDisplacementMapElement)
    FEDisplacementMapElement.name = "FEDisplacementMapElement";
  $desc = $collectedClasses.FEDisplacementMapElement[1];
  FEDisplacementMapElement.prototype = $desc;
  FEDisplacementMapElement.$__fields__ = [];
  FEDisplacementMapElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEDisplacementMapElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDisplacementMapElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEFloodElement() {
    this.$deferredAction();
  }
  FEFloodElement.builtin$cls = "FEFloodElement";
  if (!"name" in FEFloodElement)
    FEFloodElement.name = "FEFloodElement";
  $desc = $collectedClasses.FEFloodElement[1];
  FEFloodElement.prototype = $desc;
  FEFloodElement.$__fields__ = [];
  FEFloodElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEFloodElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEFloodElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEGaussianBlurElement() {
    this.$deferredAction();
  }
  FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
  if (!"name" in FEGaussianBlurElement)
    FEGaussianBlurElement.name = "FEGaussianBlurElement";
  $desc = $collectedClasses.FEGaussianBlurElement[1];
  FEGaussianBlurElement.prototype = $desc;
  FEGaussianBlurElement.$__fields__ = [];
  FEGaussianBlurElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEGaussianBlurElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEGaussianBlurElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEImageElement() {
    this.$deferredAction();
  }
  FEImageElement.builtin$cls = "FEImageElement";
  if (!"name" in FEImageElement)
    FEImageElement.name = "FEImageElement";
  $desc = $collectedClasses.FEImageElement[1];
  FEImageElement.prototype = $desc;
  FEImageElement.$__fields__ = [];
  FEImageElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEImageElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEImageElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeElement() {
    this.$deferredAction();
  }
  FEMergeElement.builtin$cls = "FEMergeElement";
  if (!"name" in FEMergeElement)
    FEMergeElement.name = "FEMergeElement";
  $desc = $collectedClasses.FEMergeElement[1];
  FEMergeElement.prototype = $desc;
  FEMergeElement.$__fields__ = [];
  FEMergeElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEMergeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMergeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMorphologyElement() {
    this.$deferredAction();
  }
  FEMorphologyElement.builtin$cls = "FEMorphologyElement";
  if (!"name" in FEMorphologyElement)
    FEMorphologyElement.name = "FEMorphologyElement";
  $desc = $collectedClasses.FEMorphologyElement[1];
  FEMorphologyElement.prototype = $desc;
  FEMorphologyElement.$__fields__ = [];
  FEMorphologyElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEMorphologyElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMorphologyElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEOffsetElement() {
    this.$deferredAction();
  }
  FEOffsetElement.builtin$cls = "FEOffsetElement";
  if (!"name" in FEOffsetElement)
    FEOffsetElement.name = "FEOffsetElement";
  $desc = $collectedClasses.FEOffsetElement[1];
  FEOffsetElement.prototype = $desc;
  FEOffsetElement.$__fields__ = [];
  FEOffsetElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FEOffsetElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEOffsetElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEPointLightElement() {
    this.$deferredAction();
  }
  FEPointLightElement.builtin$cls = "FEPointLightElement";
  if (!"name" in FEPointLightElement)
    FEPointLightElement.name = "FEPointLightElement";
  $desc = $collectedClasses.FEPointLightElement[1];
  FEPointLightElement.prototype = $desc;
  FEPointLightElement.$__fields__ = [];
  FEPointLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEPointLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpecularLightingElement() {
    this.$deferredAction();
  }
  FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
  if (!"name" in FESpecularLightingElement)
    FESpecularLightingElement.name = "FESpecularLightingElement";
  $desc = $collectedClasses.FESpecularLightingElement[1];
  FESpecularLightingElement.prototype = $desc;
  FESpecularLightingElement.$__fields__ = [];
  FESpecularLightingElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FESpecularLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpecularLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpotLightElement() {
    this.$deferredAction();
  }
  FESpotLightElement.builtin$cls = "FESpotLightElement";
  if (!"name" in FESpotLightElement)
    FESpotLightElement.name = "FESpotLightElement";
  $desc = $collectedClasses.FESpotLightElement[1];
  FESpotLightElement.prototype = $desc;
  FESpotLightElement.$__fields__ = [];
  FESpotLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpotLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETileElement() {
    this.$deferredAction();
  }
  FETileElement.builtin$cls = "FETileElement";
  if (!"name" in FETileElement)
    FETileElement.name = "FETileElement";
  $desc = $collectedClasses.FETileElement[1];
  FETileElement.prototype = $desc;
  FETileElement.$__fields__ = [];
  FETileElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FETileElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETileElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETurbulenceElement() {
    this.$deferredAction();
  }
  FETurbulenceElement.builtin$cls = "FETurbulenceElement";
  if (!"name" in FETurbulenceElement)
    FETurbulenceElement.name = "FETurbulenceElement";
  $desc = $collectedClasses.FETurbulenceElement[1];
  FETurbulenceElement.prototype = $desc;
  FETurbulenceElement.$__fields__ = [];
  FETurbulenceElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  FETurbulenceElement.prototype.get$result = function(receiver) {
    return receiver.result;
  };
  FETurbulenceElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETurbulenceElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FilterElement() {
    this.$deferredAction();
  }
  FilterElement.builtin$cls = "FilterElement";
  if (!"name" in FilterElement)
    FilterElement.name = "FilterElement";
  $desc = $collectedClasses.FilterElement[1];
  FilterElement.prototype = $desc;
  FilterElement.$__fields__ = [];
  FilterElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FilterElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ForeignObjectElement() {
    this.$deferredAction();
  }
  ForeignObjectElement.builtin$cls = "ForeignObjectElement";
  if (!"name" in ForeignObjectElement)
    ForeignObjectElement.name = "ForeignObjectElement";
  $desc = $collectedClasses.ForeignObjectElement[1];
  ForeignObjectElement.prototype = $desc;
  ForeignObjectElement.$__fields__ = [];
  ForeignObjectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ForeignObjectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function GeometryElement() {
    this.$deferredAction();
  }
  GeometryElement.builtin$cls = "GeometryElement";
  if (!"name" in GeometryElement)
    GeometryElement.name = "GeometryElement";
  $desc = $collectedClasses.GeometryElement[1];
  GeometryElement.prototype = $desc;
  GeometryElement.$__fields__ = [];
  function GraphicsElement() {
    this.$deferredAction();
  }
  GraphicsElement.builtin$cls = "GraphicsElement";
  if (!"name" in GraphicsElement)
    GraphicsElement.name = "GraphicsElement";
  $desc = $collectedClasses.GraphicsElement[1];
  GraphicsElement.prototype = $desc;
  GraphicsElement.$__fields__ = [];
  function ImageElement0() {
    this.$deferredAction();
  }
  ImageElement0.builtin$cls = "ImageElement0";
  if (!"name" in ImageElement0)
    ImageElement0.name = "ImageElement0";
  $desc = $collectedClasses.ImageElement0[1];
  ImageElement0.prototype = $desc;
  ImageElement0.$__fields__ = [];
  ImageElement0.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ImageElement0.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function MarkerElement() {
    this.$deferredAction();
  }
  MarkerElement.builtin$cls = "MarkerElement";
  if (!"name" in MarkerElement)
    MarkerElement.name = "MarkerElement";
  $desc = $collectedClasses.MarkerElement[1];
  MarkerElement.prototype = $desc;
  MarkerElement.$__fields__ = [];
  function MaskElement() {
    this.$deferredAction();
  }
  MaskElement.builtin$cls = "MaskElement";
  if (!"name" in MaskElement)
    MaskElement.name = "MaskElement";
  $desc = $collectedClasses.MaskElement[1];
  MaskElement.prototype = $desc;
  MaskElement.$__fields__ = [];
  MaskElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  MaskElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PatternElement() {
    this.$deferredAction();
  }
  PatternElement.builtin$cls = "PatternElement";
  if (!"name" in PatternElement)
    PatternElement.name = "PatternElement";
  $desc = $collectedClasses.PatternElement[1];
  PatternElement.prototype = $desc;
  PatternElement.$__fields__ = [];
  PatternElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PatternElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function RectElement() {
    this.$deferredAction();
  }
  RectElement.builtin$cls = "RectElement";
  if (!"name" in RectElement)
    RectElement.name = "RectElement";
  $desc = $collectedClasses.RectElement[1];
  RectElement.prototype = $desc;
  RectElement.$__fields__ = [];
  RectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  RectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ScriptElement0() {
    this.$deferredAction();
  }
  ScriptElement0.builtin$cls = "ScriptElement0";
  if (!"name" in ScriptElement0)
    ScriptElement0.name = "ScriptElement0";
  $desc = $collectedClasses.ScriptElement0[1];
  ScriptElement0.prototype = $desc;
  ScriptElement0.$__fields__ = [];
  ScriptElement0.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ScriptElement0.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function StyleElement0() {
    this.$deferredAction();
  }
  StyleElement0.builtin$cls = "StyleElement0";
  if (!"name" in StyleElement0)
    StyleElement0.name = "StyleElement0";
  $desc = $collectedClasses.StyleElement0[1];
  StyleElement0.prototype = $desc;
  StyleElement0.$__fields__ = [];
  StyleElement0.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  StyleElement0.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function _AttributeClassSet(_element) {
    this._element = _element;
    this.$deferredAction();
  }
  _AttributeClassSet.builtin$cls = "_AttributeClassSet";
  if (!"name" in _AttributeClassSet)
    _AttributeClassSet.name = "_AttributeClassSet";
  $desc = $collectedClasses._AttributeClassSet[1];
  _AttributeClassSet.prototype = $desc;
  _AttributeClassSet.$__fields__ = ["_element"];
  function SvgElement() {
    this.$deferredAction();
  }
  SvgElement.builtin$cls = "SvgElement";
  if (!"name" in SvgElement)
    SvgElement.name = "SvgElement";
  $desc = $collectedClasses.SvgElement[1];
  SvgElement.prototype = $desc;
  SvgElement.$__fields__ = [];
  function SvgSvgElement() {
    this.$deferredAction();
  }
  SvgSvgElement.builtin$cls = "SvgSvgElement";
  if (!"name" in SvgSvgElement)
    SvgSvgElement.name = "SvgSvgElement";
  $desc = $collectedClasses.SvgSvgElement[1];
  SvgSvgElement.prototype = $desc;
  SvgSvgElement.$__fields__ = [];
  SvgSvgElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  SvgSvgElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function SymbolElement() {
    this.$deferredAction();
  }
  SymbolElement.builtin$cls = "SymbolElement";
  if (!"name" in SymbolElement)
    SymbolElement.name = "SymbolElement";
  $desc = $collectedClasses.SymbolElement[1];
  SymbolElement.prototype = $desc;
  SymbolElement.$__fields__ = [];
  function TextContentElement() {
    this.$deferredAction();
  }
  TextContentElement.builtin$cls = "TextContentElement";
  if (!"name" in TextContentElement)
    TextContentElement.name = "TextContentElement";
  $desc = $collectedClasses.TextContentElement[1];
  TextContentElement.prototype = $desc;
  TextContentElement.$__fields__ = [];
  function TextPathElement() {
    this.$deferredAction();
  }
  TextPathElement.builtin$cls = "TextPathElement";
  if (!"name" in TextPathElement)
    TextPathElement.name = "TextPathElement";
  $desc = $collectedClasses.TextPathElement[1];
  TextPathElement.prototype = $desc;
  TextPathElement.$__fields__ = [];
  function TextPositioningElement() {
    this.$deferredAction();
  }
  TextPositioningElement.builtin$cls = "TextPositioningElement";
  if (!"name" in TextPositioningElement)
    TextPositioningElement.name = "TextPositioningElement";
  $desc = $collectedClasses.TextPositioningElement[1];
  TextPositioningElement.prototype = $desc;
  TextPositioningElement.$__fields__ = [];
  TextPositioningElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  TextPositioningElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function UseElement() {
    this.$deferredAction();
  }
  UseElement.builtin$cls = "UseElement";
  if (!"name" in UseElement)
    UseElement.name = "UseElement";
  $desc = $collectedClasses.UseElement[1];
  UseElement.prototype = $desc;
  UseElement.$__fields__ = [];
  UseElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  UseElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ViewElement() {
    this.$deferredAction();
  }
  ViewElement.builtin$cls = "ViewElement";
  if (!"name" in ViewElement)
    ViewElement.name = "ViewElement";
  $desc = $collectedClasses.ViewElement[1];
  ViewElement.prototype = $desc;
  ViewElement.$__fields__ = [];
  function _GradientElement() {
    this.$deferredAction();
  }
  _GradientElement.builtin$cls = "_GradientElement";
  if (!"name" in _GradientElement)
    _GradientElement.name = "_GradientElement";
  $desc = $collectedClasses._GradientElement[1];
  _GradientElement.prototype = $desc;
  _GradientElement.$__fields__ = [];
  function _SVGCursorElement() {
    this.$deferredAction();
  }
  _SVGCursorElement.builtin$cls = "_SVGCursorElement";
  if (!"name" in _SVGCursorElement)
    _SVGCursorElement.name = "_SVGCursorElement";
  $desc = $collectedClasses._SVGCursorElement[1];
  _SVGCursorElement.prototype = $desc;
  _SVGCursorElement.$__fields__ = [];
  function _SVGFEDropShadowElement() {
    this.$deferredAction();
  }
  _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
  if (!"name" in _SVGFEDropShadowElement)
    _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
  $desc = $collectedClasses._SVGFEDropShadowElement[1];
  _SVGFEDropShadowElement.prototype = $desc;
  _SVGFEDropShadowElement.$__fields__ = [];
  function _SVGGlyphRefElement() {
    this.$deferredAction();
  }
  _SVGGlyphRefElement.builtin$cls = "_SVGGlyphRefElement";
  if (!"name" in _SVGGlyphRefElement)
    _SVGGlyphRefElement.name = "_SVGGlyphRefElement";
  $desc = $collectedClasses._SVGGlyphRefElement[1];
  _SVGGlyphRefElement.prototype = $desc;
  _SVGGlyphRefElement.$__fields__ = [];
  function _SVGMPathElement() {
    this.$deferredAction();
  }
  _SVGMPathElement.builtin$cls = "_SVGMPathElement";
  if (!"name" in _SVGMPathElement)
    _SVGMPathElement.name = "_SVGMPathElement";
  $desc = $collectedClasses._SVGMPathElement[1];
  _SVGMPathElement.prototype = $desc;
  _SVGMPathElement.$__fields__ = [];
  function SqlError() {
    this.$deferredAction();
  }
  SqlError.builtin$cls = "SqlError";
  if (!"name" in SqlError)
    SqlError.name = "SqlError";
  $desc = $collectedClasses.SqlError[1];
  SqlError.prototype = $desc;
  SqlError.$__fields__ = [];
  SqlError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function Capability() {
    this.$deferredAction();
  }
  Capability.builtin$cls = "Capability";
  if (!"name" in Capability)
    Capability.name = "Capability";
  $desc = $collectedClasses.Capability[1];
  Capability.prototype = $desc;
  Capability.$__fields__ = [];
  function JsObject(_jsObject) {
    this._jsObject = _jsObject;
    this.$deferredAction();
  }
  JsObject.builtin$cls = "JsObject";
  if (!"name" in JsObject)
    JsObject.name = "JsObject";
  $desc = $collectedClasses.JsObject[1];
  JsObject.prototype = $desc;
  JsObject.$__fields__ = ["_jsObject"];
  function JsObject__convertDataTree__convert(_captured__convertedObjects_0) {
    this._captured__convertedObjects_0 = _captured__convertedObjects_0;
    this.$deferredAction();
  }
  JsObject__convertDataTree__convert.builtin$cls = "JsObject__convertDataTree__convert";
  if (!"name" in JsObject__convertDataTree__convert)
    JsObject__convertDataTree__convert.name = "JsObject__convertDataTree__convert";
  $desc = $collectedClasses.JsObject__convertDataTree__convert[1];
  JsObject__convertDataTree__convert.prototype = $desc;
  JsObject__convertDataTree__convert.$__fields__ = ["_captured__convertedObjects_0"];
  function JsFunction(_jsObject) {
    this._jsObject = _jsObject;
    this.$deferredAction();
  }
  JsFunction.builtin$cls = "JsFunction";
  if (!"name" in JsFunction)
    JsFunction.name = "JsFunction";
  $desc = $collectedClasses.JsFunction[1];
  JsFunction.prototype = $desc;
  JsFunction.$__fields__ = ["_jsObject"];
  function JsArray(_jsObject) {
    this._jsObject = _jsObject;
    this.$deferredAction();
  }
  JsArray.builtin$cls = "JsArray";
  if (!"name" in JsArray)
    JsArray.name = "JsArray";
  $desc = $collectedClasses.JsArray[1];
  JsArray.prototype = $desc;
  JsArray.$__fields__ = ["_jsObject"];
  function JsObject_ListMixin() {
    this.$deferredAction();
  }
  JsObject_ListMixin.builtin$cls = "JsObject_ListMixin";
  if (!"name" in JsObject_ListMixin)
    JsObject_ListMixin.name = "JsObject_ListMixin";
  $desc = $collectedClasses.JsObject_ListMixin[1];
  JsObject_ListMixin.prototype = $desc;
  JsObject_ListMixin.$__fields__ = [];
  function _convertToJS_closure() {
    this.$deferredAction();
  }
  _convertToJS_closure.builtin$cls = "_convertToJS_closure";
  if (!"name" in _convertToJS_closure)
    _convertToJS_closure.name = "_convertToJS_closure";
  $desc = $collectedClasses._convertToJS_closure[1];
  _convertToJS_closure.prototype = $desc;
  _convertToJS_closure.$__fields__ = [];
  function _convertToJS_closure0(_captured_ctor_0) {
    this._captured_ctor_0 = _captured_ctor_0;
    this.$deferredAction();
  }
  _convertToJS_closure0.builtin$cls = "_convertToJS_closure0";
  if (!"name" in _convertToJS_closure0)
    _convertToJS_closure0.name = "_convertToJS_closure0";
  $desc = $collectedClasses._convertToJS_closure0[1];
  _convertToJS_closure0.prototype = $desc;
  _convertToJS_closure0.$__fields__ = ["_captured_ctor_0"];
  function _wrapToDart_closure() {
    this.$deferredAction();
  }
  _wrapToDart_closure.builtin$cls = "_wrapToDart_closure";
  if (!"name" in _wrapToDart_closure)
    _wrapToDart_closure.name = "_wrapToDart_closure";
  $desc = $collectedClasses._wrapToDart_closure[1];
  _wrapToDart_closure.prototype = $desc;
  _wrapToDart_closure.$__fields__ = [];
  function _wrapToDart_closure0() {
    this.$deferredAction();
  }
  _wrapToDart_closure0.builtin$cls = "_wrapToDart_closure0";
  if (!"name" in _wrapToDart_closure0)
    _wrapToDart_closure0.name = "_wrapToDart_closure0";
  $desc = $collectedClasses._wrapToDart_closure0[1];
  _wrapToDart_closure0.prototype = $desc;
  _wrapToDart_closure0.$__fields__ = [];
  function _wrapToDart_closure1() {
    this.$deferredAction();
  }
  _wrapToDart_closure1.builtin$cls = "_wrapToDart_closure1";
  if (!"name" in _wrapToDart_closure1)
    _wrapToDart_closure1.name = "_wrapToDart_closure1";
  $desc = $collectedClasses._wrapToDart_closure1[1];
  _wrapToDart_closure1.prototype = $desc;
  _wrapToDart_closure1.$__fields__ = [];
  function _JSRandom() {
    this.$deferredAction();
  }
  _JSRandom.builtin$cls = "_JSRandom";
  if (!"name" in _JSRandom)
    _JSRandom.name = "_JSRandom";
  $desc = $collectedClasses._JSRandom[1];
  _JSRandom.prototype = $desc;
  _JSRandom.$__fields__ = [];
  function Point0(x, y) {
    this.x = x;
    this.y = y;
    this.$deferredAction();
  }
  Point0.builtin$cls = "Point0";
  if (!"name" in Point0)
    Point0.name = "Point0";
  $desc = $collectedClasses.Point0[1];
  Point0.prototype = $desc;
  Point0.$__fields__ = ["x", "y"];
  Point0.prototype.get$x = function(receiver) {
    return this.x;
  };
  Point0.prototype.get$y = function(receiver) {
    return this.y;
  };
  function _RectangleBase() {
    this.$deferredAction();
  }
  _RectangleBase.builtin$cls = "_RectangleBase";
  if (!"name" in _RectangleBase)
    _RectangleBase.name = "_RectangleBase";
  $desc = $collectedClasses._RectangleBase[1];
  _RectangleBase.prototype = $desc;
  _RectangleBase.$__fields__ = [];
  function Rectangle(left, top, width, height) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
    this.$deferredAction();
  }
  Rectangle.builtin$cls = "Rectangle";
  if (!"name" in Rectangle)
    Rectangle.name = "Rectangle";
  $desc = $collectedClasses.Rectangle[1];
  Rectangle.prototype = $desc;
  Rectangle.$__fields__ = ["left", "top", "width", "height"];
  Rectangle.prototype.get$left = function(receiver) {
    return this.left;
  };
  Rectangle.prototype.get$top = function(receiver) {
    return this.top;
  };
  Rectangle.prototype.get$width = function(receiver) {
    return this.width;
  };
  Rectangle.prototype.get$height = function(receiver) {
    return this.height;
  };
  function NativeByteBuffer() {
    this.$deferredAction();
  }
  NativeByteBuffer.builtin$cls = "NativeByteBuffer";
  if (!"name" in NativeByteBuffer)
    NativeByteBuffer.name = "NativeByteBuffer";
  $desc = $collectedClasses.NativeByteBuffer[1];
  NativeByteBuffer.prototype = $desc;
  NativeByteBuffer.$__fields__ = [];
  function NativeTypedData() {
    this.$deferredAction();
  }
  NativeTypedData.builtin$cls = "NativeTypedData";
  if (!"name" in NativeTypedData)
    NativeTypedData.name = "NativeTypedData";
  $desc = $collectedClasses.NativeTypedData[1];
  NativeTypedData.prototype = $desc;
  NativeTypedData.$__fields__ = [];
  NativeTypedData.prototype.get$buffer = function(receiver) {
    return receiver.buffer;
  };
  function NativeByteData() {
    this.$deferredAction();
  }
  NativeByteData.builtin$cls = "NativeByteData";
  if (!"name" in NativeByteData)
    NativeByteData.name = "NativeByteData";
  $desc = $collectedClasses.NativeByteData[1];
  NativeByteData.prototype = $desc;
  NativeByteData.$__fields__ = [];
  function NativeTypedArray() {
    this.$deferredAction();
  }
  NativeTypedArray.builtin$cls = "NativeTypedArray";
  if (!"name" in NativeTypedArray)
    NativeTypedArray.name = "NativeTypedArray";
  $desc = $collectedClasses.NativeTypedArray[1];
  NativeTypedArray.prototype = $desc;
  NativeTypedArray.$__fields__ = [];
  function NativeTypedArrayOfDouble() {
    this.$deferredAction();
  }
  NativeTypedArrayOfDouble.builtin$cls = "NativeTypedArrayOfDouble";
  if (!"name" in NativeTypedArrayOfDouble)
    NativeTypedArrayOfDouble.name = "NativeTypedArrayOfDouble";
  $desc = $collectedClasses.NativeTypedArrayOfDouble[1];
  NativeTypedArrayOfDouble.prototype = $desc;
  NativeTypedArrayOfDouble.$__fields__ = [];
  function NativeTypedArray_ListMixin() {
    this.$deferredAction();
  }
  NativeTypedArray_ListMixin.builtin$cls = "NativeTypedArray_ListMixin";
  if (!"name" in NativeTypedArray_ListMixin)
    NativeTypedArray_ListMixin.name = "NativeTypedArray_ListMixin";
  $desc = $collectedClasses.NativeTypedArray_ListMixin[1];
  NativeTypedArray_ListMixin.prototype = $desc;
  NativeTypedArray_ListMixin.$__fields__ = [];
  function NativeTypedArray_ListMixin_FixedLengthListMixin() {
    this.$deferredAction();
  }
  NativeTypedArray_ListMixin_FixedLengthListMixin.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin";
  if (!"name" in NativeTypedArray_ListMixin_FixedLengthListMixin)
    NativeTypedArray_ListMixin_FixedLengthListMixin.name = "NativeTypedArray_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.NativeTypedArray_ListMixin_FixedLengthListMixin[1];
  NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = $desc;
  NativeTypedArray_ListMixin_FixedLengthListMixin.$__fields__ = [];
  function NativeTypedArrayOfInt() {
    this.$deferredAction();
  }
  NativeTypedArrayOfInt.builtin$cls = "NativeTypedArrayOfInt";
  if (!"name" in NativeTypedArrayOfInt)
    NativeTypedArrayOfInt.name = "NativeTypedArrayOfInt";
  $desc = $collectedClasses.NativeTypedArrayOfInt[1];
  NativeTypedArrayOfInt.prototype = $desc;
  NativeTypedArrayOfInt.$__fields__ = [];
  function NativeTypedArray_ListMixin0() {
    this.$deferredAction();
  }
  NativeTypedArray_ListMixin0.builtin$cls = "NativeTypedArray_ListMixin0";
  if (!"name" in NativeTypedArray_ListMixin0)
    NativeTypedArray_ListMixin0.name = "NativeTypedArray_ListMixin0";
  $desc = $collectedClasses.NativeTypedArray_ListMixin0[1];
  NativeTypedArray_ListMixin0.prototype = $desc;
  NativeTypedArray_ListMixin0.$__fields__ = [];
  function NativeTypedArray_ListMixin_FixedLengthListMixin0() {
    this.$deferredAction();
  }
  NativeTypedArray_ListMixin_FixedLengthListMixin0.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin0";
  if (!"name" in NativeTypedArray_ListMixin_FixedLengthListMixin0)
    NativeTypedArray_ListMixin_FixedLengthListMixin0.name = "NativeTypedArray_ListMixin_FixedLengthListMixin0";
  $desc = $collectedClasses.NativeTypedArray_ListMixin_FixedLengthListMixin0[1];
  NativeTypedArray_ListMixin_FixedLengthListMixin0.prototype = $desc;
  NativeTypedArray_ListMixin_FixedLengthListMixin0.$__fields__ = [];
  function NativeFloat32List() {
    this.$deferredAction();
  }
  NativeFloat32List.builtin$cls = "NativeFloat32List";
  if (!"name" in NativeFloat32List)
    NativeFloat32List.name = "NativeFloat32List";
  $desc = $collectedClasses.NativeFloat32List[1];
  NativeFloat32List.prototype = $desc;
  NativeFloat32List.$__fields__ = [];
  function NativeFloat64List() {
    this.$deferredAction();
  }
  NativeFloat64List.builtin$cls = "NativeFloat64List";
  if (!"name" in NativeFloat64List)
    NativeFloat64List.name = "NativeFloat64List";
  $desc = $collectedClasses.NativeFloat64List[1];
  NativeFloat64List.prototype = $desc;
  NativeFloat64List.$__fields__ = [];
  function NativeInt16List() {
    this.$deferredAction();
  }
  NativeInt16List.builtin$cls = "NativeInt16List";
  if (!"name" in NativeInt16List)
    NativeInt16List.name = "NativeInt16List";
  $desc = $collectedClasses.NativeInt16List[1];
  NativeInt16List.prototype = $desc;
  NativeInt16List.$__fields__ = [];
  function NativeInt32List() {
    this.$deferredAction();
  }
  NativeInt32List.builtin$cls = "NativeInt32List";
  if (!"name" in NativeInt32List)
    NativeInt32List.name = "NativeInt32List";
  $desc = $collectedClasses.NativeInt32List[1];
  NativeInt32List.prototype = $desc;
  NativeInt32List.$__fields__ = [];
  function NativeInt8List() {
    this.$deferredAction();
  }
  NativeInt8List.builtin$cls = "NativeInt8List";
  if (!"name" in NativeInt8List)
    NativeInt8List.name = "NativeInt8List";
  $desc = $collectedClasses.NativeInt8List[1];
  NativeInt8List.prototype = $desc;
  NativeInt8List.$__fields__ = [];
  function NativeUint16List() {
    this.$deferredAction();
  }
  NativeUint16List.builtin$cls = "NativeUint16List";
  if (!"name" in NativeUint16List)
    NativeUint16List.name = "NativeUint16List";
  $desc = $collectedClasses.NativeUint16List[1];
  NativeUint16List.prototype = $desc;
  NativeUint16List.$__fields__ = [];
  function NativeUint32List() {
    this.$deferredAction();
  }
  NativeUint32List.builtin$cls = "NativeUint32List";
  if (!"name" in NativeUint32List)
    NativeUint32List.name = "NativeUint32List";
  $desc = $collectedClasses.NativeUint32List[1];
  NativeUint32List.prototype = $desc;
  NativeUint32List.$__fields__ = [];
  function NativeUint8ClampedList() {
    this.$deferredAction();
  }
  NativeUint8ClampedList.builtin$cls = "NativeUint8ClampedList";
  if (!"name" in NativeUint8ClampedList)
    NativeUint8ClampedList.name = "NativeUint8ClampedList";
  $desc = $collectedClasses.NativeUint8ClampedList[1];
  NativeUint8ClampedList.prototype = $desc;
  NativeUint8ClampedList.$__fields__ = [];
  function NativeUint8List() {
    this.$deferredAction();
  }
  NativeUint8List.builtin$cls = "NativeUint8List";
  if (!"name" in NativeUint8List)
    NativeUint8List.name = "NativeUint8List";
  $desc = $collectedClasses.NativeUint8List[1];
  NativeUint8List.prototype = $desc;
  NativeUint8List.$__fields__ = [];
  function Clone(_stopwatch, _clone$_cancel, _options) {
    this._stopwatch = _stopwatch;
    this._clone$_cancel = _clone$_cancel;
    this._options = _options;
    this.$deferredAction();
  }
  Clone.builtin$cls = "Clone";
  if (!"name" in Clone)
    Clone.name = "Clone";
  $desc = $collectedClasses.Clone[1];
  Clone.prototype = $desc;
  Clone.$__fields__ = ["_stopwatch", "_clone$_cancel", "_options"];
  function Clone__clone_closure(_clone$_captured_this_0, _captured_fetcher_1) {
    this._clone$_captured_this_0 = _clone$_captured_this_0;
    this._captured_fetcher_1 = _captured_fetcher_1;
    this.$deferredAction();
  }
  Clone__clone_closure.builtin$cls = "Clone__clone_closure";
  if (!"name" in Clone__clone_closure)
    Clone__clone_closure.name = "Clone__clone_closure";
  $desc = $collectedClasses.Clone__clone_closure[1];
  Clone__clone_closure.prototype = $desc;
  Clone__clone_closure.$__fields__ = ["_clone$_captured_this_0", "_captured_fetcher_1"];
  function Clone__clone__closure(_clone$_captured_this_2) {
    this._clone$_captured_this_2 = _clone$_captured_this_2;
    this.$deferredAction();
  }
  Clone__clone__closure.builtin$cls = "Clone__clone__closure";
  if (!"name" in Clone__clone__closure)
    Clone__clone__closure.name = "Clone__clone__closure";
  $desc = $collectedClasses.Clone__clone__closure[1];
  Clone__clone__closure.prototype = $desc;
  Clone__clone__closure.$__fields__ = ["_clone$_captured_this_2"];
  function Clone__clone___closure(_clone$_captured_e_3) {
    this._clone$_captured_e_3 = _clone$_captured_e_3;
    this.$deferredAction();
  }
  Clone__clone___closure.builtin$cls = "Clone__clone___closure";
  if (!"name" in Clone__clone___closure)
    Clone__clone___closure.name = "Clone__clone___closure";
  $desc = $collectedClasses.Clone__clone___closure[1];
  Clone__clone___closure.prototype = $desc;
  Clone__clone___closure.$__fields__ = ["_clone$_captured_e_3"];
  function Clone_startClone_closure(_clone$_captured_this_1, _captured_fetcher_2) {
    this._clone$_captured_this_1 = _clone$_captured_this_1;
    this._captured_fetcher_2 = _captured_fetcher_2;
    this.$deferredAction();
  }
  Clone_startClone_closure.builtin$cls = "Clone_startClone_closure";
  if (!"name" in Clone_startClone_closure)
    Clone_startClone_closure.name = "Clone_startClone_closure";
  $desc = $collectedClasses.Clone_startClone_closure[1];
  Clone_startClone_closure.prototype = $desc;
  Clone_startClone_closure.$__fields__ = ["_clone$_captured_this_1", "_captured_fetcher_2"];
  function Clone_startClone__closure(_clone$_captured_this_3, _captured_fetcher_4) {
    this._clone$_captured_this_3 = _clone$_captured_this_3;
    this._captured_fetcher_4 = _captured_fetcher_4;
    this.$deferredAction();
  }
  Clone_startClone__closure.builtin$cls = "Clone_startClone__closure";
  if (!"name" in Clone_startClone__closure)
    Clone_startClone__closure.name = "Clone_startClone__closure";
  $desc = $collectedClasses.Clone_startClone__closure[1];
  Clone_startClone__closure.prototype = $desc;
  Clone_startClone__closure.$__fields__ = ["_clone$_captured_this_3", "_captured_fetcher_4"];
  function Clone_startClone___closure(_clone$_captured_this_5, _captured_fetcher_6, _clone$_captured_gitDir_7) {
    this._clone$_captured_this_5 = _clone$_captured_this_5;
    this._captured_fetcher_6 = _captured_fetcher_6;
    this._clone$_captured_gitDir_7 = _clone$_captured_gitDir_7;
    this.$deferredAction();
  }
  Clone_startClone___closure.builtin$cls = "Clone_startClone___closure";
  if (!"name" in Clone_startClone___closure)
    Clone_startClone___closure.name = "Clone_startClone___closure";
  $desc = $collectedClasses.Clone_startClone___closure[1];
  Clone_startClone___closure.prototype = $desc;
  Clone_startClone___closure.$__fields__ = ["_clone$_captured_this_5", "_captured_fetcher_6", "_clone$_captured_gitDir_7"];
  function Clone_startClone____closure(_clone$_box_0, _clone$_captured_this_8, _captured_fetcher_9, _captured_gitDir_10, _captured_refs_11) {
    this._clone$_box_0 = _clone$_box_0;
    this._clone$_captured_this_8 = _clone$_captured_this_8;
    this._captured_fetcher_9 = _captured_fetcher_9;
    this._captured_gitDir_10 = _captured_gitDir_10;
    this._captured_refs_11 = _captured_refs_11;
    this.$deferredAction();
  }
  Clone_startClone____closure.builtin$cls = "Clone_startClone____closure";
  if (!"name" in Clone_startClone____closure)
    Clone_startClone____closure.name = "Clone_startClone____closure";
  $desc = $collectedClasses.Clone_startClone____closure[1];
  Clone_startClone____closure.prototype = $desc;
  Clone_startClone____closure.$__fields__ = ["_clone$_box_0", "_clone$_captured_this_8", "_captured_fetcher_9", "_captured_gitDir_10", "_captured_refs_11"];
  function Clone_startClone_____closure(_clone$_box_0, _captured_this_12) {
    this._clone$_box_0 = _clone$_box_0;
    this._captured_this_12 = _captured_this_12;
    this.$deferredAction();
  }
  Clone_startClone_____closure.builtin$cls = "Clone_startClone_____closure";
  if (!"name" in Clone_startClone_____closure)
    Clone_startClone_____closure.name = "Clone_startClone_____closure";
  $desc = $collectedClasses.Clone_startClone_____closure[1];
  Clone_startClone_____closure.prototype = $desc;
  Clone_startClone_____closure.$__fields__ = ["_clone$_box_0", "_captured_this_12"];
  function Clone_startClone___closure0(_captured_this_13) {
    this._captured_this_13 = _captured_this_13;
    this.$deferredAction();
  }
  Clone_startClone___closure0.builtin$cls = "Clone_startClone___closure0";
  if (!"name" in Clone_startClone___closure0)
    Clone_startClone___closure0.name = "Clone_startClone___closure0";
  $desc = $collectedClasses.Clone_startClone___closure0[1];
  Clone_startClone___closure0.prototype = $desc;
  Clone_startClone___closure0.$__fields__ = ["_captured_this_13"];
  function Clone__cleanup_closure() {
    this.$deferredAction();
  }
  Clone__cleanup_closure.builtin$cls = "Clone__cleanup_closure";
  if (!"name" in Clone__cleanup_closure)
    Clone__cleanup_closure.name = "Clone__cleanup_closure";
  $desc = $collectedClasses.Clone__cleanup_closure[1];
  Clone__cleanup_closure.prototype = $desc;
  Clone__cleanup_closure.$__fields__ = [];
  function Clone__cleanup__closure() {
    this.$deferredAction();
  }
  Clone__cleanup__closure.builtin$cls = "Clone__cleanup__closure";
  if (!"name" in Clone__cleanup__closure)
    Clone__cleanup__closure.name = "Clone__cleanup__closure";
  $desc = $collectedClasses.Clone__cleanup__closure[1];
  Clone__cleanup__closure.prototype = $desc;
  Clone__cleanup__closure.$__fields__ = [];
  function Clone__createCurrentTreeFromPack_closure(_captured_dir_0, _captured_store_1) {
    this._captured_dir_0 = _captured_dir_0;
    this._captured_store_1 = _captured_store_1;
    this.$deferredAction();
  }
  Clone__createCurrentTreeFromPack_closure.builtin$cls = "Clone__createCurrentTreeFromPack_closure";
  if (!"name" in Clone__createCurrentTreeFromPack_closure)
    Clone__createCurrentTreeFromPack_closure.name = "Clone__createCurrentTreeFromPack_closure";
  $desc = $collectedClasses.Clone__createCurrentTreeFromPack_closure[1];
  Clone__createCurrentTreeFromPack_closure.prototype = $desc;
  Clone__createCurrentTreeFromPack_closure.$__fields__ = ["_captured_dir_0", "_captured_store_1"];
  function Clone__checkDirectory_closure(_captured_store_0, _captured_uninitializedOk_1) {
    this._captured_store_0 = _captured_store_0;
    this._captured_uninitializedOk_1 = _captured_uninitializedOk_1;
    this.$deferredAction();
  }
  Clone__checkDirectory_closure.builtin$cls = "Clone__checkDirectory_closure";
  if (!"name" in Clone__checkDirectory_closure)
    Clone__checkDirectory_closure.name = "Clone__checkDirectory_closure";
  $desc = $collectedClasses.Clone__checkDirectory_closure[1];
  Clone__checkDirectory_closure.prototype = $desc;
  Clone__checkDirectory_closure.$__fields__ = ["_captured_store_0", "_captured_uninitializedOk_1"];
  function Clone__checkDirectory__closure(_captured_store_2) {
    this._captured_store_2 = _captured_store_2;
    this.$deferredAction();
  }
  Clone__checkDirectory__closure.builtin$cls = "Clone__checkDirectory__closure";
  if (!"name" in Clone__checkDirectory__closure)
    Clone__checkDirectory__closure.name = "Clone__checkDirectory__closure";
  $desc = $collectedClasses.Clone__checkDirectory__closure[1];
  Clone__checkDirectory__closure.prototype = $desc;
  Clone__checkDirectory__closure.$__fields__ = ["_captured_store_2"];
  function Clone__checkDirectory___closure() {
    this.$deferredAction();
  }
  Clone__checkDirectory___closure.builtin$cls = "Clone__checkDirectory___closure";
  if (!"name" in Clone__checkDirectory___closure)
    Clone__checkDirectory___closure.name = "Clone__checkDirectory___closure";
  $desc = $collectedClasses.Clone__checkDirectory___closure[1];
  Clone__checkDirectory___closure.prototype = $desc;
  Clone__checkDirectory___closure.$__fields__ = [];
  function Clone__checkDirectory____closure() {
    this.$deferredAction();
  }
  Clone__checkDirectory____closure.builtin$cls = "Clone__checkDirectory____closure";
  if (!"name" in Clone__checkDirectory____closure)
    Clone__checkDirectory____closure.name = "Clone__checkDirectory____closure";
  $desc = $collectedClasses.Clone__checkDirectory____closure[1];
  Clone__checkDirectory____closure.prototype = $desc;
  Clone__checkDirectory____closure.$__fields__ = [];
  function Clone__processClone_closure(_clone$_captured_this_0, _captured_localHeadRef_1, _captured_fetcher_2) {
    this._clone$_captured_this_0 = _clone$_captured_this_0;
    this._captured_localHeadRef_1 = _captured_localHeadRef_1;
    this._captured_fetcher_2 = _captured_fetcher_2;
    this.$deferredAction();
  }
  Clone__processClone_closure.builtin$cls = "Clone__processClone_closure";
  if (!"name" in Clone__processClone_closure)
    Clone__processClone_closure.name = "Clone__processClone_closure";
  $desc = $collectedClasses.Clone__processClone_closure[1];
  Clone__processClone_closure.prototype = $desc;
  Clone__processClone_closure.$__fields__ = ["_clone$_captured_this_0", "_captured_localHeadRef_1", "_captured_fetcher_2"];
  function Clone__processClone__closure(_clone$_captured_this_3, _captured_localHeadRef_4) {
    this._clone$_captured_this_3 = _clone$_captured_this_3;
    this._captured_localHeadRef_4 = _captured_localHeadRef_4;
    this.$deferredAction();
  }
  Clone__processClone__closure.builtin$cls = "Clone__processClone__closure";
  if (!"name" in Clone__processClone__closure)
    Clone__processClone__closure.name = "Clone__processClone__closure";
  $desc = $collectedClasses.Clone__processClone__closure[1];
  Clone__processClone__closure.prototype = $desc;
  Clone__processClone__closure.$__fields__ = ["_clone$_captured_this_3", "_captured_localHeadRef_4"];
  function Clone__processClone___closure(_clone$_captured_this_5, _captured_localHeadRef_6, _captured_result_7) {
    this._clone$_captured_this_5 = _clone$_captured_this_5;
    this._captured_localHeadRef_6 = _captured_localHeadRef_6;
    this._captured_result_7 = _captured_result_7;
    this.$deferredAction();
  }
  Clone__processClone___closure.builtin$cls = "Clone__processClone___closure";
  if (!"name" in Clone__processClone___closure)
    Clone__processClone___closure.name = "Clone__processClone___closure";
  $desc = $collectedClasses.Clone__processClone___closure[1];
  Clone__processClone___closure.prototype = $desc;
  Clone__processClone___closure.$__fields__ = ["_clone$_captured_this_5", "_captured_localHeadRef_6", "_captured_result_7"];
  function Clone__processClone____closure(_clone$_captured_this_8, _captured_localHeadRef_9, _clone$_captured_result_10) {
    this._clone$_captured_this_8 = _clone$_captured_this_8;
    this._captured_localHeadRef_9 = _captured_localHeadRef_9;
    this._clone$_captured_result_10 = _clone$_captured_result_10;
    this.$deferredAction();
  }
  Clone__processClone____closure.builtin$cls = "Clone__processClone____closure";
  if (!"name" in Clone__processClone____closure)
    Clone__processClone____closure.name = "Clone__processClone____closure";
  $desc = $collectedClasses.Clone__processClone____closure[1];
  Clone__processClone____closure.prototype = $desc;
  Clone__processClone____closure.$__fields__ = ["_clone$_captured_this_8", "_captured_localHeadRef_9", "_clone$_captured_result_10"];
  function Clone__processClone_____closure() {
    this.$deferredAction();
  }
  Clone__processClone_____closure.builtin$cls = "Clone__processClone_____closure";
  if (!"name" in Clone__processClone_____closure)
    Clone__processClone_____closure.name = "Clone__processClone_____closure";
  $desc = $collectedClasses.Clone__processClone_____closure[1];
  Clone__processClone_____closure.prototype = $desc;
  Clone__processClone_____closure.$__fields__ = [];
  function Clone__createHeadAndRef_closure(_captured_gitDir_0, _captured_localHeadRef_1) {
    this._captured_gitDir_0 = _captured_gitDir_0;
    this._captured_localHeadRef_1 = _captured_localHeadRef_1;
    this.$deferredAction();
  }
  Clone__createHeadAndRef_closure.builtin$cls = "Clone__createHeadAndRef_closure";
  if (!"name" in Clone__createHeadAndRef_closure)
    Clone__createHeadAndRef_closure.name = "Clone__createHeadAndRef_closure";
  $desc = $collectedClasses.Clone__createHeadAndRef_closure[1];
  Clone__createHeadAndRef_closure.prototype = $desc;
  Clone__createHeadAndRef_closure.$__fields__ = ["_captured_gitDir_0", "_captured_localHeadRef_1"];
  function Clone__callMethod_closure(_clone$_captured_this_0, _captured_message_1) {
    this._clone$_captured_this_0 = _clone$_captured_this_0;
    this._captured_message_1 = _captured_message_1;
    this.$deferredAction();
  }
  Clone__callMethod_closure.builtin$cls = "Clone__callMethod_closure";
  if (!"name" in Clone__callMethod_closure)
    Clone__callMethod_closure.name = "Clone__callMethod_closure";
  $desc = $collectedClasses.Clone__callMethod_closure[1];
  Clone__callMethod_closure.prototype = $desc;
  Clone__callMethod_closure.$__fields__ = ["_clone$_captured_this_0", "_captured_message_1"];
  function CloneCancel(_utils1$_cancel, _errorCode, canIgnore) {
    this._utils1$_cancel = _utils1$_cancel;
    this._errorCode = _errorCode;
    this.canIgnore = canIgnore;
    this.$deferredAction();
  }
  CloneCancel.builtin$cls = "CloneCancel";
  if (!"name" in CloneCancel)
    CloneCancel.name = "CloneCancel";
  $desc = $collectedClasses.CloneCancel[1];
  CloneCancel.prototype = $desc;
  CloneCancel.$__fields__ = ["_utils1$_cancel", "_errorCode", "canIgnore"];
  function Index(_store, _statusIdx, _indexDirty, _writingIndex, _writeIndexTimer, _writeIndexCompleter, _flushing) {
    this._store = _store;
    this._statusIdx = _statusIdx;
    this._indexDirty = _indexDirty;
    this._writingIndex = _writingIndex;
    this._writeIndexTimer = _writeIndexTimer;
    this._writeIndexCompleter = _writeIndexCompleter;
    this._flushing = _flushing;
    this.$deferredAction();
  }
  Index.builtin$cls = "Index";
  if (!"name" in Index)
    Index.name = "Index";
  $desc = $collectedClasses.Index[1];
  Index.prototype = $desc;
  Index.$__fields__ = ["_store", "_statusIdx", "_indexDirty", "_writingIndex", "_writeIndexTimer", "_writeIndexCompleter", "_flushing"];
  function Index__writeIndex_closure(_index0$_captured_this_0, _captured_out_1) {
    this._index0$_captured_this_0 = _index0$_captured_this_0;
    this._captured_out_1 = _captured_out_1;
    this.$deferredAction();
  }
  Index__writeIndex_closure.builtin$cls = "Index__writeIndex_closure";
  if (!"name" in Index__writeIndex_closure)
    Index__writeIndex_closure.name = "Index__writeIndex_closure";
  $desc = $collectedClasses.Index__writeIndex_closure[1];
  Index__writeIndex_closure.prototype = $desc;
  Index__writeIndex_closure.$__fields__ = ["_index0$_captured_this_0", "_captured_out_1"];
  function Index__writeIndex__closure(_index0$_captured_this_2) {
    this._index0$_captured_this_2 = _index0$_captured_this_2;
    this.$deferredAction();
  }
  Index__writeIndex__closure.builtin$cls = "Index__writeIndex__closure";
  if (!"name" in Index__writeIndex__closure)
    Index__writeIndex__closure.name = "Index__writeIndex__closure";
  $desc = $collectedClasses.Index__writeIndex__closure[1];
  Index__writeIndex__closure.prototype = $desc;
  Index__writeIndex__closure.$__fields__ = ["_index0$_captured_this_2"];
  function Index__scheduleWriteIndex_closure(_index0$_captured_this_0) {
    this._index0$_captured_this_0 = _index0$_captured_this_0;
    this.$deferredAction();
  }
  Index__scheduleWriteIndex_closure.builtin$cls = "Index__scheduleWriteIndex_closure";
  if (!"name" in Index__scheduleWriteIndex_closure)
    Index__scheduleWriteIndex_closure.name = "Index__scheduleWriteIndex_closure";
  $desc = $collectedClasses.Index__scheduleWriteIndex_closure[1];
  Index__scheduleWriteIndex_closure.prototype = $desc;
  Index__scheduleWriteIndex_closure.$__fields__ = ["_index0$_captured_this_0"];
  function Index__scheduleWriteIndex__closure(_index0$_captured_this_1) {
    this._index0$_captured_this_1 = _index0$_captured_this_1;
    this.$deferredAction();
  }
  Index__scheduleWriteIndex__closure.builtin$cls = "Index__scheduleWriteIndex__closure";
  if (!"name" in Index__scheduleWriteIndex__closure)
    Index__scheduleWriteIndex__closure.name = "Index__scheduleWriteIndex__closure";
  $desc = $collectedClasses.Index__scheduleWriteIndex__closure[1];
  Index__scheduleWriteIndex__closure.prototype = $desc;
  Index__scheduleWriteIndex__closure.$__fields__ = ["_index0$_captured_this_1"];
  function Index_statusIdxToMap_closure(_captured_m_0) {
    this._captured_m_0 = _captured_m_0;
    this.$deferredAction();
  }
  Index_statusIdxToMap_closure.builtin$cls = "Index_statusIdxToMap_closure";
  if (!"name" in Index_statusIdxToMap_closure)
    Index_statusIdxToMap_closure.name = "Index_statusIdxToMap_closure";
  $desc = $collectedClasses.Index_statusIdxToMap_closure[1];
  Index_statusIdxToMap_closure.prototype = $desc;
  Index_statusIdxToMap_closure.$__fields__ = ["_captured_m_0"];
  function FileStatus(path, headSha, permission, sha, size, deleted, modificationTime, type) {
    this.path = path;
    this.headSha = headSha;
    this.permission = permission;
    this.sha = sha;
    this.size = size;
    this.deleted = deleted;
    this.modificationTime = modificationTime;
    this.type = type;
    this.$deferredAction();
  }
  FileStatus.builtin$cls = "FileStatus";
  if (!"name" in FileStatus)
    FileStatus.name = "FileStatus";
  $desc = $collectedClasses.FileStatus[1];
  FileStatus.prototype = $desc;
  FileStatus.$__fields__ = ["path", "headSha", "permission", "sha", "size", "deleted", "modificationTime", "type"];
  FileStatus.prototype.get$path = function(receiver) {
    return this.path;
  };
  FileStatus.prototype.get$permission = function() {
    return this.permission;
  };
  FileStatus.prototype.get$sha = function() {
    return this.sha;
  };
  FileStatus.prototype.get$size = function(receiver) {
    return this.size;
  };
  FileStatus.prototype.get$modificationTime = function(receiver) {
    return this.modificationTime;
  };
  FileStatus.prototype.get$type = function(receiver) {
    return this.type;
  };
  FileStatus.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  function GitLocation(_utils$_name, entry) {
    this._utils$_name = _utils$_name;
    this.entry = entry;
    this.$deferredAction();
  }
  GitLocation.builtin$cls = "GitLocation";
  if (!"name" in GitLocation)
    GitLocation.name = "GitLocation";
  $desc = $collectedClasses.GitLocation[1];
  GitLocation.prototype = $desc;
  GitLocation.$__fields__ = ["_utils$_name", "entry"];
  function GitLocation_init_closure(_utils$_captured_this_0) {
    this._utils$_captured_this_0 = _utils$_captured_this_0;
    this.$deferredAction();
  }
  GitLocation_init_closure.builtin$cls = "GitLocation_init_closure";
  if (!"name" in GitLocation_init_closure)
    GitLocation_init_closure.name = "GitLocation_init_closure";
  $desc = $collectedClasses.GitLocation_init_closure[1];
  GitLocation_init_closure.prototype = $desc;
  GitLocation_init_closure.$__fields__ = ["_utils$_captured_this_0"];
  function GitLocation_init__closure(_utils$_captured_this_1, _captured_gitDir_2) {
    this._utils$_captured_this_1 = _utils$_captured_this_1;
    this._captured_gitDir_2 = _captured_gitDir_2;
    this.$deferredAction();
  }
  GitLocation_init__closure.builtin$cls = "GitLocation_init__closure";
  if (!"name" in GitLocation_init__closure)
    GitLocation_init__closure.name = "GitLocation_init__closure";
  $desc = $collectedClasses.GitLocation_init__closure[1];
  GitLocation_init__closure.prototype = $desc;
  GitLocation_init__closure.$__fields__ = ["_utils$_captured_this_1", "_captured_gitDir_2"];
  function GitLocation_init___closure0(_captured_this_3, _captured_gitDir_4) {
    this._captured_this_3 = _captured_this_3;
    this._captured_gitDir_4 = _captured_gitDir_4;
    this.$deferredAction();
  }
  GitLocation_init___closure0.builtin$cls = "GitLocation_init___closure0";
  if (!"name" in GitLocation_init___closure0)
    GitLocation_init___closure0.name = "GitLocation_init___closure0";
  $desc = $collectedClasses.GitLocation_init___closure0[1];
  GitLocation_init___closure0.prototype = $desc;
  GitLocation_init___closure0.$__fields__ = ["_captured_this_3", "_captured_gitDir_4"];
  function GitLocation_init____closure(_captured_this_5) {
    this._captured_this_5 = _captured_this_5;
    this.$deferredAction();
  }
  GitLocation_init____closure.builtin$cls = "GitLocation_init____closure";
  if (!"name" in GitLocation_init____closure)
    GitLocation_init____closure.name = "GitLocation_init____closure";
  $desc = $collectedClasses.GitLocation_init____closure[1];
  GitLocation_init____closure.prototype = $desc;
  GitLocation_init____closure.$__fields__ = ["_captured_this_5"];
  function GitLocation_init__closure0(_captured_this_6, _captured_gitDir_7) {
    this._captured_this_6 = _captured_this_6;
    this._captured_gitDir_7 = _captured_gitDir_7;
    this.$deferredAction();
  }
  GitLocation_init__closure0.builtin$cls = "GitLocation_init__closure0";
  if (!"name" in GitLocation_init__closure0)
    GitLocation_init__closure0.name = "GitLocation_init__closure0";
  $desc = $collectedClasses.GitLocation_init__closure0[1];
  GitLocation_init__closure0.prototype = $desc;
  GitLocation_init__closure0.$__fields__ = ["_captured_this_6", "_captured_gitDir_7"];
  function GitLocation_init___closure(_captured_this_8) {
    this._captured_this_8 = _captured_this_8;
    this.$deferredAction();
  }
  GitLocation_init___closure.builtin$cls = "GitLocation_init___closure";
  if (!"name" in GitLocation_init___closure)
    GitLocation_init___closure.name = "GitLocation_init___closure";
  $desc = $collectedClasses.GitLocation_init___closure[1];
  GitLocation_init___closure.prototype = $desc;
  GitLocation_init___closure.$__fields__ = ["_captured_this_8"];
  function GitLocation_init_closure0() {
    this.$deferredAction();
  }
  GitLocation_init_closure0.builtin$cls = "GitLocation_init_closure0";
  if (!"name" in GitLocation_init_closure0)
    GitLocation_init_closure0.name = "GitLocation_init_closure0";
  $desc = $collectedClasses.GitLocation_init_closure0[1];
  GitLocation_init_closure0.prototype = $desc;
  GitLocation_init_closure0.$__fields__ = [];
  function GitLocation__safeDelete_closure() {
    this.$deferredAction();
  }
  GitLocation__safeDelete_closure.builtin$cls = "GitLocation__safeDelete_closure";
  if (!"name" in GitLocation__safeDelete_closure)
    GitLocation__safeDelete_closure.name = "GitLocation__safeDelete_closure";
  $desc = $collectedClasses.GitLocation__safeDelete_closure[1];
  GitLocation__safeDelete_closure.prototype = $desc;
  GitLocation__safeDelete_closure.$__fields__ = [];
  function Config(url, shallow, remoteHeads, time) {
    this.url = url;
    this.shallow = shallow;
    this.remoteHeads = remoteHeads;
    this.time = time;
    this.$deferredAction();
  }
  Config.builtin$cls = "Config";
  if (!"name" in Config)
    Config.name = "Config";
  $desc = $collectedClasses.Config[1];
  Config.prototype = $desc;
  Config.$__fields__ = ["url", "shallow", "remoteHeads", "time"];
  Config.prototype.set$url = function(receiver, v) {
    return this.url = v;
  };
  Config.prototype.get$shallow = function() {
    return this.shallow;
  };
  Config.prototype.set$shallow = function(v) {
    return this.shallow = v;
  };
  Config.prototype.get$remoteHeads = function() {
    return this.remoteHeads;
  };
  Config.prototype.set$time = function(v) {
    return this.time = v;
  };
  function GitException(errorCode, message, canIgnore) {
    this.errorCode = errorCode;
    this.message = message;
    this.canIgnore = canIgnore;
    this.$deferredAction();
  }
  GitException.builtin$cls = "GitException";
  if (!"name" in GitException)
    GitException.name = "GitException";
  $desc = $collectedClasses.GitException[1];
  GitException.prototype = $desc;
  GitException.$__fields__ = ["errorCode", "message", "canIgnore"];
  GitException.prototype.get$message = function(receiver) {
    return this.message;
  };
  function FastSha(_currentChunk, _w, _lengthInBytes, _pendingData, _h0, _h1, _h2, _h3, _h4, _digestCalled, _cvtBytes) {
    this._currentChunk = _currentChunk;
    this._w = _w;
    this._lengthInBytes = _lengthInBytes;
    this._pendingData = _pendingData;
    this._h0 = _h0;
    this._h1 = _h1;
    this._h2 = _h2;
    this._h3 = _h3;
    this._h4 = _h4;
    this._digestCalled = _digestCalled;
    this._cvtBytes = _cvtBytes;
    this.$deferredAction();
  }
  FastSha.builtin$cls = "FastSha";
  if (!"name" in FastSha)
    FastSha.name = "FastSha";
  $desc = $collectedClasses.FastSha[1];
  FastSha.prototype = $desc;
  FastSha.$__fields__ = ["_currentChunk", "_w", "_lengthInBytes", "_pendingData", "_h0", "_h1", "_h2", "_h3", "_h4", "_digestCalled", "_cvtBytes"];
  function FileOps_createDirectoryRecursive_createDirectories(_file_operations$_box_0, _captured_pathParts_1) {
    this._file_operations$_box_0 = _file_operations$_box_0;
    this._captured_pathParts_1 = _captured_pathParts_1;
    this.$deferredAction();
  }
  FileOps_createDirectoryRecursive_createDirectories.builtin$cls = "FileOps_createDirectoryRecursive_createDirectories";
  if (!"name" in FileOps_createDirectoryRecursive_createDirectories)
    FileOps_createDirectoryRecursive_createDirectories.name = "FileOps_createDirectoryRecursive_createDirectories";
  $desc = $collectedClasses.FileOps_createDirectoryRecursive_createDirectories[1];
  FileOps_createDirectoryRecursive_createDirectories.prototype = $desc;
  FileOps_createDirectoryRecursive_createDirectories.$__fields__ = ["_file_operations$_box_0", "_captured_pathParts_1"];
  function FileOps_createDirectoryRecursive_createDirectories_closure(_file_operations$_box_0, _captured_pathParts_2, _captured_createDirectories_3) {
    this._file_operations$_box_0 = _file_operations$_box_0;
    this._captured_pathParts_2 = _captured_pathParts_2;
    this._captured_createDirectories_3 = _captured_createDirectories_3;
    this.$deferredAction();
  }
  FileOps_createDirectoryRecursive_createDirectories_closure.builtin$cls = "FileOps_createDirectoryRecursive_createDirectories_closure";
  if (!"name" in FileOps_createDirectoryRecursive_createDirectories_closure)
    FileOps_createDirectoryRecursive_createDirectories_closure.name = "FileOps_createDirectoryRecursive_createDirectories_closure";
  $desc = $collectedClasses.FileOps_createDirectoryRecursive_createDirectories_closure[1];
  FileOps_createDirectoryRecursive_createDirectories_closure.prototype = $desc;
  FileOps_createDirectoryRecursive_createDirectories_closure.$__fields__ = ["_file_operations$_box_0", "_captured_pathParts_2", "_captured_createDirectories_3"];
  function FileOps_createFileWithContent_closure(_captured_content_0, _captured_type_1, _captured_pathParts_2) {
    this._captured_content_0 = _captured_content_0;
    this._captured_type_1 = _captured_type_1;
    this._captured_pathParts_2 = _captured_pathParts_2;
    this.$deferredAction();
  }
  FileOps_createFileWithContent_closure.builtin$cls = "FileOps_createFileWithContent_closure";
  if (!"name" in FileOps_createFileWithContent_closure)
    FileOps_createFileWithContent_closure.name = "FileOps_createFileWithContent_closure";
  $desc = $collectedClasses.FileOps_createFileWithContent_closure[1];
  FileOps_createFileWithContent_closure.prototype = $desc;
  FileOps_createFileWithContent_closure.$__fields__ = ["_captured_content_0", "_captured_type_1", "_captured_pathParts_2"];
  function FileOps_readBlob_closure(_file_operations$_captured_completer_0, _file_operations$_captured_reader_1) {
    this._file_operations$_captured_completer_0 = _file_operations$_captured_completer_0;
    this._file_operations$_captured_reader_1 = _file_operations$_captured_reader_1;
    this.$deferredAction();
  }
  FileOps_readBlob_closure.builtin$cls = "FileOps_readBlob_closure";
  if (!"name" in FileOps_readBlob_closure)
    FileOps_readBlob_closure.name = "FileOps_readBlob_closure";
  $desc = $collectedClasses.FileOps_readBlob_closure[1];
  FileOps_readBlob_closure.prototype = $desc;
  FileOps_readBlob_closure.$__fields__ = ["_file_operations$_captured_completer_0", "_file_operations$_captured_reader_1"];
  function FileOps_readBlob_closure0(_file_operations$_captured_completer_2) {
    this._file_operations$_captured_completer_2 = _file_operations$_captured_completer_2;
    this.$deferredAction();
  }
  FileOps_readBlob_closure0.builtin$cls = "FileOps_readBlob_closure0";
  if (!"name" in FileOps_readBlob_closure0)
    FileOps_readBlob_closure0.name = "FileOps_readBlob_closure0";
  $desc = $collectedClasses.FileOps_readBlob_closure0[1];
  FileOps_readBlob_closure0.prototype = $desc;
  FileOps_readBlob_closure0.$__fields__ = ["_file_operations$_captured_completer_2"];
  function FileOps__createFile_closure(_file_operations$_box_0, _captured_type_1) {
    this._file_operations$_box_0 = _file_operations$_box_0;
    this._captured_type_1 = _captured_type_1;
    this.$deferredAction();
  }
  FileOps__createFile_closure.builtin$cls = "FileOps__createFile_closure";
  if (!"name" in FileOps__createFile_closure)
    FileOps__createFile_closure.name = "FileOps__createFile_closure";
  $desc = $collectedClasses.FileOps__createFile_closure[1];
  FileOps__createFile_closure.prototype = $desc;
  FileOps__createFile_closure.$__fields__ = ["_file_operations$_box_0", "_captured_type_1"];
  function FileOps__createFile__closure1(_captured_entry_2) {
    this._captured_entry_2 = _captured_entry_2;
    this.$deferredAction();
  }
  FileOps__createFile__closure1.builtin$cls = "FileOps__createFile__closure1";
  if (!"name" in FileOps__createFile__closure1)
    FileOps__createFile__closure1.name = "FileOps__createFile__closure1";
  $desc = $collectedClasses.FileOps__createFile__closure1[1];
  FileOps__createFile__closure1.prototype = $desc;
  FileOps__createFile__closure1.$__fields__ = ["_captured_entry_2"];
  function FileOps__createFile__closure2(_captured_entry_3) {
    this._captured_entry_3 = _captured_entry_3;
    this.$deferredAction();
  }
  FileOps__createFile__closure2.builtin$cls = "FileOps__createFile__closure2";
  if (!"name" in FileOps__createFile__closure2)
    FileOps__createFile__closure2.name = "FileOps__createFile__closure2";
  $desc = $collectedClasses.FileOps__createFile__closure2[1];
  FileOps__createFile__closure2.prototype = $desc;
  FileOps__createFile__closure2.$__fields__ = ["_captured_entry_3"];
  function FileOps__createFile__closure(_captured_entry_4) {
    this._captured_entry_4 = _captured_entry_4;
    this.$deferredAction();
  }
  FileOps__createFile__closure.builtin$cls = "FileOps__createFile__closure";
  if (!"name" in FileOps__createFile__closure)
    FileOps__createFile__closure.name = "FileOps__createFile__closure";
  $desc = $collectedClasses.FileOps__createFile__closure[1];
  FileOps__createFile__closure.prototype = $desc;
  FileOps__createFile__closure.$__fields__ = ["_captured_entry_4"];
  function FileOps__createFile__closure0(_captured_entry_5) {
    this._captured_entry_5 = _captured_entry_5;
    this.$deferredAction();
  }
  FileOps__createFile__closure0.builtin$cls = "FileOps__createFile__closure0";
  if (!"name" in FileOps__createFile__closure0)
    FileOps__createFile__closure0.name = "FileOps__createFile__closure0";
  $desc = $collectedClasses.FileOps__createFile__closure0[1];
  FileOps__createFile__closure0.prototype = $desc;
  FileOps__createFile__closure0.$__fields__ = ["_captured_entry_5"];
  function FileOps__writeBlob_closure(_captured_blob_1, _file_operations$_captured_completer_2) {
    this._captured_blob_1 = _captured_blob_1;
    this._file_operations$_captured_completer_2 = _file_operations$_captured_completer_2;
    this.$deferredAction();
  }
  FileOps__writeBlob_closure.builtin$cls = "FileOps__writeBlob_closure";
  if (!"name" in FileOps__writeBlob_closure)
    FileOps__writeBlob_closure.name = "FileOps__writeBlob_closure";
  $desc = $collectedClasses.FileOps__writeBlob_closure[1];
  FileOps__writeBlob_closure.prototype = $desc;
  FileOps__writeBlob_closure.$__fields__ = ["_captured_blob_1", "_file_operations$_captured_completer_2"];
  function FileOps__writeBlob__closure(_file_operations$_box_0, _captured_completer_3, _captured_writer_4) {
    this._file_operations$_box_0 = _file_operations$_box_0;
    this._captured_completer_3 = _captured_completer_3;
    this._captured_writer_4 = _captured_writer_4;
    this.$deferredAction();
  }
  FileOps__writeBlob__closure.builtin$cls = "FileOps__writeBlob__closure";
  if (!"name" in FileOps__writeBlob__closure)
    FileOps__writeBlob__closure.name = "FileOps__writeBlob__closure";
  $desc = $collectedClasses.FileOps__writeBlob__closure[1];
  FileOps__writeBlob__closure.prototype = $desc;
  FileOps__writeBlob__closure.$__fields__ = ["_file_operations$_box_0", "_captured_completer_3", "_captured_writer_4"];
  function HttpFetcher(store, name, repoUrl, username, password, url, urlOptions, refs) {
    this.store = store;
    this.name = name;
    this.repoUrl = repoUrl;
    this.username = username;
    this.password = password;
    this.url = url;
    this.urlOptions = urlOptions;
    this.refs = refs;
    this.$deferredAction();
  }
  HttpFetcher.builtin$cls = "HttpFetcher";
  if (!"name" in HttpFetcher)
    HttpFetcher.name = "HttpFetcher";
  $desc = $collectedClasses.HttpFetcher[1];
  HttpFetcher.prototype = $desc;
  HttpFetcher.$__fields__ = ["store", "name", "repoUrl", "username", "password", "url", "urlOptions", "refs"];
  HttpFetcher.prototype.get$name = function(receiver) {
    return this.name;
  };
  HttpFetcher.prototype.set$url = function(receiver, v) {
    return this.url = v;
  };
  function HttpFetcher_fetchRef_closure(_http_fetcher$_captured_this_0, _captured_haveRefs_1, _captured_moreHaves_2, _captured_noCommon_3, _captured_cancel_4, _captured_completer_5, _captured_xhr_6, _captured_packProgress_7) {
    this._http_fetcher$_captured_this_0 = _http_fetcher$_captured_this_0;
    this._captured_haveRefs_1 = _captured_haveRefs_1;
    this._captured_moreHaves_2 = _captured_moreHaves_2;
    this._captured_noCommon_3 = _captured_noCommon_3;
    this._captured_cancel_4 = _captured_cancel_4;
    this._captured_completer_5 = _captured_completer_5;
    this._captured_xhr_6 = _captured_xhr_6;
    this._captured_packProgress_7 = _captured_packProgress_7;
    this.$deferredAction();
  }
  HttpFetcher_fetchRef_closure.builtin$cls = "HttpFetcher_fetchRef_closure";
  if (!"name" in HttpFetcher_fetchRef_closure)
    HttpFetcher_fetchRef_closure.name = "HttpFetcher_fetchRef_closure";
  $desc = $collectedClasses.HttpFetcher_fetchRef_closure[1];
  HttpFetcher_fetchRef_closure.prototype = $desc;
  HttpFetcher_fetchRef_closure.$__fields__ = ["_http_fetcher$_captured_this_0", "_captured_haveRefs_1", "_captured_moreHaves_2", "_captured_noCommon_3", "_captured_cancel_4", "_captured_completer_5", "_captured_xhr_6", "_captured_packProgress_7"];
  function HttpFetcher_fetchRef__closure(_captured_completer_8) {
    this._captured_completer_8 = _captured_completer_8;
    this.$deferredAction();
  }
  HttpFetcher_fetchRef__closure.builtin$cls = "HttpFetcher_fetchRef__closure";
  if (!"name" in HttpFetcher_fetchRef__closure)
    HttpFetcher_fetchRef__closure.name = "HttpFetcher_fetchRef__closure";
  $desc = $collectedClasses.HttpFetcher_fetchRef__closure[1];
  HttpFetcher_fetchRef__closure.prototype = $desc;
  HttpFetcher_fetchRef__closure.$__fields__ = ["_captured_completer_8"];
  function HttpFetcher_fetchRef__closure0(_captured_completer_9) {
    this._captured_completer_9 = _captured_completer_9;
    this.$deferredAction();
  }
  HttpFetcher_fetchRef__closure0.builtin$cls = "HttpFetcher_fetchRef__closure0";
  if (!"name" in HttpFetcher_fetchRef__closure0)
    HttpFetcher_fetchRef__closure0.name = "HttpFetcher_fetchRef__closure0";
  $desc = $collectedClasses.HttpFetcher_fetchRef__closure0[1];
  HttpFetcher_fetchRef__closure0.prototype = $desc;
  HttpFetcher_fetchRef__closure0.$__fields__ = ["_captured_completer_9"];
  function HttpFetcher_fetchRef_closure0(_captured_completer_10, _captured_xhr_11) {
    this._captured_completer_10 = _captured_completer_10;
    this._captured_xhr_11 = _captured_xhr_11;
    this.$deferredAction();
  }
  HttpFetcher_fetchRef_closure0.builtin$cls = "HttpFetcher_fetchRef_closure0";
  if (!"name" in HttpFetcher_fetchRef_closure0)
    HttpFetcher_fetchRef_closure0.name = "HttpFetcher_fetchRef_closure0";
  $desc = $collectedClasses.HttpFetcher_fetchRef_closure0[1];
  HttpFetcher_fetchRef_closure0.prototype = $desc;
  HttpFetcher_fetchRef_closure0.$__fields__ = ["_captured_completer_10", "_captured_xhr_11"];
  function HttpFetcher_fetchRef_closure1(_captured_completer_12, _captured_xhr_13) {
    this._captured_completer_12 = _captured_completer_12;
    this._captured_xhr_13 = _captured_xhr_13;
    this.$deferredAction();
  }
  HttpFetcher_fetchRef_closure1.builtin$cls = "HttpFetcher_fetchRef_closure1";
  if (!"name" in HttpFetcher_fetchRef_closure1)
    HttpFetcher_fetchRef_closure1.name = "HttpFetcher_fetchRef_closure1";
  $desc = $collectedClasses.HttpFetcher_fetchRef_closure1[1];
  HttpFetcher_fetchRef_closure1.prototype = $desc;
  HttpFetcher_fetchRef_closure1.$__fields__ = ["_captured_completer_12", "_captured_xhr_13"];
  function HttpFetcher__queryParams_closure(_captured_params_0) {
    this._captured_params_0 = _captured_params_0;
    this.$deferredAction();
  }
  HttpFetcher__queryParams_closure.builtin$cls = "HttpFetcher__queryParams_closure";
  if (!"name" in HttpFetcher__queryParams_closure)
    HttpFetcher__queryParams_closure.name = "HttpFetcher__queryParams_closure";
  $desc = $collectedClasses.HttpFetcher__queryParams_closure[1];
  HttpFetcher__queryParams_closure.prototype = $desc;
  HttpFetcher__queryParams_closure.$__fields__ = ["_captured_params_0"];
  function HttpFetcher__doGet_closure(_http_fetcher$_captured_completer_0, _captured_xhr_1) {
    this._http_fetcher$_captured_completer_0 = _http_fetcher$_captured_completer_0;
    this._captured_xhr_1 = _captured_xhr_1;
    this.$deferredAction();
  }
  HttpFetcher__doGet_closure.builtin$cls = "HttpFetcher__doGet_closure";
  if (!"name" in HttpFetcher__doGet_closure)
    HttpFetcher__doGet_closure.name = "HttpFetcher__doGet_closure";
  $desc = $collectedClasses.HttpFetcher__doGet_closure[1];
  HttpFetcher__doGet_closure.prototype = $desc;
  HttpFetcher__doGet_closure.$__fields__ = ["_http_fetcher$_captured_completer_0", "_captured_xhr_1"];
  function HttpFetcher__doGet_closure0(_captured_completer_2, _captured_xhr_3) {
    this._captured_completer_2 = _captured_completer_2;
    this._captured_xhr_3 = _captured_xhr_3;
    this.$deferredAction();
  }
  HttpFetcher__doGet_closure0.builtin$cls = "HttpFetcher__doGet_closure0";
  if (!"name" in HttpFetcher__doGet_closure0)
    HttpFetcher__doGet_closure0.name = "HttpFetcher__doGet_closure0";
  $desc = $collectedClasses.HttpFetcher__doGet_closure0[1];
  HttpFetcher__doGet_closure0.prototype = $desc;
  HttpFetcher__doGet_closure0.$__fields__ = ["_captured_completer_2", "_captured_xhr_3"];
  function HttpFetcher__doGet_closure1(_captured_completer_4, _captured_xhr_5) {
    this._captured_completer_4 = _captured_completer_4;
    this._captured_xhr_5 = _captured_xhr_5;
    this.$deferredAction();
  }
  HttpFetcher__doGet_closure1.builtin$cls = "HttpFetcher__doGet_closure1";
  if (!"name" in HttpFetcher__doGet_closure1)
    HttpFetcher__doGet_closure1.name = "HttpFetcher__doGet_closure1";
  $desc = $collectedClasses.HttpFetcher__doGet_closure1[1];
  HttpFetcher__doGet_closure1.prototype = $desc;
  HttpFetcher__doGet_closure1.$__fields__ = ["_captured_completer_4", "_captured_xhr_5"];
  function HttpFetcher_isValidRepoUrl_closure() {
    this.$deferredAction();
  }
  HttpFetcher_isValidRepoUrl_closure.builtin$cls = "HttpFetcher_isValidRepoUrl_closure";
  if (!"name" in HttpFetcher_isValidRepoUrl_closure)
    HttpFetcher_isValidRepoUrl_closure.name = "HttpFetcher_isValidRepoUrl_closure";
  $desc = $collectedClasses.HttpFetcher_isValidRepoUrl_closure[1];
  HttpFetcher_isValidRepoUrl_closure.prototype = $desc;
  HttpFetcher_isValidRepoUrl_closure.$__fields__ = [];
  function HttpFetcher_isValidRepoUrl_closure0() {
    this.$deferredAction();
  }
  HttpFetcher_isValidRepoUrl_closure0.builtin$cls = "HttpFetcher_isValidRepoUrl_closure0";
  if (!"name" in HttpFetcher_isValidRepoUrl_closure0)
    HttpFetcher_isValidRepoUrl_closure0.name = "HttpFetcher_isValidRepoUrl_closure0";
  $desc = $collectedClasses.HttpFetcher_isValidRepoUrl_closure0[1];
  HttpFetcher_isValidRepoUrl_closure0.prototype = $desc;
  HttpFetcher_isValidRepoUrl_closure0.$__fields__ = [];
  function HttpFetcher__makeUri_closure(_captured_options_0) {
    this._captured_options_0 = _captured_options_0;
    this.$deferredAction();
  }
  HttpFetcher__makeUri_closure.builtin$cls = "HttpFetcher__makeUri_closure";
  if (!"name" in HttpFetcher__makeUri_closure)
    HttpFetcher__makeUri_closure.name = "HttpFetcher__makeUri_closure";
  $desc = $collectedClasses.HttpFetcher__makeUri_closure[1];
  HttpFetcher__makeUri_closure.prototype = $desc;
  HttpFetcher__makeUri_closure.$__fields__ = ["_captured_options_0"];
  function HttpFetcher__refWantRequst_closure(_captured_request_0) {
    this._captured_request_0 = _captured_request_0;
    this.$deferredAction();
  }
  HttpFetcher__refWantRequst_closure.builtin$cls = "HttpFetcher__refWantRequst_closure";
  if (!"name" in HttpFetcher__refWantRequst_closure)
    HttpFetcher__refWantRequst_closure.name = "HttpFetcher__refWantRequst_closure";
  $desc = $collectedClasses.HttpFetcher__refWantRequst_closure[1];
  HttpFetcher__refWantRequst_closure.prototype = $desc;
  HttpFetcher__refWantRequst_closure.$__fields__ = ["_captured_request_0"];
  function HttpFetcher__fetchRefs_closure(_http_fetcher$_captured_this_0) {
    this._http_fetcher$_captured_this_0 = _http_fetcher$_captured_this_0;
    this.$deferredAction();
  }
  HttpFetcher__fetchRefs_closure.builtin$cls = "HttpFetcher__fetchRefs_closure";
  if (!"name" in HttpFetcher__fetchRefs_closure)
    HttpFetcher__fetchRefs_closure.name = "HttpFetcher__fetchRefs_closure";
  $desc = $collectedClasses.HttpFetcher__fetchRefs_closure[1];
  HttpFetcher__fetchRefs_closure.prototype = $desc;
  HttpFetcher__fetchRefs_closure.$__fields__ = ["_http_fetcher$_captured_this_0"];
  function HttpFetcher__fetchRefs__closure(_http_fetcher$_captured_this_1) {
    this._http_fetcher$_captured_this_1 = _http_fetcher$_captured_this_1;
    this.$deferredAction();
  }
  HttpFetcher__fetchRefs__closure.builtin$cls = "HttpFetcher__fetchRefs__closure";
  if (!"name" in HttpFetcher__fetchRefs__closure)
    HttpFetcher__fetchRefs__closure.name = "HttpFetcher__fetchRefs__closure";
  $desc = $collectedClasses.HttpFetcher__fetchRefs__closure[1];
  HttpFetcher__fetchRefs__closure.prototype = $desc;
  HttpFetcher__fetchRefs__closure.$__fields__ = ["_http_fetcher$_captured_this_1"];
  function HttpGitException(status, statusText, errorCode, message, canIgnore) {
    this.status = status;
    this.statusText = statusText;
    this.errorCode = errorCode;
    this.message = message;
    this.canIgnore = canIgnore;
    this.$deferredAction();
  }
  HttpGitException.builtin$cls = "HttpGitException";
  if (!"name" in HttpGitException)
    HttpGitException.name = "HttpGitException";
  $desc = $collectedClasses.HttpGitException[1];
  HttpGitException.prototype = $desc;
  HttpGitException.$__fields__ = ["status", "statusText", "errorCode", "message", "canIgnore"];
  HttpGitException.prototype.get$status = function(receiver) {
    return this.status;
  };
  function GitObject(type, data, sha) {
    this.type = type;
    this.data = data;
    this.sha = sha;
    this.$deferredAction();
  }
  GitObject.builtin$cls = "GitObject";
  if (!"name" in GitObject)
    GitObject.name = "GitObject";
  $desc = $collectedClasses.GitObject[1];
  GitObject.prototype = $desc;
  GitObject.$__fields__ = ["type", "data", "sha"];
  GitObject.prototype.get$type = function(receiver) {
    return this.type;
  };
  GitObject.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  GitObject.prototype.get$data = function(receiver) {
    return this.data;
  };
  GitObject.prototype.set$data = function(receiver, v) {
    return this.data = v;
  };
  GitObject.prototype.get$sha = function() {
    return this.sha;
  };
  function TreeEntry(name, shaBytes, isBlob, permission) {
    this.name = name;
    this.shaBytes = shaBytes;
    this.isBlob = isBlob;
    this.permission = permission;
    this.$deferredAction();
  }
  TreeEntry.builtin$cls = "TreeEntry";
  if (!"name" in TreeEntry)
    TreeEntry.name = "TreeEntry";
  $desc = $collectedClasses.TreeEntry[1];
  TreeEntry.prototype = $desc;
  TreeEntry.$__fields__ = ["name", "shaBytes", "isBlob", "permission"];
  TreeEntry.prototype.get$name = function(receiver) {
    return this.name;
  };
  TreeEntry.prototype.get$shaBytes = function() {
    return this.shaBytes;
  };
  TreeEntry.prototype.set$shaBytes = function(v) {
    return this.shaBytes = v;
  };
  TreeEntry.prototype.get$isBlob = function() {
    return this.isBlob;
  };
  TreeEntry.prototype.get$permission = function() {
    return this.permission;
  };
  function ParseError(message) {
    this.message = message;
    this.$deferredAction();
  }
  ParseError.builtin$cls = "ParseError";
  if (!"name" in ParseError)
    ParseError.name = "ParseError";
  $desc = $collectedClasses.ParseError[1];
  ParseError.prototype = $desc;
  ParseError.$__fields__ = ["message"];
  ParseError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function TreeObject(entries, rawObj, type, data, sha) {
    this.entries = entries;
    this.rawObj = rawObj;
    this.type = type;
    this.data = data;
    this.sha = sha;
    this.$deferredAction();
  }
  TreeObject.builtin$cls = "TreeObject";
  if (!"name" in TreeObject)
    TreeObject.name = "TreeObject";
  $desc = $collectedClasses.TreeObject[1];
  TreeObject.prototype = $desc;
  TreeObject.$__fields__ = ["entries", "rawObj", "type", "data", "sha"];
  function TreeObject__parse_closure() {
    this.$deferredAction();
  }
  TreeObject__parse_closure.builtin$cls = "TreeObject__parse_closure";
  if (!"name" in TreeObject__parse_closure)
    TreeObject__parse_closure.name = "TreeObject__parse_closure";
  $desc = $collectedClasses.TreeObject__parse_closure[1];
  TreeObject__parse_closure.prototype = $desc;
  TreeObject__parse_closure.$__fields__ = [];
  function BlobObject(type, data, sha) {
    this.type = type;
    this.data = data;
    this.sha = sha;
    this.$deferredAction();
  }
  BlobObject.builtin$cls = "BlobObject";
  if (!"name" in BlobObject)
    BlobObject.name = "BlobObject";
  $desc = $collectedClasses.BlobObject[1];
  BlobObject.prototype = $desc;
  BlobObject.$__fields__ = ["type", "data", "sha"];
  function Author(name, email, timestamp, date) {
    this.name = name;
    this.email = email;
    this.timestamp = timestamp;
    this.date = date;
    this.$deferredAction();
  }
  Author.builtin$cls = "Author";
  if (!"name" in Author)
    Author.name = "Author";
  $desc = $collectedClasses.Author[1];
  Author.prototype = $desc;
  Author.$__fields__ = ["name", "email", "timestamp", "date"];
  Author.prototype.get$name = function(receiver) {
    return this.name;
  };
  function CommitObject(parents, author, committer, _encoding, message, treeSha, rawObj, type, data, sha) {
    this.parents = parents;
    this.author = author;
    this.committer = committer;
    this._encoding = _encoding;
    this.message = message;
    this.treeSha = treeSha;
    this.rawObj = rawObj;
    this.type = type;
    this.data = data;
    this.sha = sha;
    this.$deferredAction();
  }
  CommitObject.builtin$cls = "CommitObject";
  if (!"name" in CommitObject)
    CommitObject.name = "CommitObject";
  $desc = $collectedClasses.CommitObject[1];
  CommitObject.prototype = $desc;
  CommitObject.$__fields__ = ["parents", "author", "committer", "_encoding", "message", "treeSha", "rawObj", "type", "data", "sha"];
  CommitObject.prototype.get$message = function(receiver) {
    return this.message;
  };
  CommitObject.prototype.get$treeSha = function() {
    return this.treeSha;
  };
  function TagObject(type, data, sha) {
    this.type = type;
    this.data = data;
    this.sha = sha;
    this.$deferredAction();
  }
  TagObject.builtin$cls = "TagObject";
  if (!"name" in TagObject)
    TagObject.name = "TagObject";
  $desc = $collectedClasses.TagObject[1];
  TagObject.prototype = $desc;
  TagObject.$__fields__ = ["type", "data", "sha"];
  function LooseObject(size, type, data, sha) {
    this.size = size;
    this.type = type;
    this.data = data;
    this.sha = sha;
    this.$deferredAction();
  }
  LooseObject.builtin$cls = "LooseObject";
  if (!"name" in LooseObject)
    LooseObject.name = "LooseObject";
  $desc = $collectedClasses.LooseObject[1];
  LooseObject.prototype = $desc;
  LooseObject.$__fields__ = ["size", "type", "data", "sha"];
  LooseObject.prototype.get$size = function(receiver) {
    return this.size;
  };
  function PackedObject(shaBytes, baseSha, crc, offset, desiredOffset, type, data, sha) {
    this.shaBytes = shaBytes;
    this.baseSha = baseSha;
    this.crc = crc;
    this.offset = offset;
    this.desiredOffset = desiredOffset;
    this.type = type;
    this.data = data;
    this.sha = sha;
    this.$deferredAction();
  }
  PackedObject.builtin$cls = "PackedObject";
  if (!"name" in PackedObject)
    PackedObject.name = "PackedObject";
  $desc = $collectedClasses.PackedObject[1];
  PackedObject.prototype = $desc;
  PackedObject.$__fields__ = ["shaBytes", "baseSha", "crc", "offset", "desiredOffset", "type", "data", "sha"];
  PackedObject.prototype.get$shaBytes = function() {
    return this.shaBytes;
  };
  PackedObject.prototype.set$shaBytes = function(v) {
    return this.shaBytes = v;
  };
  PackedObject.prototype.get$crc = function() {
    return this.crc;
  };
  PackedObject.prototype.set$crc = function(v) {
    return this.crc = v;
  };
  PackedObject.prototype.get$offset = function(receiver) {
    return this.offset;
  };
  PackedObject.prototype.get$desiredOffset = function() {
    return this.desiredOffset;
  };
  function ObjectUtils_expandBlob_closure(_utils2$_captured_dir_0, _utils2$_captured_store_1, _captured_fileName_2, _captured_blobSha_3, _captured_permission_4) {
    this._utils2$_captured_dir_0 = _utils2$_captured_dir_0;
    this._utils2$_captured_store_1 = _utils2$_captured_store_1;
    this._captured_fileName_2 = _captured_fileName_2;
    this._captured_blobSha_3 = _captured_blobSha_3;
    this._captured_permission_4 = _captured_permission_4;
    this.$deferredAction();
  }
  ObjectUtils_expandBlob_closure.builtin$cls = "ObjectUtils_expandBlob_closure";
  if (!"name" in ObjectUtils_expandBlob_closure)
    ObjectUtils_expandBlob_closure.name = "ObjectUtils_expandBlob_closure";
  $desc = $collectedClasses.ObjectUtils_expandBlob_closure[1];
  ObjectUtils_expandBlob_closure.prototype = $desc;
  ObjectUtils_expandBlob_closure.$__fields__ = ["_utils2$_captured_dir_0", "_utils2$_captured_store_1", "_captured_fileName_2", "_captured_blobSha_3", "_captured_permission_4"];
  function ObjectUtils_expandBlob__closure(_captured_store_5, _captured_blobSha_6, _captured_permission_7) {
    this._captured_store_5 = _captured_store_5;
    this._captured_blobSha_6 = _captured_blobSha_6;
    this._captured_permission_7 = _captured_permission_7;
    this.$deferredAction();
  }
  ObjectUtils_expandBlob__closure.builtin$cls = "ObjectUtils_expandBlob__closure";
  if (!"name" in ObjectUtils_expandBlob__closure)
    ObjectUtils_expandBlob__closure.name = "ObjectUtils_expandBlob__closure";
  $desc = $collectedClasses.ObjectUtils_expandBlob__closure[1];
  ObjectUtils_expandBlob__closure.prototype = $desc;
  ObjectUtils_expandBlob__closure.$__fields__ = ["_captured_store_5", "_captured_blobSha_6", "_captured_permission_7"];
  function ObjectUtils_expandBlob___closure(_captured_store_8, _captured_blobSha_9, _captured_permission_10, _captured_entry_11) {
    this._captured_store_8 = _captured_store_8;
    this._captured_blobSha_9 = _captured_blobSha_9;
    this._captured_permission_10 = _captured_permission_10;
    this._captured_entry_11 = _captured_entry_11;
    this.$deferredAction();
  }
  ObjectUtils_expandBlob___closure.builtin$cls = "ObjectUtils_expandBlob___closure";
  if (!"name" in ObjectUtils_expandBlob___closure)
    ObjectUtils_expandBlob___closure.name = "ObjectUtils_expandBlob___closure";
  $desc = $collectedClasses.ObjectUtils_expandBlob___closure[1];
  ObjectUtils_expandBlob___closure.prototype = $desc;
  ObjectUtils_expandBlob___closure.$__fields__ = ["_captured_store_8", "_captured_blobSha_9", "_captured_permission_10", "_captured_entry_11"];
  function ObjectUtils_expandTree_closure(_utils2$_captured_dir_0, _utils2$_captured_store_1) {
    this._utils2$_captured_dir_0 = _utils2$_captured_dir_0;
    this._utils2$_captured_store_1 = _utils2$_captured_store_1;
    this.$deferredAction();
  }
  ObjectUtils_expandTree_closure.builtin$cls = "ObjectUtils_expandTree_closure";
  if (!"name" in ObjectUtils_expandTree_closure)
    ObjectUtils_expandTree_closure.name = "ObjectUtils_expandTree_closure";
  $desc = $collectedClasses.ObjectUtils_expandTree_closure[1];
  ObjectUtils_expandTree_closure.prototype = $desc;
  ObjectUtils_expandTree_closure.$__fields__ = ["_utils2$_captured_dir_0", "_utils2$_captured_store_1"];
  function ObjectUtils_expandTree__closure(_captured_dir_2, _captured_store_3) {
    this._captured_dir_2 = _captured_dir_2;
    this._captured_store_3 = _captured_store_3;
    this.$deferredAction();
  }
  ObjectUtils_expandTree__closure.builtin$cls = "ObjectUtils_expandTree__closure";
  if (!"name" in ObjectUtils_expandTree__closure)
    ObjectUtils_expandTree__closure.name = "ObjectUtils_expandTree__closure";
  $desc = $collectedClasses.ObjectUtils_expandTree__closure[1];
  ObjectUtils_expandTree__closure.prototype = $desc;
  ObjectUtils_expandTree__closure.$__fields__ = ["_captured_dir_2", "_captured_store_3"];
  function ObjectUtils_expandTree___closure(_utils2$_captured_store_4, _utils2$_captured_entry_5) {
    this._utils2$_captured_store_4 = _utils2$_captured_store_4;
    this._utils2$_captured_entry_5 = _utils2$_captured_entry_5;
    this.$deferredAction();
  }
  ObjectUtils_expandTree___closure.builtin$cls = "ObjectUtils_expandTree___closure";
  if (!"name" in ObjectUtils_expandTree___closure)
    ObjectUtils_expandTree___closure.name = "ObjectUtils_expandTree___closure";
  $desc = $collectedClasses.ObjectUtils_expandTree___closure[1];
  ObjectUtils_expandTree___closure.prototype = $desc;
  ObjectUtils_expandTree___closure.$__fields__ = ["_utils2$_captured_store_4", "_utils2$_captured_entry_5"];
  function GitRef(sha, name, type, head, localHead, remote) {
    this.sha = sha;
    this.name = name;
    this.type = type;
    this.head = head;
    this.localHead = localHead;
    this.remote = remote;
    this.$deferredAction();
  }
  GitRef.builtin$cls = "GitRef";
  if (!"name" in GitRef)
    GitRef.name = "GitRef";
  $desc = $collectedClasses.GitRef[1];
  GitRef.prototype = $desc;
  GitRef.$__fields__ = ["sha", "name", "type", "head", "localHead", "remote"];
  GitRef.prototype.get$sha = function() {
    return this.sha;
  };
  GitRef.prototype.get$name = function(receiver) {
    return this.name;
  };
  GitRef.prototype.get$type = function(receiver) {
    return this.type;
  };
  GitRef.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  function PackEntry(pack, packIdx) {
    this.pack = pack;
    this.packIdx = packIdx;
    this.$deferredAction();
  }
  PackEntry.builtin$cls = "PackEntry";
  if (!"name" in PackEntry)
    PackEntry.name = "PackEntry";
  $desc = $collectedClasses.PackEntry[1];
  PackEntry.prototype = $desc;
  PackEntry.$__fields__ = ["pack", "packIdx"];
  PackEntry.prototype.get$pack = function() {
    return this.pack;
  };
  function FindPackedObjectResult(pack, offset) {
    this.pack = pack;
    this.offset = offset;
    this.$deferredAction();
  }
  FindPackedObjectResult.builtin$cls = "FindPackedObjectResult";
  if (!"name" in FindPackedObjectResult)
    FindPackedObjectResult.name = "FindPackedObjectResult";
  $desc = $collectedClasses.FindPackedObjectResult[1];
  FindPackedObjectResult.prototype = $desc;
  FindPackedObjectResult.$__fields__ = ["pack", "offset"];
  FindPackedObjectResult.prototype.get$pack = function() {
    return this.pack;
  };
  FindPackedObjectResult.prototype.get$offset = function(receiver) {
    return this.offset;
  };
  function ObjectStore(_rootDir, objectDir, gitPath, packs, config, index) {
    this._rootDir = _rootDir;
    this.objectDir = objectDir;
    this.gitPath = gitPath;
    this.packs = packs;
    this.config = config;
    this.index = index;
    this.$deferredAction();
  }
  ObjectStore.builtin$cls = "ObjectStore";
  if (!"name" in ObjectStore)
    ObjectStore.name = "ObjectStore";
  $desc = $collectedClasses.ObjectStore[1];
  ObjectStore.prototype = $desc;
  ObjectStore.$__fields__ = ["_rootDir", "objectDir", "gitPath", "packs", "config", "index"];
  ObjectStore.prototype.set$objectDir = function(v) {
    return this.objectDir = v;
  };
  ObjectStore.prototype.get$packs = function() {
    return this.packs;
  };
  ObjectStore.prototype.get$index = function(receiver) {
    return this.index;
  };
  function ObjectStore_clearRemoteRefs_closure() {
    this.$deferredAction();
  }
  ObjectStore_clearRemoteRefs_closure.builtin$cls = "ObjectStore_clearRemoteRefs_closure";
  if (!"name" in ObjectStore_clearRemoteRefs_closure)
    ObjectStore_clearRemoteRefs_closure.name = "ObjectStore_clearRemoteRefs_closure";
  $desc = $collectedClasses.ObjectStore_clearRemoteRefs_closure[1];
  ObjectStore_clearRemoteRefs_closure.prototype = $desc;
  ObjectStore_clearRemoteRefs_closure.$__fields__ = [];
  function ObjectStore_clearRemoteRefs_closure0() {
    this.$deferredAction();
  }
  ObjectStore_clearRemoteRefs_closure0.builtin$cls = "ObjectStore_clearRemoteRefs_closure0";
  if (!"name" in ObjectStore_clearRemoteRefs_closure0)
    ObjectStore_clearRemoteRefs_closure0.name = "ObjectStore_clearRemoteRefs_closure0";
  $desc = $collectedClasses.ObjectStore_clearRemoteRefs_closure0[1];
  ObjectStore_clearRemoteRefs_closure0.prototype = $desc;
  ObjectStore_clearRemoteRefs_closure0.$__fields__ = [];
  function ObjectStore_writeRemoteRefs_closure(_objectstore$_captured_this_0, _captured_refs_1) {
    this._objectstore$_captured_this_0 = _objectstore$_captured_this_0;
    this._captured_refs_1 = _captured_refs_1;
    this.$deferredAction();
  }
  ObjectStore_writeRemoteRefs_closure.builtin$cls = "ObjectStore_writeRemoteRefs_closure";
  if (!"name" in ObjectStore_writeRemoteRefs_closure)
    ObjectStore_writeRemoteRefs_closure.name = "ObjectStore_writeRemoteRefs_closure";
  $desc = $collectedClasses.ObjectStore_writeRemoteRefs_closure[1];
  ObjectStore_writeRemoteRefs_closure.prototype = $desc;
  ObjectStore_writeRemoteRefs_closure.$__fields__ = ["_objectstore$_captured_this_0", "_captured_refs_1"];
  function ObjectStore_writeRemoteRefs__closure(_objectstore$_captured_this_2) {
    this._objectstore$_captured_this_2 = _objectstore$_captured_this_2;
    this.$deferredAction();
  }
  ObjectStore_writeRemoteRefs__closure.builtin$cls = "ObjectStore_writeRemoteRefs__closure";
  if (!"name" in ObjectStore_writeRemoteRefs__closure)
    ObjectStore_writeRemoteRefs__closure.name = "ObjectStore_writeRemoteRefs__closure";
  $desc = $collectedClasses.ObjectStore_writeRemoteRefs__closure[1];
  ObjectStore_writeRemoteRefs__closure.prototype = $desc;
  ObjectStore_writeRemoteRefs__closure.$__fields__ = ["_objectstore$_captured_this_2"];
  function ObjectStore_retrieveObject_closure(_captured_sha_0, _captured_objType_1) {
    this._captured_sha_0 = _captured_sha_0;
    this._captured_objType_1 = _captured_objType_1;
    this.$deferredAction();
  }
  ObjectStore_retrieveObject_closure.builtin$cls = "ObjectStore_retrieveObject_closure";
  if (!"name" in ObjectStore_retrieveObject_closure)
    ObjectStore_retrieveObject_closure.name = "ObjectStore_retrieveObject_closure";
  $desc = $collectedClasses.ObjectStore_retrieveObject_closure[1];
  ObjectStore_retrieveObject_closure.prototype = $desc;
  ObjectStore_retrieveObject_closure.$__fields__ = ["_captured_sha_0", "_captured_objType_1"];
  function ObjectStore_retrieveRawObject_closure(_objectstore$_box_0) {
    this._objectstore$_box_0 = _objectstore$_box_0;
    this.$deferredAction();
  }
  ObjectStore_retrieveRawObject_closure.builtin$cls = "ObjectStore_retrieveRawObject_closure";
  if (!"name" in ObjectStore_retrieveRawObject_closure)
    ObjectStore_retrieveRawObject_closure.name = "ObjectStore_retrieveRawObject_closure";
  $desc = $collectedClasses.ObjectStore_retrieveRawObject_closure[1];
  ObjectStore_retrieveRawObject_closure.prototype = $desc;
  ObjectStore_retrieveRawObject_closure.$__fields__ = ["_objectstore$_box_0"];
  function ObjectStore_retrieveRawObject__closure0(_objectstore$_box_0) {
    this._objectstore$_box_0 = _objectstore$_box_0;
    this.$deferredAction();
  }
  ObjectStore_retrieveRawObject__closure0.builtin$cls = "ObjectStore_retrieveRawObject__closure0";
  if (!"name" in ObjectStore_retrieveRawObject__closure0)
    ObjectStore_retrieveRawObject__closure0.name = "ObjectStore_retrieveRawObject__closure0";
  $desc = $collectedClasses.ObjectStore_retrieveRawObject__closure0[1];
  ObjectStore_retrieveRawObject__closure0.prototype = $desc;
  ObjectStore_retrieveRawObject__closure0.$__fields__ = ["_objectstore$_box_0"];
  function ObjectStore_retrieveRawObject___closure0() {
    this.$deferredAction();
  }
  ObjectStore_retrieveRawObject___closure0.builtin$cls = "ObjectStore_retrieveRawObject___closure0";
  if (!"name" in ObjectStore_retrieveRawObject___closure0)
    ObjectStore_retrieveRawObject___closure0.name = "ObjectStore_retrieveRawObject___closure0";
  $desc = $collectedClasses.ObjectStore_retrieveRawObject___closure0[1];
  ObjectStore_retrieveRawObject___closure0.prototype = $desc;
  ObjectStore_retrieveRawObject___closure0.$__fields__ = [];
  function ObjectStore_retrieveRawObject_closure0(_objectstore$_box_0, _objectstore$_captured_this_1) {
    this._objectstore$_box_0 = _objectstore$_box_0;
    this._objectstore$_captured_this_1 = _objectstore$_captured_this_1;
    this.$deferredAction();
  }
  ObjectStore_retrieveRawObject_closure0.builtin$cls = "ObjectStore_retrieveRawObject_closure0";
  if (!"name" in ObjectStore_retrieveRawObject_closure0)
    ObjectStore_retrieveRawObject_closure0.name = "ObjectStore_retrieveRawObject_closure0";
  $desc = $collectedClasses.ObjectStore_retrieveRawObject_closure0[1];
  ObjectStore_retrieveRawObject_closure0.prototype = $desc;
  ObjectStore_retrieveRawObject_closure0.$__fields__ = ["_objectstore$_box_0", "_objectstore$_captured_this_1"];
  function ObjectStore_retrieveRawObject__closure(_objectstore$_box_0) {
    this._objectstore$_box_0 = _objectstore$_box_0;
    this.$deferredAction();
  }
  ObjectStore_retrieveRawObject__closure.builtin$cls = "ObjectStore_retrieveRawObject__closure";
  if (!"name" in ObjectStore_retrieveRawObject__closure)
    ObjectStore_retrieveRawObject__closure.name = "ObjectStore_retrieveRawObject__closure";
  $desc = $collectedClasses.ObjectStore_retrieveRawObject__closure[1];
  ObjectStore_retrieveRawObject__closure.prototype = $desc;
  ObjectStore_retrieveRawObject__closure.$__fields__ = ["_objectstore$_box_0"];
  function ObjectStore_retrieveRawObject___closure(_captured_packed_2) {
    this._captured_packed_2 = _captured_packed_2;
    this.$deferredAction();
  }
  ObjectStore_retrieveRawObject___closure.builtin$cls = "ObjectStore_retrieveRawObject___closure";
  if (!"name" in ObjectStore_retrieveRawObject___closure)
    ObjectStore_retrieveRawObject___closure.name = "ObjectStore_retrieveRawObject___closure";
  $desc = $collectedClasses.ObjectStore_retrieveRawObject___closure[1];
  ObjectStore_retrieveRawObject___closure.prototype = $desc;
  ObjectStore_retrieveRawObject___closure.$__fields__ = ["_captured_packed_2"];
  function GitOptions(root, username, password, repoUrl, branchName, store, email, commitMessage, name, depth, progressCallback) {
    this.root = root;
    this.username = username;
    this.password = password;
    this.repoUrl = repoUrl;
    this.branchName = branchName;
    this.store = store;
    this.email = email;
    this.commitMessage = commitMessage;
    this.name = name;
    this.depth = depth;
    this.progressCallback = progressCallback;
    this.$deferredAction();
  }
  GitOptions.builtin$cls = "GitOptions";
  if (!"name" in GitOptions)
    GitOptions.name = "GitOptions";
  $desc = $collectedClasses.GitOptions[1];
  GitOptions.prototype = $desc;
  GitOptions.$__fields__ = ["root", "username", "password", "repoUrl", "branchName", "store", "email", "commitMessage", "name", "depth", "progressCallback"];
  GitOptions.prototype.get$root = function(receiver) {
    return this.root;
  };
  GitOptions.prototype.get$name = function(receiver) {
    return this.name;
  };
  function PackObjectHeader(size, type, offset) {
    this.size = size;
    this.type = type;
    this.offset = offset;
    this.$deferredAction();
  }
  PackObjectHeader.builtin$cls = "PackObjectHeader";
  if (!"name" in PackObjectHeader)
    PackObjectHeader.name = "PackObjectHeader";
  $desc = $collectedClasses.PackObjectHeader[1];
  PackObjectHeader.prototype = $desc;
  PackObjectHeader.$__fields__ = ["size", "type", "offset"];
  PackObjectHeader.prototype.get$size = function(receiver) {
    return this.size;
  };
  PackObjectHeader.prototype.get$type = function(receiver) {
    return this.type;
  };
  PackObjectHeader.prototype.get$offset = function(receiver) {
    return this.offset;
  };
  function Pack(data, _pack$_offset, _pack$_store, objects, _pack$_cancel) {
    this.data = data;
    this._pack$_offset = _pack$_offset;
    this._pack$_store = _pack$_store;
    this.objects = objects;
    this._pack$_cancel = _pack$_cancel;
    this.$deferredAction();
  }
  Pack.builtin$cls = "Pack";
  if (!"name" in Pack)
    Pack.name = "Pack";
  $desc = $collectedClasses.Pack[1];
  Pack.prototype = $desc;
  Pack.$__fields__ = ["data", "_pack$_offset", "_pack$_store", "objects", "_pack$_cancel"];
  Pack.prototype.get$data = function(receiver) {
    return this.data;
  };
  Pack.prototype.get$objects = function() {
    return this.objects;
  };
  function Pack__matchNumberOfObjects_closure(_pack$_box_0) {
    this._pack$_box_0 = _pack$_box_0;
    this.$deferredAction();
  }
  Pack__matchNumberOfObjects_closure.builtin$cls = "Pack__matchNumberOfObjects_closure";
  if (!"name" in Pack__matchNumberOfObjects_closure)
    Pack__matchNumberOfObjects_closure.name = "Pack__matchNumberOfObjects_closure";
  $desc = $collectedClasses.Pack__matchNumberOfObjects_closure[1];
  Pack__matchNumberOfObjects_closure.prototype = $desc;
  Pack__matchNumberOfObjects_closure.$__fields__ = ["_pack$_box_0"];
  function Pack_findDeltaBaseOffset_closure() {
    this.$deferredAction();
  }
  Pack_findDeltaBaseOffset_closure.builtin$cls = "Pack_findDeltaBaseOffset_closure";
  if (!"name" in Pack_findDeltaBaseOffset_closure)
    Pack_findDeltaBaseOffset_closure.name = "Pack_findDeltaBaseOffset_closure";
  $desc = $collectedClasses.Pack_findDeltaBaseOffset_closure[1];
  Pack_findDeltaBaseOffset_closure.prototype = $desc;
  Pack_findDeltaBaseOffset_closure.$__fields__ = [];
  function Pack_expandDeltifiedObject_doExpand(_pack$_captured_this_0) {
    this._pack$_captured_this_0 = _pack$_captured_this_0;
    this.$deferredAction();
  }
  Pack_expandDeltifiedObject_doExpand.builtin$cls = "Pack_expandDeltifiedObject_doExpand";
  if (!"name" in Pack_expandDeltifiedObject_doExpand)
    Pack_expandDeltifiedObject_doExpand.name = "Pack_expandDeltifiedObject_doExpand";
  $desc = $collectedClasses.Pack_expandDeltifiedObject_doExpand[1];
  Pack_expandDeltifiedObject_doExpand.prototype = $desc;
  Pack_expandDeltifiedObject_doExpand.$__fields__ = ["_pack$_captured_this_0"];
  function Pack_expandDeltifiedObject_closure(_captured_object_1, _captured_doExpand_2) {
    this._captured_object_1 = _captured_object_1;
    this._captured_doExpand_2 = _captured_doExpand_2;
    this.$deferredAction();
  }
  Pack_expandDeltifiedObject_closure.builtin$cls = "Pack_expandDeltifiedObject_closure";
  if (!"name" in Pack_expandDeltifiedObject_closure)
    Pack_expandDeltifiedObject_closure.name = "Pack_expandDeltifiedObject_closure";
  $desc = $collectedClasses.Pack_expandDeltifiedObject_closure[1];
  Pack_expandDeltifiedObject_closure.prototype = $desc;
  Pack_expandDeltifiedObject_closure.$__fields__ = ["_captured_object_1", "_captured_doExpand_2"];
  function Pack__matchObjectData_closure(_pack$_captured_this_0) {
    this._pack$_captured_this_0 = _pack$_captured_this_0;
    this.$deferredAction();
  }
  Pack__matchObjectData_closure.builtin$cls = "Pack__matchObjectData_closure";
  if (!"name" in Pack__matchObjectData_closure)
    Pack__matchObjectData_closure.name = "Pack__matchObjectData_closure";
  $desc = $collectedClasses.Pack__matchObjectData_closure[1];
  Pack__matchObjectData_closure.prototype = $desc;
  Pack__matchObjectData_closure.$__fields__ = ["_pack$_captured_this_0"];
  function Pack_parseAll_parse(_pack$_captured_this_0, _captured_deferredObjects_1) {
    this._pack$_captured_this_0 = _pack$_captured_this_0;
    this._captured_deferredObjects_1 = _captured_deferredObjects_1;
    this.$deferredAction();
  }
  Pack_parseAll_parse.builtin$cls = "Pack_parseAll_parse";
  if (!"name" in Pack_parseAll_parse)
    Pack_parseAll_parse.name = "Pack_parseAll_parse";
  $desc = $collectedClasses.Pack_parseAll_parse[1];
  Pack_parseAll_parse.prototype = $desc;
  Pack_parseAll_parse.$__fields__ = ["_pack$_captured_this_0", "_captured_deferredObjects_1"];
  function Pack_parseAll_expandDeltified(_pack$_captured_this_2) {
    this._pack$_captured_this_2 = _pack$_captured_this_2;
    this.$deferredAction();
  }
  Pack_parseAll_expandDeltified.builtin$cls = "Pack_parseAll_expandDeltified";
  if (!"name" in Pack_parseAll_expandDeltified)
    Pack_parseAll_expandDeltified.name = "Pack_parseAll_expandDeltified";
  $desc = $collectedClasses.Pack_parseAll_expandDeltified[1];
  Pack_parseAll_expandDeltified.prototype = $desc;
  Pack_parseAll_expandDeltified.$__fields__ = ["_pack$_captured_this_2"];
  function Pack_parseAll_expandDeltified_closure(_pack$_captured_this_3) {
    this._pack$_captured_this_3 = _pack$_captured_this_3;
    this.$deferredAction();
  }
  Pack_parseAll_expandDeltified_closure.builtin$cls = "Pack_parseAll_expandDeltified_closure";
  if (!"name" in Pack_parseAll_expandDeltified_closure)
    Pack_parseAll_expandDeltified_closure.name = "Pack_parseAll_expandDeltified_closure";
  $desc = $collectedClasses.Pack_parseAll_expandDeltified_closure[1];
  Pack_parseAll_expandDeltified_closure.prototype = $desc;
  Pack_parseAll_expandDeltified_closure.$__fields__ = ["_pack$_captured_this_3"];
  function Pack_parseAll_closure(_captured_deferredObjects_4, _captured_expandDeltified_5) {
    this._captured_deferredObjects_4 = _captured_deferredObjects_4;
    this._captured_expandDeltified_5 = _captured_expandDeltified_5;
    this.$deferredAction();
  }
  Pack_parseAll_closure.builtin$cls = "Pack_parseAll_closure";
  if (!"name" in Pack_parseAll_closure)
    Pack_parseAll_closure.name = "Pack_parseAll_closure";
  $desc = $collectedClasses.Pack_parseAll_closure[1];
  Pack_parseAll_closure.prototype = $desc;
  Pack_parseAll_closure.$__fields__ = ["_captured_deferredObjects_4", "_captured_expandDeltified_5"];
  function Pack_applyDelta_matchLength() {
    this.$deferredAction();
  }
  Pack_applyDelta_matchLength.builtin$cls = "Pack_applyDelta_matchLength";
  if (!"name" in Pack_applyDelta_matchLength)
    Pack_applyDelta_matchLength.name = "Pack_applyDelta_matchLength";
  $desc = $collectedClasses.Pack_applyDelta_matchLength[1];
  Pack_applyDelta_matchLength.prototype = $desc;
  Pack_applyDelta_matchLength.$__fields__ = [];
  function Pack_createPackFiles_closure(_pack$_captured_store_0, _pack$_captured_result_1, _captured_packIdxData_2, _captured_packName_3) {
    this._pack$_captured_store_0 = _pack$_captured_store_0;
    this._pack$_captured_result_1 = _pack$_captured_result_1;
    this._captured_packIdxData_2 = _captured_packIdxData_2;
    this._captured_packName_3 = _captured_packName_3;
    this.$deferredAction();
  }
  Pack_createPackFiles_closure.builtin$cls = "Pack_createPackFiles_closure";
  if (!"name" in Pack_createPackFiles_closure)
    Pack_createPackFiles_closure.name = "Pack_createPackFiles_closure";
  $desc = $collectedClasses.Pack_createPackFiles_closure[1];
  Pack_createPackFiles_closure.prototype = $desc;
  Pack_createPackFiles_closure.$__fields__ = ["_pack$_captured_store_0", "_pack$_captured_result_1", "_captured_packIdxData_2", "_captured_packName_3"];
  function Pack_createPackFiles__closure(_captured_store_4, _captured_result_5, _captured_packIdxData_6, _captured_packName_7, _captured_objectsDir_8) {
    this._captured_store_4 = _captured_store_4;
    this._captured_result_5 = _captured_result_5;
    this._captured_packIdxData_6 = _captured_packIdxData_6;
    this._captured_packName_7 = _captured_packName_7;
    this._captured_objectsDir_8 = _captured_objectsDir_8;
    this.$deferredAction();
  }
  Pack_createPackFiles__closure.builtin$cls = "Pack_createPackFiles__closure";
  if (!"name" in Pack_createPackFiles__closure)
    Pack_createPackFiles__closure.name = "Pack_createPackFiles__closure";
  $desc = $collectedClasses.Pack_createPackFiles__closure[1];
  Pack_createPackFiles__closure.prototype = $desc;
  Pack_createPackFiles__closure.$__fields__ = ["_captured_store_4", "_captured_result_5", "_captured_packIdxData_6", "_captured_packName_7", "_captured_objectsDir_8"];
  function Pack_createPackFiles___closure(_captured_store_9, _captured_result_10, _captured_packIdxData_11, _captured_objectsDir_12) {
    this._captured_store_9 = _captured_store_9;
    this._captured_result_10 = _captured_result_10;
    this._captured_packIdxData_11 = _captured_packIdxData_11;
    this._captured_objectsDir_12 = _captured_objectsDir_12;
    this.$deferredAction();
  }
  Pack_createPackFiles___closure.builtin$cls = "Pack_createPackFiles___closure";
  if (!"name" in Pack_createPackFiles___closure)
    Pack_createPackFiles___closure.name = "Pack_createPackFiles___closure";
  $desc = $collectedClasses.Pack_createPackFiles___closure[1];
  Pack_createPackFiles___closure.prototype = $desc;
  Pack_createPackFiles___closure.$__fields__ = ["_captured_store_9", "_captured_result_10", "_captured_packIdxData_11", "_captured_objectsDir_12"];
  function DeltaDataStream(data, offset) {
    this.data = data;
    this.offset = offset;
    this.$deferredAction();
  }
  DeltaDataStream.builtin$cls = "DeltaDataStream";
  if (!"name" in DeltaDataStream)
    DeltaDataStream.name = "DeltaDataStream";
  $desc = $collectedClasses.DeltaDataStream[1];
  DeltaDataStream.prototype = $desc;
  DeltaDataStream.$__fields__ = ["data", "offset"];
  DeltaDataStream.prototype.get$data = function(receiver) {
    return this.data;
  };
  DeltaDataStream.prototype.get$offset = function(receiver) {
    return this.offset;
  };
  function PackIndex(_byteData, _shaList, _numObjects, _offsetsOffset) {
    this._byteData = _byteData;
    this._shaList = _shaList;
    this._numObjects = _numObjects;
    this._offsetsOffset = _offsetsOffset;
    this.$deferredAction();
  }
  PackIndex.builtin$cls = "PackIndex";
  if (!"name" in PackIndex)
    PackIndex.name = "PackIndex";
  $desc = $collectedClasses.PackIndex[1];
  PackIndex.prototype = $desc;
  PackIndex.$__fields__ = ["_byteData", "_shaList", "_numObjects", "_offsetsOffset"];
  function PackIndex_writePackIndex_closure() {
    this.$deferredAction();
  }
  PackIndex_writePackIndex_closure.builtin$cls = "PackIndex_writePackIndex_closure";
  if (!"name" in PackIndex_writePackIndex_closure)
    PackIndex_writePackIndex_closure.name = "PackIndex_writePackIndex_closure";
  $desc = $collectedClasses.PackIndex_writePackIndex_closure[1];
  PackIndex_writePackIndex_closure.prototype = $desc;
  PackIndex_writePackIndex_closure.$__fields__ = [];
  function PackIndex_writePackIndex_closure0(_index$_box_0, _captured_data_1) {
    this._index$_box_0 = _index$_box_0;
    this._captured_data_1 = _captured_data_1;
    this.$deferredAction();
  }
  PackIndex_writePackIndex_closure0.builtin$cls = "PackIndex_writePackIndex_closure0";
  if (!"name" in PackIndex_writePackIndex_closure0)
    PackIndex_writePackIndex_closure0.name = "PackIndex_writePackIndex_closure0";
  $desc = $collectedClasses.PackIndex_writePackIndex_closure0[1];
  PackIndex_writePackIndex_closure0.prototype = $desc;
  PackIndex_writePackIndex_closure0.$__fields__ = ["_index$_box_0", "_captured_data_1"];
  function PackIndex_writePackIndex_closure1(_index$_box_0, _captured_data_2) {
    this._index$_box_0 = _index$_box_0;
    this._captured_data_2 = _captured_data_2;
    this.$deferredAction();
  }
  PackIndex_writePackIndex_closure1.builtin$cls = "PackIndex_writePackIndex_closure1";
  if (!"name" in PackIndex_writePackIndex_closure1)
    PackIndex_writePackIndex_closure1.name = "PackIndex_writePackIndex_closure1";
  $desc = $collectedClasses.PackIndex_writePackIndex_closure1[1];
  PackIndex_writePackIndex_closure1.prototype = $desc;
  PackIndex_writePackIndex_closure1.$__fields__ = ["_index$_box_0", "_captured_data_2"];
  function PackIndex_writePackIndex_closure2(_index$_box_0, _captured_data_3) {
    this._index$_box_0 = _index$_box_0;
    this._captured_data_3 = _captured_data_3;
    this.$deferredAction();
  }
  PackIndex_writePackIndex_closure2.builtin$cls = "PackIndex_writePackIndex_closure2";
  if (!"name" in PackIndex_writePackIndex_closure2)
    PackIndex_writePackIndex_closure2.name = "PackIndex_writePackIndex_closure2";
  $desc = $collectedClasses.PackIndex_writePackIndex_closure2[1];
  PackIndex_writePackIndex_closure2.prototype = $desc;
  PackIndex_writePackIndex_closure2.$__fields__ = ["_index$_box_0", "_captured_data_3"];
  function PackIndex_writePackIndex_closure3(_index$_box_0, _captured_data_4) {
    this._index$_box_0 = _index$_box_0;
    this._captured_data_4 = _captured_data_4;
    this.$deferredAction();
  }
  PackIndex_writePackIndex_closure3.builtin$cls = "PackIndex_writePackIndex_closure3";
  if (!"name" in PackIndex_writePackIndex_closure3)
    PackIndex_writePackIndex_closure3.name = "PackIndex_writePackIndex_closure3";
  $desc = $collectedClasses.PackIndex_writePackIndex_closure3[1];
  PackIndex_writePackIndex_closure3.prototype = $desc;
  PackIndex_writePackIndex_closure3.$__fields__ = ["_index$_box_0", "_captured_data_4"];
  function PktLine(offset, length) {
    this.offset = offset;
    this.length = length;
    this.$deferredAction();
  }
  PktLine.builtin$cls = "PktLine";
  if (!"name" in PktLine)
    PktLine.name = "PktLine";
  $desc = $collectedClasses.PktLine[1];
  PktLine.prototype = $desc;
  PktLine.$__fields__ = ["offset", "length"];
  PktLine.prototype.get$offset = function(receiver) {
    return this.offset;
  };
  PktLine.prototype.get$length = function(receiver) {
    return this.length;
  };
  function PackParseResult(objects, shallow, common, data) {
    this.objects = objects;
    this.shallow = shallow;
    this.common = common;
    this.data = data;
    this.$deferredAction();
  }
  PackParseResult.builtin$cls = "PackParseResult";
  if (!"name" in PackParseResult)
    PackParseResult.name = "PackParseResult";
  $desc = $collectedClasses.PackParseResult[1];
  PackParseResult.prototype = $desc;
  PackParseResult.$__fields__ = ["objects", "shallow", "common", "data"];
  PackParseResult.prototype.get$objects = function() {
    return this.objects;
  };
  PackParseResult.prototype.get$shallow = function() {
    return this.shallow;
  };
  PackParseResult.prototype.get$data = function(receiver) {
    return this.data;
  };
  function UploadPackParser(_upload_pack_parser$_offset, objects, data, _upload_pack_parser$_cancel) {
    this._upload_pack_parser$_offset = _upload_pack_parser$_offset;
    this.objects = objects;
    this.data = data;
    this._upload_pack_parser$_cancel = _upload_pack_parser$_cancel;
    this.$deferredAction();
  }
  UploadPackParser.builtin$cls = "UploadPackParser";
  if (!"name" in UploadPackParser)
    UploadPackParser.name = "UploadPackParser";
  $desc = $collectedClasses.UploadPackParser[1];
  UploadPackParser.prototype = $desc;
  UploadPackParser.$__fields__ = ["_upload_pack_parser$_offset", "objects", "data", "_upload_pack_parser$_cancel"];
  UploadPackParser.prototype.get$objects = function() {
    return this.objects;
  };
  UploadPackParser.prototype.get$data = function(receiver) {
    return this.data;
  };
  UploadPackParser.prototype.set$data = function(receiver, v) {
    return this.data = v;
  };
  function UploadPackParser_parse_closure(_upload_pack_parser$_box_0, _upload_pack_parser$_captured_this_1, _upload_pack_parser$_captured_store_2, _captured_progress_3, _captured_common_4) {
    this._upload_pack_parser$_box_0 = _upload_pack_parser$_box_0;
    this._upload_pack_parser$_captured_this_1 = _upload_pack_parser$_captured_this_1;
    this._upload_pack_parser$_captured_store_2 = _upload_pack_parser$_captured_store_2;
    this._captured_progress_3 = _captured_progress_3;
    this._captured_common_4 = _captured_common_4;
    this.$deferredAction();
  }
  UploadPackParser_parse_closure.builtin$cls = "UploadPackParser_parse_closure";
  if (!"name" in UploadPackParser_parse_closure)
    UploadPackParser_parse_closure.name = "UploadPackParser_parse_closure";
  $desc = $collectedClasses.UploadPackParser_parse_closure[1];
  UploadPackParser_parse_closure.prototype = $desc;
  UploadPackParser_parse_closure.$__fields__ = ["_upload_pack_parser$_box_0", "_upload_pack_parser$_captured_this_1", "_upload_pack_parser$_captured_store_2", "_captured_progress_3", "_captured_common_4"];
  function UploadPackParser_parse__closure(_upload_pack_parser$_box_0, _upload_pack_parser$_captured_this_5, _captured_common_6, _captured_pack_7) {
    this._upload_pack_parser$_box_0 = _upload_pack_parser$_box_0;
    this._upload_pack_parser$_captured_this_5 = _upload_pack_parser$_captured_this_5;
    this._captured_common_6 = _captured_common_6;
    this._captured_pack_7 = _captured_pack_7;
    this.$deferredAction();
  }
  UploadPackParser_parse__closure.builtin$cls = "UploadPackParser_parse__closure";
  if (!"name" in UploadPackParser_parse__closure)
    UploadPackParser_parse__closure.name = "UploadPackParser_parse__closure";
  $desc = $collectedClasses.UploadPackParser_parse__closure[1];
  UploadPackParser_parse__closure.prototype = $desc;
  UploadPackParser_parse__closure.$__fields__ = ["_upload_pack_parser$_box_0", "_upload_pack_parser$_captured_this_5", "_captured_common_6", "_captured_pack_7"];
  function Cancel() {
    this.$deferredAction();
  }
  Cancel.builtin$cls = "Cancel";
  if (!"name" in Cancel)
    Cancel.name = "Cancel";
  $desc = $collectedClasses.Cancel[1];
  Cancel.prototype = $desc;
  Cancel.$__fields__ = [];
  function ZlibResult(data, readLength) {
    this.data = data;
    this.readLength = readLength;
    this.$deferredAction();
  }
  ZlibResult.builtin$cls = "ZlibResult";
  if (!"name" in ZlibResult)
    ZlibResult.name = "ZlibResult";
  $desc = $collectedClasses.ZlibResult[1];
  ZlibResult.prototype = $desc;
  ZlibResult.$__fields__ = ["data", "readLength"];
  ZlibResult.prototype.get$data = function(receiver) {
    return this.data;
  };
  function HetimaBuilder() {
    this.$deferredAction();
  }
  HetimaBuilder.builtin$cls = "HetimaBuilder";
  if (!"name" in HetimaBuilder)
    HetimaBuilder.name = "HetimaBuilder";
  $desc = $collectedClasses.HetimaBuilder[1];
  HetimaBuilder.prototype = $desc;
  HetimaBuilder.$__fields__ = [];
  function HetimaFile() {
    this.$deferredAction();
  }
  HetimaFile.builtin$cls = "HetimaFile";
  if (!"name" in HetimaFile)
    HetimaFile.name = "HetimaFile";
  $desc = $collectedClasses.HetimaFile[1];
  HetimaFile.prototype = $desc;
  HetimaFile.$__fields__ = [];
  function HetimaReadBuffer() {
    this.$deferredAction();
  }
  HetimaReadBuffer.builtin$cls = "HetimaReadBuffer";
  if (!"name" in HetimaReadBuffer)
    HetimaReadBuffer.name = "HetimaReadBuffer";
  $desc = $collectedClasses.HetimaReadBuffer[1];
  HetimaReadBuffer.prototype = $desc;
  HetimaReadBuffer.$__fields__ = [];
  function ReadResult(status, buffer) {
    this.status = status;
    this.buffer = buffer;
    this.$deferredAction();
  }
  ReadResult.builtin$cls = "ReadResult";
  if (!"name" in ReadResult)
    ReadResult.name = "ReadResult";
  $desc = $collectedClasses.ReadResult[1];
  ReadResult.prototype = $desc;
  ReadResult.$__fields__ = ["status", "buffer"];
  ReadResult.prototype.get$status = function(receiver) {
    return this.status;
  };
  ReadResult.prototype.get$buffer = function(receiver) {
    return this.buffer;
  };
  function HetimaFileToBuilder(mFile, completerFin, _immutable) {
    this.mFile = mFile;
    this.completerFin = completerFin;
    this._immutable = _immutable;
    this.$deferredAction();
  }
  HetimaFileToBuilder.builtin$cls = "HetimaFileToBuilder";
  if (!"name" in HetimaFileToBuilder)
    HetimaFileToBuilder.name = "HetimaFileToBuilder";
  $desc = $collectedClasses.HetimaFileToBuilder[1];
  HetimaFileToBuilder.prototype = $desc;
  HetimaFileToBuilder.$__fields__ = ["mFile", "completerFin", "_immutable"];
  function HetimaFileToBuilder_getByteFuture_closure(_captured_c_0) {
    this._captured_c_0 = _captured_c_0;
    this.$deferredAction();
  }
  HetimaFileToBuilder_getByteFuture_closure.builtin$cls = "HetimaFileToBuilder_getByteFuture_closure";
  if (!"name" in HetimaFileToBuilder_getByteFuture_closure)
    HetimaFileToBuilder_getByteFuture_closure.name = "HetimaFileToBuilder_getByteFuture_closure";
  $desc = $collectedClasses.HetimaFileToBuilder_getByteFuture_closure[1];
  HetimaFileToBuilder_getByteFuture_closure.prototype = $desc;
  HetimaFileToBuilder_getByteFuture_closure.$__fields__ = ["_captured_c_0"];
  function HetimaFileToBuilder_getByteFuture_closure0(_captured_c_1) {
    this._captured_c_1 = _captured_c_1;
    this.$deferredAction();
  }
  HetimaFileToBuilder_getByteFuture_closure0.builtin$cls = "HetimaFileToBuilder_getByteFuture_closure0";
  if (!"name" in HetimaFileToBuilder_getByteFuture_closure0)
    HetimaFileToBuilder_getByteFuture_closure0.name = "HetimaFileToBuilder_getByteFuture_closure0";
  $desc = $collectedClasses.HetimaFileToBuilder_getByteFuture_closure0[1];
  HetimaFileToBuilder_getByteFuture_closure0.prototype = $desc;
  HetimaFileToBuilder_getByteFuture_closure0.$__fields__ = ["_captured_c_1"];
  function HetimaFileBlob(_mBlob) {
    this._mBlob = _mBlob;
    this.$deferredAction();
  }
  HetimaFileBlob.builtin$cls = "HetimaFileBlob";
  if (!"name" in HetimaFileBlob)
    HetimaFileBlob.name = "HetimaFileBlob";
  $desc = $collectedClasses.HetimaFileBlob[1];
  HetimaFileBlob.prototype = $desc;
  HetimaFileBlob.$__fields__ = ["_mBlob"];
  function HetimaFileBlob_read_closure(_hetimacore_cl$_captured_ret_0, _captured_reader_1) {
    this._hetimacore_cl$_captured_ret_0 = _hetimacore_cl$_captured_ret_0;
    this._captured_reader_1 = _captured_reader_1;
    this.$deferredAction();
  }
  HetimaFileBlob_read_closure.builtin$cls = "HetimaFileBlob_read_closure";
  if (!"name" in HetimaFileBlob_read_closure)
    HetimaFileBlob_read_closure.name = "HetimaFileBlob_read_closure";
  $desc = $collectedClasses.HetimaFileBlob_read_closure[1];
  HetimaFileBlob_read_closure.prototype = $desc;
  HetimaFileBlob_read_closure.$__fields__ = ["_hetimacore_cl$_captured_ret_0", "_captured_reader_1"];
  function HetimaFileBlob_read_closure0(_captured_ret_2) {
    this._captured_ret_2 = _captured_ret_2;
    this.$deferredAction();
  }
  HetimaFileBlob_read_closure0.builtin$cls = "HetimaFileBlob_read_closure0";
  if (!"name" in HetimaFileBlob_read_closure0)
    HetimaFileBlob_read_closure0.name = "HetimaFileBlob_read_closure0";
  $desc = $collectedClasses.HetimaFileBlob_read_closure0[1];
  HetimaFileBlob_read_closure0.prototype = $desc;
  HetimaFileBlob_read_closure0.$__fields__ = ["_captured_ret_2"];
  function HetimaFileBlob_read_closure1(_captured_ret_3) {
    this._captured_ret_3 = _captured_ret_3;
    this.$deferredAction();
  }
  HetimaFileBlob_read_closure1.builtin$cls = "HetimaFileBlob_read_closure1";
  if (!"name" in HetimaFileBlob_read_closure1)
    HetimaFileBlob_read_closure1.name = "HetimaFileBlob_read_closure1";
  $desc = $collectedClasses.HetimaFileBlob_read_closure1[1];
  HetimaFileBlob_read_closure1.prototype = $desc;
  HetimaFileBlob_read_closure1.$__fields__ = ["_captured_ret_3"];
  function main_closure() {
    this.$deferredAction();
  }
  main_closure.builtin$cls = "main_closure";
  if (!"name" in main_closure)
    main_closure.name = "main_closure";
  $desc = $collectedClasses.main_closure[1];
  main_closure.prototype = $desc;
  main_closure.$__fields__ = [];
  function main_closure0() {
    this.$deferredAction();
  }
  main_closure0.builtin$cls = "main_closure0";
  if (!"name" in main_closure0)
    main_closure0.name = "main_closure0";
  $desc = $collectedClasses.main_closure0[1];
  main_closure0.prototype = $desc;
  main_closure0.$__fields__ = [];
  function main_closure1() {
    this.$deferredAction();
  }
  main_closure1.builtin$cls = "main_closure1";
  if (!"name" in main_closure1)
    main_closure1.name = "main_closure1";
  $desc = $collectedClasses.main_closure1[1];
  main_closure1.prototype = $desc;
  main_closure1.$__fields__ = [];
  function main_closure2() {
    this.$deferredAction();
  }
  main_closure2.builtin$cls = "main_closure2";
  if (!"name" in main_closure2)
    main_closure2.name = "main_closure2";
  $desc = $collectedClasses.main_closure2[1];
  main_closure2.prototype = $desc;
  main_closure2.$__fields__ = [];
  function main__closure() {
    this.$deferredAction();
  }
  main__closure.builtin$cls = "main__closure";
  if (!"name" in main__closure)
    main__closure.name = "main__closure";
  $desc = $collectedClasses.main__closure[1];
  main__closure.prototype = $desc;
  main__closure.$__fields__ = [];
  function onClickClone_closure(_captured_address_0, _captured_location_1) {
    this._captured_address_0 = _captured_address_0;
    this._captured_location_1 = _captured_location_1;
    this.$deferredAction();
  }
  onClickClone_closure.builtin$cls = "onClickClone_closure";
  if (!"name" in onClickClone_closure)
    onClickClone_closure.name = "onClickClone_closure";
  $desc = $collectedClasses.onClickClone_closure[1];
  onClickClone_closure.prototype = $desc;
  onClickClone_closure.$__fields__ = ["_captured_address_0", "_captured_location_1"];
  function onClickClone__closure() {
    this.$deferredAction();
  }
  onClickClone__closure.builtin$cls = "onClickClone__closure";
  if (!"name" in onClickClone__closure)
    onClickClone__closure.name = "onClickClone__closure";
  $desc = $collectedClasses.onClickClone__closure[1];
  onClickClone__closure.prototype = $desc;
  onClickClone__closure.$__fields__ = [];
  function getRoot_closure() {
    this.$deferredAction();
  }
  getRoot_closure.builtin$cls = "getRoot_closure";
  if (!"name" in getRoot_closure)
    getRoot_closure.name = "getRoot_closure";
  $desc = $collectedClasses.getRoot_closure[1];
  getRoot_closure.prototype = $desc;
  getRoot_closure.$__fields__ = [];
  function updateList_closure() {
    this.$deferredAction();
  }
  updateList_closure.builtin$cls = "updateList_closure";
  if (!"name" in updateList_closure)
    updateList_closure.name = "updateList_closure";
  $desc = $collectedClasses.updateList_closure[1];
  updateList_closure.prototype = $desc;
  updateList_closure.$__fields__ = [];
  function select_closure() {
    this.$deferredAction();
  }
  select_closure.builtin$cls = "select_closure";
  if (!"name" in select_closure)
    select_closure.name = "select_closure";
  $desc = $collectedClasses.select_closure[1];
  select_closure.prototype = $desc;
  select_closure.$__fields__ = [];
  function select_closure0() {
    this.$deferredAction();
  }
  select_closure0.builtin$cls = "select_closure0";
  if (!"name" in select_closure0)
    select_closure0.name = "select_closure0";
  $desc = $collectedClasses.select_closure0[1];
  select_closure0.prototype = $desc;
  select_closure0.$__fields__ = [];
  function select__closure(_captured_b_0) {
    this._captured_b_0 = _captured_b_0;
    this.$deferredAction();
  }
  select__closure.builtin$cls = "select__closure";
  if (!"name" in select__closure)
    select__closure.name = "select__closure";
  $desc = $collectedClasses.select__closure[1];
  select__closure.prototype = $desc;
  select__closure.$__fields__ = ["_captured_b_0"];
  function select__closure0() {
    this.$deferredAction();
  }
  select__closure0.builtin$cls = "select__closure0";
  if (!"name" in select__closure0)
    select__closure0.name = "select__closure0";
  $desc = $collectedClasses.select__closure0[1];
  select__closure0.prototype = $desc;
  select__closure0.$__fields__ = [];
  function select__closure1() {
    this.$deferredAction();
  }
  select__closure1.builtin$cls = "select__closure1";
  if (!"name" in select__closure1)
    select__closure1.name = "select__closure1";
  $desc = $collectedClasses.select__closure1[1];
  select__closure1.prototype = $desc;
  select__closure1.$__fields__ = [];
  function Tab(tabs, current, _controller) {
    this.tabs = tabs;
    this.current = current;
    this._controller = _controller;
    this.$deferredAction();
  }
  Tab.builtin$cls = "Tab";
  if (!"name" in Tab)
    Tab.name = "Tab";
  $desc = $collectedClasses.Tab[1];
  Tab.prototype = $desc;
  Tab.$__fields__ = ["tabs", "current", "_controller"];
  function Tab_init_closure(_hetimapatrinia$_captured_this_0, _captured_t_1) {
    this._hetimapatrinia$_captured_this_0 = _hetimapatrinia$_captured_this_0;
    this._captured_t_1 = _captured_t_1;
    this.$deferredAction();
  }
  Tab_init_closure.builtin$cls = "Tab_init_closure";
  if (!"name" in Tab_init_closure)
    Tab_init_closure.name = "Tab_init_closure";
  $desc = $collectedClasses.Tab_init_closure[1];
  Tab_init_closure.prototype = $desc;
  Tab_init_closure.$__fields__ = ["_hetimapatrinia$_captured_this_0", "_captured_t_1"];
  function enableAutocomplete_closure() {
    this.$deferredAction();
  }
  enableAutocomplete_closure.builtin$cls = "enableAutocomplete_closure";
  if (!"name" in enableAutocomplete_closure)
    enableAutocomplete_closure.name = "enableAutocomplete_closure";
  $desc = $collectedClasses.enableAutocomplete_closure[1];
  enableAutocomplete_closure.prototype = $desc;
  enableAutocomplete_closure.$__fields__ = [];
  function HetiEntry() {
    this.$deferredAction();
  }
  HetiEntry.builtin$cls = "HetiEntry";
  if (!"name" in HetiEntry)
    HetiEntry.name = "HetiEntry";
  $desc = $collectedClasses.HetiEntry[1];
  HetiEntry.prototype = $desc;
  HetiEntry.$__fields__ = [];
  function HetiDirectory(_directory, lastGetList) {
    this._directory = _directory;
    this.lastGetList = lastGetList;
    this.$deferredAction();
  }
  HetiDirectory.builtin$cls = "HetiDirectory";
  if (!"name" in HetiDirectory)
    HetiDirectory.name = "HetiDirectory";
  $desc = $collectedClasses.HetiDirectory[1];
  HetiDirectory.prototype = $desc;
  HetiDirectory.$__fields__ = ["_directory", "lastGetList"];
  HetiDirectory.prototype.get$lastGetList = function() {
    return this.lastGetList;
  };
  function HetiDirectory_getParent_closure(_captured_ret_0) {
    this._captured_ret_0 = _captured_ret_0;
    this.$deferredAction();
  }
  HetiDirectory_getParent_closure.builtin$cls = "HetiDirectory_getParent_closure";
  if (!"name" in HetiDirectory_getParent_closure)
    HetiDirectory_getParent_closure.name = "HetiDirectory_getParent_closure";
  $desc = $collectedClasses.HetiDirectory_getParent_closure[1];
  HetiDirectory_getParent_closure.prototype = $desc;
  HetiDirectory_getParent_closure.$__fields__ = ["_captured_ret_0"];
  function HetiDirectory_getList_closure(_file$_captured_this_0, _captured_ret_1) {
    this._file$_captured_this_0 = _file$_captured_this_0;
    this._captured_ret_1 = _captured_ret_1;
    this.$deferredAction();
  }
  HetiDirectory_getList_closure.builtin$cls = "HetiDirectory_getList_closure";
  if (!"name" in HetiDirectory_getList_closure)
    HetiDirectory_getList_closure.name = "HetiDirectory_getList_closure";
  $desc = $collectedClasses.HetiDirectory_getList_closure[1];
  HetiDirectory_getList_closure.prototype = $desc;
  HetiDirectory_getList_closure.$__fields__ = ["_file$_captured_this_0", "_captured_ret_1"];
  function HetiFile(_file) {
    this._file = _file;
    this.$deferredAction();
  }
  HetiFile.builtin$cls = "HetiFile";
  if (!"name" in HetiFile)
    HetiFile.name = "HetiFile";
  $desc = $collectedClasses.HetiFile[1];
  HetiFile.prototype = $desc;
  HetiFile.$__fields__ = ["_file"];
  function HetiFile_getHetimaBuilder_closure(_captured_ret_0) {
    this._captured_ret_0 = _captured_ret_0;
    this.$deferredAction();
  }
  HetiFile_getHetimaBuilder_closure.builtin$cls = "HetiFile_getHetimaBuilder_closure";
  if (!"name" in HetiFile_getHetimaBuilder_closure)
    HetiFile_getHetimaBuilder_closure.name = "HetiFile_getHetimaBuilder_closure";
  $desc = $collectedClasses.HetiFile_getHetimaBuilder_closure[1];
  HetiFile_getHetimaBuilder_closure.prototype = $desc;
  HetiFile_getHetimaBuilder_closure.$__fields__ = ["_captured_ret_0"];
  function HetiFile_getHetimaBuilder_closure0(_captured_ret_1) {
    this._captured_ret_1 = _captured_ret_1;
    this.$deferredAction();
  }
  HetiFile_getHetimaBuilder_closure0.builtin$cls = "HetiFile_getHetimaBuilder_closure0";
  if (!"name" in HetiFile_getHetimaBuilder_closure0)
    HetiFile_getHetimaBuilder_closure0.name = "HetiFile_getHetimaBuilder_closure0";
  $desc = $collectedClasses.HetiFile_getHetimaBuilder_closure0[1];
  HetiFile_getHetimaBuilder_closure0.prototype = $desc;
  HetiFile_getHetimaBuilder_closure0.$__fields__ = ["_captured_ret_1"];
  function HetiFileSystem(_fileSystem) {
    this._fileSystem = _fileSystem;
    this.$deferredAction();
  }
  HetiFileSystem.builtin$cls = "HetiFileSystem";
  if (!"name" in HetiFileSystem)
    HetiFileSystem.name = "HetiFileSystem";
  $desc = $collectedClasses.HetiFileSystem[1];
  HetiFileSystem.prototype = $desc;
  HetiFileSystem.$__fields__ = ["_fileSystem"];
  function HetiFileSystem_getFileSystem_closure(_captured_ret_0) {
    this._captured_ret_0 = _captured_ret_0;
    this.$deferredAction();
  }
  HetiFileSystem_getFileSystem_closure.builtin$cls = "HetiFileSystem_getFileSystem_closure";
  if (!"name" in HetiFileSystem_getFileSystem_closure)
    HetiFileSystem_getFileSystem_closure.name = "HetiFileSystem_getFileSystem_closure";
  $desc = $collectedClasses.HetiFileSystem_getFileSystem_closure[1];
  HetiFileSystem_getFileSystem_closure.prototype = $desc;
  HetiFileSystem_getFileSystem_closure.$__fields__ = ["_captured_ret_0"];
  function HetiFileSystem_getFileSystem_closure0(_captured_ret_1) {
    this._captured_ret_1 = _captured_ret_1;
    this.$deferredAction();
  }
  HetiFileSystem_getFileSystem_closure0.builtin$cls = "HetiFileSystem_getFileSystem_closure0";
  if (!"name" in HetiFileSystem_getFileSystem_closure0)
    HetiFileSystem_getFileSystem_closure0.name = "HetiFileSystem_getFileSystem_closure0";
  $desc = $collectedClasses.HetiFileSystem_getFileSystem_closure0[1];
  HetiFileSystem_getFileSystem_closure0.prototype = $desc;
  HetiFileSystem_getFileSystem_closure0.$__fields__ = ["_captured_ret_1"];
  function convertDartToNative_Dictionary_closure(_captured_object_0) {
    this._captured_object_0 = _captured_object_0;
    this.$deferredAction();
  }
  convertDartToNative_Dictionary_closure.builtin$cls = "convertDartToNative_Dictionary_closure";
  if (!"name" in convertDartToNative_Dictionary_closure)
    convertDartToNative_Dictionary_closure.name = "convertDartToNative_Dictionary_closure";
  $desc = $collectedClasses.convertDartToNative_Dictionary_closure[1];
  convertDartToNative_Dictionary_closure.prototype = $desc;
  convertDartToNative_Dictionary_closure.$__fields__ = ["_captured_object_0"];
  function convertNativeToDart_AcceptStructuredClone_findSlot(_captured_values_0, _captured_copies_1) {
    this._captured_values_0 = _captured_values_0;
    this._captured_copies_1 = _captured_copies_1;
    this.$deferredAction();
  }
  convertNativeToDart_AcceptStructuredClone_findSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_findSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_findSlot)
    convertNativeToDart_AcceptStructuredClone_findSlot.name = "convertNativeToDart_AcceptStructuredClone_findSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_findSlot[1];
  convertNativeToDart_AcceptStructuredClone_findSlot.prototype = $desc;
  convertNativeToDart_AcceptStructuredClone_findSlot.$__fields__ = ["_captured_values_0", "_captured_copies_1"];
  function convertNativeToDart_AcceptStructuredClone_readSlot(_captured_copies_2) {
    this._captured_copies_2 = _captured_copies_2;
    this.$deferredAction();
  }
  convertNativeToDart_AcceptStructuredClone_readSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_readSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_readSlot)
    convertNativeToDart_AcceptStructuredClone_readSlot.name = "convertNativeToDart_AcceptStructuredClone_readSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_readSlot[1];
  convertNativeToDart_AcceptStructuredClone_readSlot.prototype = $desc;
  convertNativeToDart_AcceptStructuredClone_readSlot.$__fields__ = ["_captured_copies_2"];
  function convertNativeToDart_AcceptStructuredClone_writeSlot(_captured_copies_3) {
    this._captured_copies_3 = _captured_copies_3;
    this.$deferredAction();
  }
  convertNativeToDart_AcceptStructuredClone_writeSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_writeSlot)
    convertNativeToDart_AcceptStructuredClone_writeSlot.name = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_writeSlot[1];
  convertNativeToDart_AcceptStructuredClone_writeSlot.prototype = $desc;
  convertNativeToDart_AcceptStructuredClone_writeSlot.$__fields__ = ["_captured_copies_3"];
  function convertNativeToDart_AcceptStructuredClone_walk(_captured_mustCopy_4, _captured_findSlot_5, _captured_readSlot_6, _captured_writeSlot_7) {
    this._captured_mustCopy_4 = _captured_mustCopy_4;
    this._captured_findSlot_5 = _captured_findSlot_5;
    this._captured_readSlot_6 = _captured_readSlot_6;
    this._captured_writeSlot_7 = _captured_writeSlot_7;
    this.$deferredAction();
  }
  convertNativeToDart_AcceptStructuredClone_walk.builtin$cls = "convertNativeToDart_AcceptStructuredClone_walk";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_walk)
    convertNativeToDart_AcceptStructuredClone_walk.name = "convertNativeToDart_AcceptStructuredClone_walk";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_walk[1];
  convertNativeToDart_AcceptStructuredClone_walk.prototype = $desc;
  convertNativeToDart_AcceptStructuredClone_walk.$__fields__ = ["_captured_mustCopy_4", "_captured_findSlot_5", "_captured_readSlot_6", "_captured_writeSlot_7"];
  function CssClassSetImpl() {
    this.$deferredAction();
  }
  CssClassSetImpl.builtin$cls = "CssClassSetImpl";
  if (!"name" in CssClassSetImpl)
    CssClassSetImpl.name = "CssClassSetImpl";
  $desc = $collectedClasses.CssClassSetImpl[1];
  CssClassSetImpl.prototype = $desc;
  CssClassSetImpl.$__fields__ = [];
  function CssClassSetImpl_add_closure(_captured_value_0) {
    this._captured_value_0 = _captured_value_0;
    this.$deferredAction();
  }
  CssClassSetImpl_add_closure.builtin$cls = "CssClassSetImpl_add_closure";
  if (!"name" in CssClassSetImpl_add_closure)
    CssClassSetImpl_add_closure.name = "CssClassSetImpl_add_closure";
  $desc = $collectedClasses.CssClassSetImpl_add_closure[1];
  CssClassSetImpl_add_closure.prototype = $desc;
  CssClassSetImpl_add_closure.$__fields__ = ["_captured_value_0"];
  function NumberFormat(_negativePrefix, _positivePrefix, _negativeSuffix, _positiveSuffix, _groupingSize, _finalGroupingSize, _groupingSizeSetExplicitly, _decimalSeparatorAlwaysShown, _useSignForPositiveExponent, _useExponentialNotation, maximumIntegerDigits, minimumIntegerDigits, maximumFractionDigits, minimumFractionDigits, minimumExponentDigits, _internalMultiplier, _multiplierDigits, _intl$_pattern, _locale, _symbols, currencyName, _intl$_buffer, _maxInt, _zero) {
    this._negativePrefix = _negativePrefix;
    this._positivePrefix = _positivePrefix;
    this._negativeSuffix = _negativeSuffix;
    this._positiveSuffix = _positiveSuffix;
    this._groupingSize = _groupingSize;
    this._finalGroupingSize = _finalGroupingSize;
    this._groupingSizeSetExplicitly = _groupingSizeSetExplicitly;
    this._decimalSeparatorAlwaysShown = _decimalSeparatorAlwaysShown;
    this._useSignForPositiveExponent = _useSignForPositiveExponent;
    this._useExponentialNotation = _useExponentialNotation;
    this.maximumIntegerDigits = maximumIntegerDigits;
    this.minimumIntegerDigits = minimumIntegerDigits;
    this.maximumFractionDigits = maximumFractionDigits;
    this.minimumFractionDigits = minimumFractionDigits;
    this.minimumExponentDigits = minimumExponentDigits;
    this._internalMultiplier = _internalMultiplier;
    this._multiplierDigits = _multiplierDigits;
    this._intl$_pattern = _intl$_pattern;
    this._locale = _locale;
    this._symbols = _symbols;
    this.currencyName = currencyName;
    this._intl$_buffer = _intl$_buffer;
    this._maxInt = _maxInt;
    this._zero = _zero;
    this.$deferredAction();
  }
  NumberFormat.builtin$cls = "NumberFormat";
  if (!"name" in NumberFormat)
    NumberFormat.name = "NumberFormat";
  $desc = $collectedClasses.NumberFormat[1];
  NumberFormat.prototype = $desc;
  NumberFormat.$__fields__ = ["_negativePrefix", "_positivePrefix", "_negativeSuffix", "_positiveSuffix", "_groupingSize", "_finalGroupingSize", "_groupingSizeSetExplicitly", "_decimalSeparatorAlwaysShown", "_useSignForPositiveExponent", "_useExponentialNotation", "maximumIntegerDigits", "minimumIntegerDigits", "maximumFractionDigits", "minimumFractionDigits", "minimumExponentDigits", "_internalMultiplier", "_multiplierDigits", "_intl$_pattern", "_locale", "_symbols", "currencyName", "_intl$_buffer", "_maxInt", "_zero"];
  function NumberFormat$decimalPattern_closure() {
    this.$deferredAction();
  }
  NumberFormat$decimalPattern_closure.builtin$cls = "NumberFormat$decimalPattern_closure";
  if (!"name" in NumberFormat$decimalPattern_closure)
    NumberFormat$decimalPattern_closure.name = "NumberFormat$decimalPattern_closure";
  $desc = $collectedClasses.NumberFormat$decimalPattern_closure[1];
  NumberFormat$decimalPattern_closure.prototype = $desc;
  NumberFormat$decimalPattern_closure.$__fields__ = [];
  function _NumberFormatParser(format, pattern, currencyName, inQuote, decimalPos, digitLeftCount, zeroDigitCount, digitRightCount, groupingCount) {
    this.format = format;
    this.pattern = pattern;
    this.currencyName = currencyName;
    this.inQuote = inQuote;
    this.decimalPos = decimalPos;
    this.digitLeftCount = digitLeftCount;
    this.zeroDigitCount = zeroDigitCount;
    this.digitRightCount = digitRightCount;
    this.groupingCount = groupingCount;
    this.$deferredAction();
  }
  _NumberFormatParser.builtin$cls = "_NumberFormatParser";
  if (!"name" in _NumberFormatParser)
    _NumberFormatParser.name = "_NumberFormatParser";
  $desc = $collectedClasses._NumberFormatParser[1];
  _NumberFormatParser.prototype = $desc;
  _NumberFormatParser.$__fields__ = ["format", "pattern", "currencyName", "inQuote", "decimalPos", "digitLeftCount", "zeroDigitCount", "digitRightCount", "groupingCount"];
  function _StringIterable(iterator) {
    this.iterator = iterator;
    this.$deferredAction();
  }
  _StringIterable.builtin$cls = "_StringIterable";
  if (!"name" in _StringIterable)
    _StringIterable.name = "_StringIterable";
  $desc = $collectedClasses._StringIterable[1];
  _StringIterable.prototype = $desc;
  _StringIterable.$__fields__ = ["iterator"];
  _StringIterable.prototype.get$iterator = function(receiver) {
    return this.iterator;
  };
  function _StringIterator(input, nextIndex, _intl$_current) {
    this.input = input;
    this.nextIndex = nextIndex;
    this._intl$_current = _intl$_current;
    this.$deferredAction();
  }
  _StringIterator.builtin$cls = "_StringIterator";
  if (!"name" in _StringIterator)
    _StringIterator.name = "_StringIterator";
  $desc = $collectedClasses._StringIterator[1];
  _StringIterator.prototype = $desc;
  _StringIterator.$__fields__ = ["input", "nextIndex", "_intl$_current"];
  function Logger(name, parent, _level, _children, children, _logging$_controller) {
    this.name = name;
    this.parent = parent;
    this._level = _level;
    this._children = _children;
    this.children = children;
    this._logging$_controller = _logging$_controller;
    this.$deferredAction();
  }
  Logger.builtin$cls = "Logger";
  if (!"name" in Logger)
    Logger.name = "Logger";
  $desc = $collectedClasses.Logger[1];
  Logger.prototype = $desc;
  Logger.$__fields__ = ["name", "parent", "_level", "_children", "children", "_logging$_controller"];
  Logger.prototype.get$name = function(receiver) {
    return this.name;
  };
  Logger.prototype.get$parent = function(receiver) {
    return this.parent;
  };
  Logger.prototype.get$_children = function(receiver) {
    return this._children;
  };
  function Logger_Logger_closure(_logging$_captured_name_0) {
    this._logging$_captured_name_0 = _logging$_captured_name_0;
    this.$deferredAction();
  }
  Logger_Logger_closure.builtin$cls = "Logger_Logger_closure";
  if (!"name" in Logger_Logger_closure)
    Logger_Logger_closure.name = "Logger_Logger_closure";
  $desc = $collectedClasses.Logger_Logger_closure[1];
  Logger_Logger_closure.prototype = $desc;
  Logger_Logger_closure.$__fields__ = ["_logging$_captured_name_0"];
  function Level(name, value) {
    this.name = name;
    this.value = value;
    this.$deferredAction();
  }
  Level.builtin$cls = "Level";
  if (!"name" in Level)
    Level.name = "Level";
  $desc = $collectedClasses.Level[1];
  Level.prototype = $desc;
  Level.$__fields__ = ["name", "value"];
  Level.prototype.get$name = function(receiver) {
    return this.name;
  };
  Level.prototype.get$value = function(receiver) {
    return this.value;
  };
  function LogRecord(level, message, loggerName, time, sequenceNumber, error, stackTrace, zone) {
    this.level = level;
    this.message = message;
    this.loggerName = loggerName;
    this.time = time;
    this.sequenceNumber = sequenceNumber;
    this.error = error;
    this.stackTrace = stackTrace;
    this.zone = zone;
    this.$deferredAction();
  }
  LogRecord.builtin$cls = "LogRecord";
  if (!"name" in LogRecord)
    LogRecord.name = "LogRecord";
  $desc = $collectedClasses.LogRecord[1];
  LogRecord.prototype = $desc;
  LogRecord.$__fields__ = ["level", "message", "loggerName", "time", "sequenceNumber", "error", "stackTrace", "zone"];
  LogRecord.prototype.get$level = function() {
    return this.level;
  };
  LogRecord.prototype.get$message = function(receiver) {
    return this.message;
  };
  LogRecord.prototype.get$error = function(receiver) {
    return this.error;
  };
  LogRecord.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function NumberSymbols(NAME, DECIMAL_SEP, GROUP_SEP, PERCENT, ZERO_DIGIT, PLUS_SIGN, MINUS_SIGN, EXP_SYMBOL, PERMILL, INFINITY, NAN, DECIMAL_PATTERN, SCIENTIFIC_PATTERN, PERCENT_PATTERN, CURRENCY_PATTERN, DEF_CURRENCY_CODE) {
    this.NAME = NAME;
    this.DECIMAL_SEP = DECIMAL_SEP;
    this.GROUP_SEP = GROUP_SEP;
    this.PERCENT = PERCENT;
    this.ZERO_DIGIT = ZERO_DIGIT;
    this.PLUS_SIGN = PLUS_SIGN;
    this.MINUS_SIGN = MINUS_SIGN;
    this.EXP_SYMBOL = EXP_SYMBOL;
    this.PERMILL = PERMILL;
    this.INFINITY = INFINITY;
    this.NAN = NAN;
    this.DECIMAL_PATTERN = DECIMAL_PATTERN;
    this.SCIENTIFIC_PATTERN = SCIENTIFIC_PATTERN;
    this.PERCENT_PATTERN = PERCENT_PATTERN;
    this.CURRENCY_PATTERN = CURRENCY_PATTERN;
    this.DEF_CURRENCY_CODE = DEF_CURRENCY_CODE;
    this.$deferredAction();
  }
  NumberSymbols.builtin$cls = "NumberSymbols";
  if (!"name" in NumberSymbols)
    NumberSymbols.name = "NumberSymbols";
  $desc = $collectedClasses.NumberSymbols[1];
  NumberSymbols.prototype = $desc;
  NumberSymbols.$__fields__ = ["NAME", "DECIMAL_SEP", "GROUP_SEP", "PERCENT", "ZERO_DIGIT", "PLUS_SIGN", "MINUS_SIGN", "EXP_SYMBOL", "PERMILL", "INFINITY", "NAN", "DECIMAL_PATTERN", "SCIENTIFIC_PATTERN", "PERCENT_PATTERN", "CURRENCY_PATTERN", "DEF_CURRENCY_CODE"];
  function getLocalDataRoot_closure() {
    this.$deferredAction();
  }
  getLocalDataRoot_closure.builtin$cls = "getLocalDataRoot_closure";
  if (!"name" in getLocalDataRoot_closure)
    getLocalDataRoot_closure.name = "getLocalDataRoot_closure";
  $desc = $collectedClasses.getLocalDataRoot_closure[1];
  getLocalDataRoot_closure.prototype = $desc;
  getLocalDataRoot_closure.$__fields__ = [];
  function getLocalDataDir_closure(_captured_name_0) {
    this._captured_name_0 = _captured_name_0;
    this.$deferredAction();
  }
  getLocalDataDir_closure.builtin$cls = "getLocalDataDir_closure";
  if (!"name" in getLocalDataDir_closure)
    getLocalDataDir_closure.name = "getLocalDataDir_closure";
  $desc = $collectedClasses.getLocalDataDir_closure[1];
  getLocalDataDir_closure.prototype = $desc;
  getLocalDataDir_closure.$__fields__ = ["_captured_name_0"];
  function getLocalDataDir__closure(_captured_name_1) {
    this._captured_name_1 = _captured_name_1;
    this.$deferredAction();
  }
  getLocalDataDir__closure.builtin$cls = "getLocalDataDir__closure";
  if (!"name" in getLocalDataDir__closure)
    getLocalDataDir__closure.name = "getLocalDataDir__closure";
  $desc = $collectedClasses.getLocalDataDir__closure[1];
  getLocalDataDir__closure.prototype = $desc;
  getLocalDataDir__closure.$__fields__ = ["_captured_name_1"];
  function PrintProfiler(name, printToStdout, _previousTaskTime, _utils0$_stopwatch) {
    this.name = name;
    this.printToStdout = printToStdout;
    this._previousTaskTime = _previousTaskTime;
    this._utils0$_stopwatch = _utils0$_stopwatch;
    this.$deferredAction();
  }
  PrintProfiler.builtin$cls = "PrintProfiler";
  if (!"name" in PrintProfiler)
    PrintProfiler.name = "PrintProfiler";
  $desc = $collectedClasses.PrintProfiler[1];
  PrintProfiler.prototype = $desc;
  PrintProfiler.$__fields__ = ["name", "printToStdout", "_previousTaskTime", "_utils0$_stopwatch"];
  PrintProfiler.prototype.get$name = function(receiver) {
    return this.name;
  };
  function FutureHelper_forEachNonBlockingUI_nextElement(_utils0$_captured_f_0, _captured_doneSignal_1, _captured_iterator_2) {
    this._utils0$_captured_f_0 = _utils0$_captured_f_0;
    this._captured_doneSignal_1 = _captured_doneSignal_1;
    this._captured_iterator_2 = _captured_iterator_2;
    this.$deferredAction();
  }
  FutureHelper_forEachNonBlockingUI_nextElement.builtin$cls = "FutureHelper_forEachNonBlockingUI_nextElement";
  if (!"name" in FutureHelper_forEachNonBlockingUI_nextElement)
    FutureHelper_forEachNonBlockingUI_nextElement.name = "FutureHelper_forEachNonBlockingUI_nextElement";
  $desc = $collectedClasses.FutureHelper_forEachNonBlockingUI_nextElement[1];
  FutureHelper_forEachNonBlockingUI_nextElement.prototype = $desc;
  FutureHelper_forEachNonBlockingUI_nextElement.$__fields__ = ["_utils0$_captured_f_0", "_captured_doneSignal_1", "_captured_iterator_2"];
  function FutureHelper_forEachNonBlockingUI_nextElement_closure(_utils0$_captured_f_3, _captured_doneSignal_4, _captured_iterator_5, _captured_nextElement_6) {
    this._utils0$_captured_f_3 = _utils0$_captured_f_3;
    this._captured_doneSignal_4 = _captured_doneSignal_4;
    this._captured_iterator_5 = _captured_iterator_5;
    this._captured_nextElement_6 = _captured_nextElement_6;
    this.$deferredAction();
  }
  FutureHelper_forEachNonBlockingUI_nextElement_closure.builtin$cls = "FutureHelper_forEachNonBlockingUI_nextElement_closure";
  if (!"name" in FutureHelper_forEachNonBlockingUI_nextElement_closure)
    FutureHelper_forEachNonBlockingUI_nextElement_closure.name = "FutureHelper_forEachNonBlockingUI_nextElement_closure";
  $desc = $collectedClasses.FutureHelper_forEachNonBlockingUI_nextElement_closure[1];
  FutureHelper_forEachNonBlockingUI_nextElement_closure.prototype = $desc;
  FutureHelper_forEachNonBlockingUI_nextElement_closure.$__fields__ = ["_utils0$_captured_f_3", "_captured_doneSignal_4", "_captured_iterator_5", "_captured_nextElement_6"];
  function FutureHelper_forEachNonBlockingUI_nextElement__closure(_captured_doneSignal_7) {
    this._captured_doneSignal_7 = _captured_doneSignal_7;
    this.$deferredAction();
  }
  FutureHelper_forEachNonBlockingUI_nextElement__closure.builtin$cls = "FutureHelper_forEachNonBlockingUI_nextElement__closure";
  if (!"name" in FutureHelper_forEachNonBlockingUI_nextElement__closure)
    FutureHelper_forEachNonBlockingUI_nextElement__closure.name = "FutureHelper_forEachNonBlockingUI_nextElement__closure";
  $desc = $collectedClasses.FutureHelper_forEachNonBlockingUI_nextElement__closure[1];
  FutureHelper_forEachNonBlockingUI_nextElement__closure.prototype = $desc;
  FutureHelper_forEachNonBlockingUI_nextElement__closure.$__fields__ = ["_captured_doneSignal_7"];
  function ListRange(_list_range$_source, _list_range$_offset, _list_range$_length) {
    this._list_range$_source = _list_range$_source;
    this._list_range$_offset = _list_range$_offset;
    this._list_range$_length = _list_range$_length;
    this.$deferredAction();
  }
  ListRange.builtin$cls = "ListRange";
  if (!"name" in ListRange)
    ListRange.name = "ListRange";
  $desc = $collectedClasses.ListRange[1];
  ListRange.prototype = $desc;
  ListRange.$__fields__ = ["_list_range$_source", "_list_range$_offset", "_list_range$_length"];
  function _ListRangeIteratorImpl(_list_range$_source, _list_range$_offset, _end) {
    this._list_range$_source = _list_range$_source;
    this._list_range$_offset = _list_range$_offset;
    this._end = _end;
    this.$deferredAction();
  }
  _ListRangeIteratorImpl.builtin$cls = "_ListRangeIteratorImpl";
  if (!"name" in _ListRangeIteratorImpl)
    _ListRangeIteratorImpl.name = "_ListRangeIteratorImpl";
  $desc = $collectedClasses._ListRangeIteratorImpl[1];
  _ListRangeIteratorImpl.prototype = $desc;
  _ListRangeIteratorImpl.$__fields__ = ["_list_range$_source", "_list_range$_offset", "_end"];
  function Utf16CodeUnitDecoder(utf16CodeUnitIterator, replacementCodepoint, _utf_16_code_unit_decoder$_current) {
    this.utf16CodeUnitIterator = utf16CodeUnitIterator;
    this.replacementCodepoint = replacementCodepoint;
    this._utf_16_code_unit_decoder$_current = _utf_16_code_unit_decoder$_current;
    this.$deferredAction();
  }
  Utf16CodeUnitDecoder.builtin$cls = "Utf16CodeUnitDecoder";
  if (!"name" in Utf16CodeUnitDecoder)
    Utf16CodeUnitDecoder.name = "Utf16CodeUnitDecoder";
  $desc = $collectedClasses.Utf16CodeUnitDecoder[1];
  Utf16CodeUnitDecoder.prototype = $desc;
  Utf16CodeUnitDecoder.$__fields__ = ["utf16CodeUnitIterator", "replacementCodepoint", "_utf_16_code_unit_decoder$_current"];
  return [JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, ArrayIterator, JSNumber, JSInt, JSDouble, JSString, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _IsolateContext_handlePing_respond, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, IsolateNatives__startIsolate_runStartFunction, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _WorkerSendPort, RawReceivePortImpl, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, CapabilityImpl, _Serializer, _Deserializer, ConstantMap, ConstantStringMap, _ConstantMapKeyIterable, JSInvocationMirror, ReflectionInfo, Primitives_initTicker_closure, Primitives_functionNoSuchMethod_closure, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, TearOffClosure, BoundClosure, CastErrorImplementation, RuntimeError, RuntimeType, RuntimeFunctionType, DynamicRuntimeType, TypeImpl, JsLinkedHashMap, JsLinkedHashMap_values_closure, JsLinkedHashMap_addAll_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, initHooks_closure, initHooks_closure0, initHooks_closure1, JSSyntaxRegExp, _MatchImplementation, _AllMatchesIterable, _AllMatchesIterator, Disposable, Implementation, Completion, Point, _ProxyImplementation, _jsMap_closure, HasProxy, HasProxy$async_closure, HasProxy_dispose_closure, _ConfigProxy, _ConfigProxy_loadModule_closure, _EditSessionProxy, _EditorProxy, _AutoCompleterReverseProxy, _AutoCompleterReverseProxy_closure, _AutoCompleterReverseProxy__closure, _AutoCompleterReverseProxy__closure0, _AutoCompleterReverseProxy__closure1, _LanguageToolsProxy, _ModeProxy, _ModeProxy_closure, _ThemeProxy, ArchiveException, InputStream, OutputStream, HuffmanTable, Inflate, ChromeObject, ArrayBuffer, CrEntry, CrFileEntry, ChromeFileEntry, CodeUnits, ListIterable, SubListIterable, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, MappedListIterable, SkipIterable, EfficientLengthSkipIterable, SkipIterator, EmptyIterable, EmptyIterator, FixedLengthListMixin, UnmodifiableListMixin, UnmodifiableListBase, Symbol0, _AsyncRun__initializeScheduleImmediate_internalCallback, _AsyncRun__initializeScheduleImmediate_closure, _AsyncRun__scheduleImmediateJsOverride_internalCallback, _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, _UncaughtAsyncError, Future, Future_Future$delayed_closure, Future_wait_handleError, Future_wait_handleError_closure, Future_wait_closure, Future_wait__closure, Future_forEach_closure, Future_forEach__closure, Future_forEach__closure0, Future_doWhile_closure, _Completer, _AsyncCompleter, _FutureListener, _Future, _Future__addListener_closure, _Future__chainForeignFuture_closure, _Future__chainForeignFuture_closure0, _Future__chainForeignFuture_closure1, _Future__asyncComplete_closure, _Future__asyncComplete_closure0, _Future__asyncCompleteError_closure, _Future__propagateToListeners_handleValueCallback, _Future__propagateToListeners_handleError, _Future__propagateToListeners_handleWhenCompleteCallback, _Future__propagateToListeners_handleWhenCompleteCallback_closure, _Future__propagateToListeners_handleWhenCompleteCallback_closure0, _AsyncCallbackEntry, Stream, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_length_closure, Stream_length_closure0, Stream_isEmpty_closure, Stream_isEmpty_closure0, Stream_toList_closure, Stream_toList_closure0, Stream_first_closure, Stream_first_closure0, StreamSubscription, _StreamController, _StreamController__subscribe_closure, _StreamController__recordCancel_complete, _SyncStreamControllerDispatch, _AsyncStreamControllerDispatch, _AsyncStreamController, _StreamController__AsyncStreamControllerDispatch, _SyncStreamController, _StreamController__SyncStreamControllerDispatch, _NoCallbacks, _NoCallbackAsyncStreamController, _StreamController__AsyncStreamControllerDispatch0, _NoCallbackSyncStreamController, _StreamController__SyncStreamControllerDispatch0, _ControllerStream, _ControllerSubscription, _EventSink, _BufferingStreamSubscription, _BufferingStreamSubscription__sendError_sendError, _BufferingStreamSubscription__sendDone_sendDone, _StreamImpl, _DelayedEvent, _DelayedData, _DelayedError, _DelayedDone, _PendingEvents, _PendingEvents_schedule_closure, _StreamImplEvents, _cancelAndError_closure, _cancelAndErrorClosure_closure, _cancelAndValue_closure, _ForwardingStream, _ForwardingStreamSubscription, _MapStream, _StateStreamSubscription, _SkipStream, AsyncError, _Zone, _rootHandleUncaughtError_closure, _RootZone, _RootZone_bindCallback_closure, _RootZone_bindCallback_closure0, _RootZone_bindUnaryCallback_closure, _RootZone_bindUnaryCallback_closure0, _HashMap, _IdentityHashMap, HashMapKeyIterable, HashMapKeyIterator, _LinkedIdentityHashMap, _LinkedHashSet, LinkedHashSetCell, LinkedHashSetIterator, _HashSetBase, IterableBase, ListBase, Object_ListMixin, ListMixin, _UnmodifiableMapMixin, MapView, UnmodifiableMapView, Maps_mapToString_closure, ListQueue, _ListQueueIterator, SetMixin, SetBase, Codec, Converter, Encoding, HtmlEscapeMode, HtmlEscape, JsonUnsupportedObjectError, JsonCyclicError, JsonCodec, JsonEncoder, _JsonStringifier, _JsonStringifier_writeMap_closure, _JsonStringStringifier, Utf8Codec, Utf8Encoder, _Utf8Encoder, Utf8Decoder, _Utf8Decoder, _Utf8Decoder_convert_scanOneByteCharacters, _Utf8Decoder_convert_addSingleBytes, NoSuchMethodError_toString_closure, bool, Comparable, DateTime, $double, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, IndexError, NoSuchMethodError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, OutOfMemoryError, StackOverflowError, CyclicInitializationError, _ExceptionImplementation, FormatException, IntegerDivisionByZeroException, Expando, Function, $int, Iterator, List, Null, num, Object, Match, StackTrace, Stopwatch, String, StringBuffer, Symbol, Uri__uriEncode_byteToHex, HtmlElement, _EntryArray, AnchorElement, ApplicationCacheErrorEvent, AreaElement, Blob, BodyElement, ButtonElement, CharacterData, CompositionEvent, CssStyleDeclaration, Interceptor_CssStyleDeclarationBase, CssStyleDeclarationBase, DeviceLightEvent, DirectoryEntry, DirectoryEntry__getDirectory_closure0, DirectoryEntry__getDirectory_closure, DirectoryEntry__getFile_closure0, DirectoryEntry__getFile_closure, DirectoryEntry_removeRecursively_closure, DirectoryEntry_removeRecursively_closure0, DirectoryReader, DirectoryReader_readEntries_closure, DirectoryReader_readEntries_closure0, DivElement, Document, DocumentFragment, DomError, DomException, DomRectReadOnly, DomSettableTokenList, DomTokenList, Element, EmbedElement, Entry, Entry_getMetadata_closure, Entry_getMetadata_closure0, Entry_getParent_closure, Entry_getParent_closure0, Entry_remove_closure, Entry_remove_closure0, ErrorEvent, Event, EventTarget, FieldSetElement, File, FileEntry, FileEntry_createWriter_closure, FileEntry_createWriter_closure0, FileEntry_file_closure, FileEntry_file_closure0, FileError, FileReader, FileSystem, FileWriter, FormElement, HttpRequest, HttpRequestEventTarget, IFrameElement, ImageData, InputElement, KeyboardEvent, KeygenElement, LIElement, LinkElement, MapElement, MediaElement, MediaKeyEvent, MediaKeyMessageEvent, MenuElement, MenuItemElement, MessageEvent, MetaElement, Metadata, MeterElement, MidiMessageEvent, MouseEvent, Navigator, NavigatorUserMediaError, Node, NodeList, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, OListElement, ObjectElement, OptionElement, OutputElement, ParamElement, PluginPlaceholderElement, PositionError, ProgressElement, ProgressEvent, PushEvent, ScriptElement, SelectElement, SourceElement, SpeechRecognitionError, SpeechSynthesisEvent, StyleElement, TextAreaElement, TextEvent, UIEvent, Window, Window__requestFileSystem_closure, Window__requestFileSystem_closure0, Window_resolveLocalFileSystemUrl_closure, Window_resolveLocalFileSystemUrl_closure0, _Attr, _ClientRect, _DocumentType, _DomRect, _HTMLFrameSetElement, _NamedNodeMap, Interceptor_ListMixin0, Interceptor_ListMixin_ImmutableListMixin0, _ElementCssClassSet, _EventStream, _ElementEventStreamImpl, _EventStreamSubscription, ImmutableListMixin, FixedSizeListIterator, _DOMWindowCrossFrame, KeyRange, AElement, AltGlyphElement, AnimationElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEFloodElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GeometryElement, GraphicsElement, ImageElement0, MarkerElement, MaskElement, PatternElement, RectElement, ScriptElement0, StyleElement0, _AttributeClassSet, SvgElement, SvgSvgElement, SymbolElement, TextContentElement, TextPathElement, TextPositioningElement, UseElement, ViewElement, _GradientElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGGlyphRefElement, _SVGMPathElement, SqlError, Capability, JsObject, JsObject__convertDataTree__convert, JsFunction, JsArray, JsObject_ListMixin, _convertToJS_closure, _convertToJS_closure0, _wrapToDart_closure, _wrapToDart_closure0, _wrapToDart_closure1, _JSRandom, Point0, _RectangleBase, Rectangle, NativeByteBuffer, NativeTypedData, NativeByteData, NativeTypedArray, NativeTypedArrayOfDouble, NativeTypedArray_ListMixin, NativeTypedArray_ListMixin_FixedLengthListMixin, NativeTypedArrayOfInt, NativeTypedArray_ListMixin0, NativeTypedArray_ListMixin_FixedLengthListMixin0, NativeFloat32List, NativeFloat64List, NativeInt16List, NativeInt32List, NativeInt8List, NativeUint16List, NativeUint32List, NativeUint8ClampedList, NativeUint8List, Clone, Clone__clone_closure, Clone__clone__closure, Clone__clone___closure, Clone_startClone_closure, Clone_startClone__closure, Clone_startClone___closure, Clone_startClone____closure, Clone_startClone_____closure, Clone_startClone___closure0, Clone__cleanup_closure, Clone__cleanup__closure, Clone__createCurrentTreeFromPack_closure, Clone__checkDirectory_closure, Clone__checkDirectory__closure, Clone__checkDirectory___closure, Clone__checkDirectory____closure, Clone__processClone_closure, Clone__processClone__closure, Clone__processClone___closure, Clone__processClone____closure, Clone__processClone_____closure, Clone__createHeadAndRef_closure, Clone__callMethod_closure, CloneCancel, Index, Index__writeIndex_closure, Index__writeIndex__closure, Index__scheduleWriteIndex_closure, Index__scheduleWriteIndex__closure, Index_statusIdxToMap_closure, FileStatus, GitLocation, GitLocation_init_closure, GitLocation_init__closure, GitLocation_init___closure0, GitLocation_init____closure, GitLocation_init__closure0, GitLocation_init___closure, GitLocation_init_closure0, GitLocation__safeDelete_closure, Config, GitException, FastSha, FileOps_createDirectoryRecursive_createDirectories, FileOps_createDirectoryRecursive_createDirectories_closure, FileOps_createFileWithContent_closure, FileOps_readBlob_closure, FileOps_readBlob_closure0, FileOps__createFile_closure, FileOps__createFile__closure1, FileOps__createFile__closure2, FileOps__createFile__closure, FileOps__createFile__closure0, FileOps__writeBlob_closure, FileOps__writeBlob__closure, HttpFetcher, HttpFetcher_fetchRef_closure, HttpFetcher_fetchRef__closure, HttpFetcher_fetchRef__closure0, HttpFetcher_fetchRef_closure0, HttpFetcher_fetchRef_closure1, HttpFetcher__queryParams_closure, HttpFetcher__doGet_closure, HttpFetcher__doGet_closure0, HttpFetcher__doGet_closure1, HttpFetcher_isValidRepoUrl_closure, HttpFetcher_isValidRepoUrl_closure0, HttpFetcher__makeUri_closure, HttpFetcher__refWantRequst_closure, HttpFetcher__fetchRefs_closure, HttpFetcher__fetchRefs__closure, HttpGitException, GitObject, TreeEntry, ParseError, TreeObject, TreeObject__parse_closure, BlobObject, Author, CommitObject, TagObject, LooseObject, PackedObject, ObjectUtils_expandBlob_closure, ObjectUtils_expandBlob__closure, ObjectUtils_expandBlob___closure, ObjectUtils_expandTree_closure, ObjectUtils_expandTree__closure, ObjectUtils_expandTree___closure, GitRef, PackEntry, FindPackedObjectResult, ObjectStore, ObjectStore_clearRemoteRefs_closure, ObjectStore_clearRemoteRefs_closure0, ObjectStore_writeRemoteRefs_closure, ObjectStore_writeRemoteRefs__closure, ObjectStore_retrieveObject_closure, ObjectStore_retrieveRawObject_closure, ObjectStore_retrieveRawObject__closure0, ObjectStore_retrieveRawObject___closure0, ObjectStore_retrieveRawObject_closure0, ObjectStore_retrieveRawObject__closure, ObjectStore_retrieveRawObject___closure, GitOptions, PackObjectHeader, Pack, Pack__matchNumberOfObjects_closure, Pack_findDeltaBaseOffset_closure, Pack_expandDeltifiedObject_doExpand, Pack_expandDeltifiedObject_closure, Pack__matchObjectData_closure, Pack_parseAll_parse, Pack_parseAll_expandDeltified, Pack_parseAll_expandDeltified_closure, Pack_parseAll_closure, Pack_applyDelta_matchLength, Pack_createPackFiles_closure, Pack_createPackFiles__closure, Pack_createPackFiles___closure, DeltaDataStream, PackIndex, PackIndex_writePackIndex_closure, PackIndex_writePackIndex_closure0, PackIndex_writePackIndex_closure1, PackIndex_writePackIndex_closure2, PackIndex_writePackIndex_closure3, PktLine, PackParseResult, UploadPackParser, UploadPackParser_parse_closure, UploadPackParser_parse__closure, Cancel, ZlibResult, HetimaBuilder, HetimaFile, HetimaReadBuffer, ReadResult, HetimaFileToBuilder, HetimaFileToBuilder_getByteFuture_closure, HetimaFileToBuilder_getByteFuture_closure0, HetimaFileBlob, HetimaFileBlob_read_closure, HetimaFileBlob_read_closure0, HetimaFileBlob_read_closure1, main_closure, main_closure0, main_closure1, main_closure2, main__closure, onClickClone_closure, onClickClone__closure, getRoot_closure, updateList_closure, select_closure, select_closure0, select__closure, select__closure0, select__closure1, Tab, Tab_init_closure, enableAutocomplete_closure, HetiEntry, HetiDirectory, HetiDirectory_getParent_closure, HetiDirectory_getList_closure, HetiFile, HetiFile_getHetimaBuilder_closure, HetiFile_getHetimaBuilder_closure0, HetiFileSystem, HetiFileSystem_getFileSystem_closure, HetiFileSystem_getFileSystem_closure0, convertDartToNative_Dictionary_closure, convertNativeToDart_AcceptStructuredClone_findSlot, convertNativeToDart_AcceptStructuredClone_readSlot, convertNativeToDart_AcceptStructuredClone_writeSlot, convertNativeToDart_AcceptStructuredClone_walk, CssClassSetImpl, CssClassSetImpl_add_closure, NumberFormat, NumberFormat$decimalPattern_closure, _NumberFormatParser, _StringIterable, _StringIterator, Logger, Logger_Logger_closure, Level, LogRecord, NumberSymbols, getLocalDataRoot_closure, getLocalDataDir_closure, getLocalDataDir__closure, PrintProfiler, FutureHelper_forEachNonBlockingUI_nextElement, FutureHelper_forEachNonBlockingUI_nextElement_closure, FutureHelper_forEachNonBlockingUI_nextElement__closure, ListRange, _ListRangeIteratorImpl, Utf16CodeUnitDecoder];
};
;
setupProgram(dart);
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return J.getInterceptor$n(receiver).$and(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$ns(receiver).$mul(receiver, a0);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$tdiv$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
J.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return J.getInterceptor$n(receiver).$xor(receiver, a0);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.codeUnitAt$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createDirectory$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).createDirectory$1(receiver, a0);
};
J.createFile$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).createFile$1(receiver, a0);
};
J.createReader$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createReader$0(receiver);
};
J.createWriter$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createWriter$0(receiver);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.endsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$_children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_children(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$data$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$data(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$first$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$first(receiver);
};
J.get$fullPath$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$fullPath(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$index$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$index(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isFile$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isFile(receiver);
};
J.get$isNegative$n = function(receiver) {
  return J.getInterceptor$n(receiver).get$isNegative(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$keyCode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$keyCode(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$message$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$message(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$offset$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$offset(receiver);
};
J.get$onClick$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onClick(receiver);
};
J.get$onKeyDown$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onKeyDown(receiver);
};
J.get$parent$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parent(receiver);
};
J.get$result$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$result(receiver);
};
J.get$root$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$root(receiver);
};
J.get$size$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$size(receiver);
};
J.get$status$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$status(receiver);
};
J.get$topLeft$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$topLeft(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.getBoundingClientRect$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
J.getDirectory$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getDirectory$1(receiver, a0);
};
J.getFile$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getFile$1(receiver, a0);
};
J.getMetadata$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getMetadata$0(receiver);
};
J.getParent$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getParent$0(receiver);
};
J.indexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.noSuchMethod$1 = function(receiver, a0) {
  return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.removeRecursively$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).removeRecursively$0(receiver);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.replaceFirst$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceFirst$2(receiver, a0, a1);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$data$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$data(receiver, value);
};
J.set$url$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$url(receiver, value);
};
J.slice$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).slice$2(receiver, a0, a1);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.sublist$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
J.sublist$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.substring$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toRadixString$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.toUrl$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).toUrl$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
Isolate.makeConstantList = function(list) {
  list.immutable$list = Array;
  list.fixed$length = Array;
  return list;
};
;
C.DirectoryReader_methods = W.DirectoryReader.prototype;
C.FileEntry_methods = W.FileEntry.prototype;
C.FileReader_methods = W.FileReader.prototype;
C.HttpRequest_methods = W.HttpRequest.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.NativeByteBuffer_methods = H.NativeByteBuffer.prototype;
C.NativeUint8List_methods = H.NativeUint8List.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.Window_methods = W.Window.prototype;
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C_EmptyIterable = new H.EmptyIterable();
C.C_EmptyIterator = new H.EmptyIterator();
C.C_OutOfMemoryError = new P.OutOfMemoryError();
C.C__DelayedDone = new P._DelayedDone();
C.C__JSRandom = new P._JSRandom();
C.C__ProxyImplementation = new B._ProxyImplementation();
C.C__RootZone = new P._RootZone();
C.Completion_EGO = new E.Completion("answer", "<answer></answer>", 42, "snarf");
C.Duration_0 = new P.Duration(0);
C.Duration_2000000 = new P.Duration(2000000);
C.HtmlEscapeMode_p2v = new P.HtmlEscapeMode("unknown", true, true, true, true);
C.HtmlEscape_gsm = new P.HtmlEscape(C.HtmlEscapeMode_p2v);
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_gkc = function() {
  function typeNameInChrome(o) {
    var constructor = o.constructor;
    if (constructor) {
      var name = constructor.name;
      if (name) return name;
    }
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_gkc0 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
C.JS_CONST_s8I = function(_, letter) { return letter.toUpperCase(); };
C.JsonCodec_null_null = new P.JsonCodec(null, null);
C.JsonEncoder_null_null = new P.JsonEncoder(null, null);
C.Level_INFO_800 = new N.Level("INFO", 800);
C.Level_OFF_2000 = new N.Level("OFF", 2000);
C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(Isolate.makeConstantList([127, 2047, 65535, 1114111]), [P.$int]);
C.List_2Bc = Isolate.makeConstantList([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8]);
C.List_B8J = Isolate.makeConstantList([0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117]);
C.List_X3d = Isolate.makeConstantList([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]);
C.List_X3d0 = Isolate.makeConstantList([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
C.List_eea = Isolate.makeConstantList([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);
C.List_empty = Isolate.makeConstantList([]);
C.List_i3t = Isolate.makeConstantList([1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577]);
C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
C.List_qQn = Isolate.makeConstantList([3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258]);
C.List_uSC = Isolate.makeConstantList([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
C.List_iQy = Isolate.makeConstantList(["af", "am", "ar", "az", "bg", "bn", "br", "ca", "chr", "cs", "cy", "da", "de", "de_AT", "de_CH", "el", "en", "en_AU", "en_GB", "en_IE", "en_IN", "en_SG", "en_US", "en_ZA", "es", "es_419", "es_ES", "et", "eu", "fa", "fi", "fil", "fr", "fr_CA", "ga", "gl", "gsw", "gu", "haw", "he", "hi", "hr", "hu", "hy", "id", "in", "is", "it", "iw", "ja", "ka", "kk", "km", "kn", "ko", "ky", "ln", "lo", "lt", "lv", "mk", "ml", "mn", "mr", "ms", "mt", "my", "nb", "ne", "nl", "no", "no_NO", "or", "pa", "pl", "pt", "pt_BR", "pt_PT", "ro", "ru", "si", "sk", "sl", "sq", "sr", "sv", "sw", "ta", "te", "th", "tl", "tr", "uk", "ur", "uz", "vi", "zh", "zh_CN", "zh_HK", "zh_TW", "zu"]);
C.NumberSymbols_w0x = new B.NumberSymbols("af", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "ZAR");
C.NumberSymbols_TV6 = new B.NumberSymbols("am", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "ETB");
C.NumberSymbols_xU4 = new B.NumberSymbols("ar", "\u066b", "\u066c", "\u066a", "\u0660", "\u200f+", "\u200f-", "\u0627\u0633", "\u0609", "\u221e", "\u0644\u064a\u0633\u00a0\u0631\u0642\u0645", "#,##0.###", "#E0", "#,##0%", "\u00a4\u00a0#,##0.00", "EGP");
C.NumberSymbols_WjS = new B.NumberSymbols("az", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4\u00a0#,##0.00", "AZN");
C.NumberSymbols_zDH = new B.NumberSymbols("bg", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "BGN");
C.NumberSymbols_Erq = new B.NumberSymbols("bn", ".", ",", "%", "\u09e6", "+", "-", "E", "\u2030", "\u221e", "\u09b8\u0982\u0996\u09cd\u09af\u09be\u00a0\u09a8\u09be", "#,##,##0.###", "#E0", "#,##,##0%", "#,##,##0.00\u00a4", "BDT");
C.NumberSymbols_wlp = new B.NumberSymbols("br", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4\u00a0#,##0.00", "EUR");
C.NumberSymbols_4QF = new B.NumberSymbols("ca", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_7FW = new B.NumberSymbols("chr", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "USD");
C.NumberSymbols_0VI = new B.NumberSymbols("cs", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "CZK");
C.NumberSymbols_TD4 = new B.NumberSymbols("cy", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "GBP");
C.NumberSymbols_4qm = new B.NumberSymbols("da", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "DKK");
C.NumberSymbols_Hpd = new B.NumberSymbols("de", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_ifL = new B.NumberSymbols("de_AT", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "\u00a4\u00a0#,##0.00", "EUR");
C.NumberSymbols_8Gl = new B.NumberSymbols("de_CH", ".", "'", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "\u00a4\u00a0#,##0.00;\u00a4-#,##0.00", "CHF");
C.NumberSymbols_Gbg = new B.NumberSymbols("el", ",", ".", "%", "0", "+", "-", "e", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_yfz = new B.NumberSymbols("en", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "USD");
C.NumberSymbols_4QF0 = new B.NumberSymbols("en_AU", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "AUD");
C.NumberSymbols_ly0 = new B.NumberSymbols("en_GB", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "GBP");
C.NumberSymbols_Ak1 = new B.NumberSymbols("en_IE", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "EUR");
C.NumberSymbols_hyR = new B.NumberSymbols("en_IN", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##,##0.###", "#E0", "#,##,##0%", "\u00a4\u00a0#,##,##0.00", "INR");
C.NumberSymbols_c0u = new B.NumberSymbols("en_SG", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "SGD");
C.NumberSymbols_8aB = new B.NumberSymbols("en_US", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "USD");
C.NumberSymbols_CTe = new B.NumberSymbols("en_ZA", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "ZAR");
C.NumberSymbols_ME0 = new B.NumberSymbols("es", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_HIk = new B.NumberSymbols("es_419", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "MXN");
C.NumberSymbols_86y = new B.NumberSymbols("es_ES", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_Avr = new B.NumberSymbols("et", ",", "\u00a0", "%", "0", "+", "-", "\u00d710^", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_wEo = new B.NumberSymbols("eu", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "%\u00a0#,##0", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_JrP = new B.NumberSymbols("fa", "\u066b", "\u066c", "\u066a", "\u06f0", "\u200e+\u200e", "\u200e\u2212", "\u00d7\u06f1\u06f0^", "\u0609", "\u221e", "\u0646\u0627\u0639\u062f\u062f", "#,##0.###", "#E0", "#,##0%", "\u200e\u00a4#,##0.00", "IRR");
C.NumberSymbols_hfo = new B.NumberSymbols("fi", ",", "\u00a0", "%", "0", "+", "\u2212", "E", "\u2030", "\u221e", "ep\u00e4luku", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_c9P = new B.NumberSymbols("fil", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "PHP");
C.NumberSymbols_rVS = new B.NumberSymbols("fr", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_IAZ = new B.NumberSymbols("fr_CA", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "CAD");
C.NumberSymbols_ww8 = new B.NumberSymbols("ga", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "EUR");
C.NumberSymbols_Svw = new B.NumberSymbols("gl", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "EUR");
C.NumberSymbols_m8F = new B.NumberSymbols("gsw", ".", "\u2019", "%", "0", "+", "\u2212", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "CHF");
C.NumberSymbols_3Vk = new B.NumberSymbols("gu", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##,##0.###", "#E0", "#,##,##0%", "\u00a4#,##,##0.00", "INR");
C.NumberSymbols_ww80 = new B.NumberSymbols("haw", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "USD");
C.NumberSymbols_JAZ = new B.NumberSymbols("he", ".", ",", "%", "0", "\u200e+", "\u200e-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "ILS");
C.NumberSymbols_MMc = new B.NumberSymbols("hi", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##,##0.###", "#E0", "#,##,##0%", "\u00a4#,##,##0.00", "INR");
C.NumberSymbols_aAj = new B.NumberSymbols("hr", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "HRK");
C.NumberSymbols_yXb = new B.NumberSymbols("hu", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "HUF");
C.NumberSymbols_79g = new B.NumberSymbols("hy", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#0.###", "#E0", "#0%", "#0.00\u00a0\u00a4", "AMD");
C.NumberSymbols_wEo0 = new B.NumberSymbols("id", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "IDR");
C.NumberSymbols_oGx = new B.NumberSymbols("in", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "IDR");
C.NumberSymbols_sBE = new B.NumberSymbols("is", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "ISK");
C.NumberSymbols_o5K = new B.NumberSymbols("it", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_Cu4 = new B.NumberSymbols("iw", ".", ",", "%", "0", "\u200e+", "\u200e-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "ILS");
C.NumberSymbols_sgl = new B.NumberSymbols("ja", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "JPY");
C.NumberSymbols_KE7 = new B.NumberSymbols("ka", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "\u10d0\u10e0\u00a0\u10d0\u10e0\u10d8\u10e1\u00a0\u10e0\u10d8\u10ea\u10ee\u10d5\u10d8", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "GEL");
C.NumberSymbols_e88 = new B.NumberSymbols("kk", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "KZT");
C.NumberSymbols_Qqm = new B.NumberSymbols("km", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "KHR");
C.NumberSymbols_KAC = new B.NumberSymbols("kn", ".", ",", "%", "0", "+", "-", "\u0c88", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "INR");
C.NumberSymbols_CrG = new B.NumberSymbols("ko", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "KRW");
C.NumberSymbols_Vq4 = new B.NumberSymbols("ky", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "\u0441\u0430\u043d\u00a0\u044d\u043c\u0435\u0441", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "KGS");
C.NumberSymbols_uzY = new B.NumberSymbols("ln", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "CDF");
C.NumberSymbols_3uu = new B.NumberSymbols("lo", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "\u0e9a\u0ecd\u0ec8\u0ec1\u0ea1\u0ec8\u0e99\u0ec2\u0e95\u0ec0\u0ea5\u0e81", "#,##0.###", "#", "#,##0%", "\u00a4#,##0.00;\u00a4-#,##0.00", "LAK");
C.NumberSymbols_U49 = new B.NumberSymbols("lt", ",", "\u00a0", "%", "0", "+", "\u2212", "\u00d710^", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "LTL");
C.NumberSymbols_qFQ = new B.NumberSymbols("lv", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "nav\u00a0skaitlis", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "EUR");
C.NumberSymbols_uG6 = new B.NumberSymbols("mk", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4\u00a0#,##0.00", "MKD");
C.NumberSymbols_o8I = new B.NumberSymbols("ml", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##,##0.###", "#E0", "#,##,##0%", "#,##,##0.00\u00a4", "INR");
C.NumberSymbols_gsm = new B.NumberSymbols("mn", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4\u00a0#,##0.00", "MNT");
C.NumberSymbols_Cbk = new B.NumberSymbols("mr", ".", ",", "%", "\u0966", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "[#E0]", "#,##0%", "\u00a4#,##0.00", "INR");
C.NumberSymbols_s2l = new B.NumberSymbols("ms", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "MYR");
C.NumberSymbols_Yzz = new B.NumberSymbols("mt", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "EUR");
C.NumberSymbols_bpf = new B.NumberSymbols("my", ".", ",", "%", "\u1040", "+", "-", "E", "\u2030", "\u221e", "\u1002\u100f\u1014\u103a\u1038\u1019\u101f\u102f\u1010\u103a\u101e\u1031\u102c", "#,##0.###", "#E0", "#,##0%", "\u00a4\u00a0#,##0.00", "MMK");
C.NumberSymbols_EOZ = new B.NumberSymbols("nb", ",", "\u00a0", "%", "0", "+", "\u2212", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "\u00a4\u00a0#,##0.00", "NOK");
C.NumberSymbols_EWG = new B.NumberSymbols("ne", ".", ",", "%", "\u0966", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "NPR");
C.NumberSymbols_IiW = new B.NumberSymbols("nl", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4\u00a0#,##0.00;\u00a4\u00a0#,##0.00-", "EUR");
C.NumberSymbols_0 = new B.NumberSymbols("no", ",", "\u00a0", "%", "0", "+", "\u2212", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "\u00a4\u00a0#,##0.00", "NOK");
C.NumberSymbols_UAT = new B.NumberSymbols("no_NO", ",", "\u00a0", "%", "0", "+", "\u2212", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "\u00a4\u00a0#,##0.00", "NOK");
C.NumberSymbols_iGE = new B.NumberSymbols("or", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##,##0.###", "#E0", "#,##,##0%", "\u00a4\u00a0#,##,##0.00", "INR");
C.NumberSymbols_3x0 = new B.NumberSymbols("pa", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##,##0.###", "#E0", "#,##,##0%", "\u00a4#,##,##0.00", "INR");
C.NumberSymbols_gkc = new B.NumberSymbols("pl", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "PLN");
C.NumberSymbols_o7e = new B.NumberSymbols("pt", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "BRL");
C.NumberSymbols_y6D = new B.NumberSymbols("pt_BR", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "BRL");
C.NumberSymbols_XJC = new B.NumberSymbols("pt_PT", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_9a2 = new B.NumberSymbols("ro", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "RON");
C.NumberSymbols_RWw = new B.NumberSymbols("ru", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "\u043d\u0435\u00a0\u0447\u0438\u0441\u043b\u043e", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "RUB");
C.NumberSymbols_PGx = new B.NumberSymbols("si", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "LKR");
C.NumberSymbols_4DV = new B.NumberSymbols("sk", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_knt = new B.NumberSymbols("sl", ",", ".", "%", "0", "+", "-", "e", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "EUR");
C.NumberSymbols_v33 = new B.NumberSymbols("sq", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "ALL");
C.NumberSymbols_TAS = new B.NumberSymbols("sr", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "RSD");
C.NumberSymbols_Ooj = new B.NumberSymbols("sv", ",", "\u00a0", "%", "0", "+", "\u2212", "\u00d710^", "\u2030", "\u221e", "\u00a4\u00a4\u00a4", "#,##0.###", "#E0", "#,##0\u00a0%", "#,##0.00\u00a0\u00a4", "SEK");
C.NumberSymbols_a1A = new B.NumberSymbols("sw", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "TZS");
C.NumberSymbols_ACG = new B.NumberSymbols("ta", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##,##0.###", "#E0", "#,##,##0%", "\u00a4\u00a0#,##,##0.00", "INR");
C.NumberSymbols_tl2 = new B.NumberSymbols("te", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "INR");
C.NumberSymbols_HYS = new B.NumberSymbols("th", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "THB");
C.NumberSymbols_iTd = new B.NumberSymbols("tl", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "PHP");
C.NumberSymbols_c9P0 = new B.NumberSymbols("tr", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "%#,##0", "#,##0.00\u00a0\u00a4", "TRY");
C.NumberSymbols_fyC = new B.NumberSymbols("uk", ",", "\u00a0", "%", "0", "+", "-", "\u0415", "\u2030", "\u221e", "\u041d\u0435\u00a0\u0447\u0438\u0441\u043b\u043e", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "UAH");
C.NumberSymbols_xgo = new B.NumberSymbols("ur", ".", ",", "%", "0", "\u200e+", "\u200e-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00\u200e", "PKR");
C.NumberSymbols_2ru = new B.NumberSymbols("uz", ",", "\u00a0", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4\u00a0#,##0.00", "UZS");
C.NumberSymbols_sUZ = new B.NumberSymbols("vi", ",", ".", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "#,##0.00\u00a0\u00a4", "VND");
C.NumberSymbols_777 = new B.NumberSymbols("zh", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4\u00a0#,##0.00", "CNY");
C.NumberSymbols_6Zu = new B.NumberSymbols("zh_CN", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4\u00a0#,##0.00", "CNY");
C.NumberSymbols_mt1 = new B.NumberSymbols("zh_HK", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "\u975e\u6578\u503c", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "HKD");
C.NumberSymbols_uwZ = new B.NumberSymbols("zh_TW", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "\u975e\u6578\u503c", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "TWD");
C.NumberSymbols_gK9 = new B.NumberSymbols("zu", ".", ",", "%", "0", "+", "-", "E", "\u2030", "\u221e", "I-NaN", "#,##0.###", "#E0", "#,##0%", "\u00a4#,##0.00", "ZAR");
C.Map_iQJvD = new H.ConstantStringMap(101, {af: C.NumberSymbols_w0x, am: C.NumberSymbols_TV6, ar: C.NumberSymbols_xU4, az: C.NumberSymbols_WjS, bg: C.NumberSymbols_zDH, bn: C.NumberSymbols_Erq, br: C.NumberSymbols_wlp, ca: C.NumberSymbols_4QF, chr: C.NumberSymbols_7FW, cs: C.NumberSymbols_0VI, cy: C.NumberSymbols_TD4, da: C.NumberSymbols_4qm, de: C.NumberSymbols_Hpd, de_AT: C.NumberSymbols_ifL, de_CH: C.NumberSymbols_8Gl, el: C.NumberSymbols_Gbg, en: C.NumberSymbols_yfz, en_AU: C.NumberSymbols_4QF0, en_GB: C.NumberSymbols_ly0, en_IE: C.NumberSymbols_Ak1, en_IN: C.NumberSymbols_hyR, en_SG: C.NumberSymbols_c0u, en_US: C.NumberSymbols_8aB, en_ZA: C.NumberSymbols_CTe, es: C.NumberSymbols_ME0, es_419: C.NumberSymbols_HIk, es_ES: C.NumberSymbols_86y, et: C.NumberSymbols_Avr, eu: C.NumberSymbols_wEo, fa: C.NumberSymbols_JrP, fi: C.NumberSymbols_hfo, fil: C.NumberSymbols_c9P, fr: C.NumberSymbols_rVS, fr_CA: C.NumberSymbols_IAZ, ga: C.NumberSymbols_ww8, gl: C.NumberSymbols_Svw, gsw: C.NumberSymbols_m8F, gu: C.NumberSymbols_3Vk, haw: C.NumberSymbols_ww80, he: C.NumberSymbols_JAZ, hi: C.NumberSymbols_MMc, hr: C.NumberSymbols_aAj, hu: C.NumberSymbols_yXb, hy: C.NumberSymbols_79g, id: C.NumberSymbols_wEo0, in: C.NumberSymbols_oGx, is: C.NumberSymbols_sBE, it: C.NumberSymbols_o5K, iw: C.NumberSymbols_Cu4, ja: C.NumberSymbols_sgl, ka: C.NumberSymbols_KE7, kk: C.NumberSymbols_e88, km: C.NumberSymbols_Qqm, kn: C.NumberSymbols_KAC, ko: C.NumberSymbols_CrG, ky: C.NumberSymbols_Vq4, ln: C.NumberSymbols_uzY, lo: C.NumberSymbols_3uu, lt: C.NumberSymbols_U49, lv: C.NumberSymbols_qFQ, mk: C.NumberSymbols_uG6, ml: C.NumberSymbols_o8I, mn: C.NumberSymbols_gsm, mr: C.NumberSymbols_Cbk, ms: C.NumberSymbols_s2l, mt: C.NumberSymbols_Yzz, my: C.NumberSymbols_bpf, nb: C.NumberSymbols_EOZ, ne: C.NumberSymbols_EWG, nl: C.NumberSymbols_IiW, no: C.NumberSymbols_0, no_NO: C.NumberSymbols_UAT, or: C.NumberSymbols_iGE, pa: C.NumberSymbols_3x0, pl: C.NumberSymbols_gkc, pt: C.NumberSymbols_o7e, pt_BR: C.NumberSymbols_y6D, pt_PT: C.NumberSymbols_XJC, ro: C.NumberSymbols_9a2, ru: C.NumberSymbols_RWw, si: C.NumberSymbols_PGx, sk: C.NumberSymbols_4DV, sl: C.NumberSymbols_knt, sq: C.NumberSymbols_v33, sr: C.NumberSymbols_TAS, sv: C.NumberSymbols_Ooj, sw: C.NumberSymbols_a1A, ta: C.NumberSymbols_ACG, te: C.NumberSymbols_tl2, th: C.NumberSymbols_HYS, tl: C.NumberSymbols_iTd, tr: C.NumberSymbols_c9P0, uk: C.NumberSymbols_fyC, ur: C.NumberSymbols_xgo, uz: C.NumberSymbols_2ru, vi: C.NumberSymbols_sUZ, zh: C.NumberSymbols_777, zh_CN: C.NumberSymbols_6Zu, zh_HK: C.NumberSymbols_mt1, zh_TW: C.NumberSymbols_uwZ, zu: C.NumberSymbols_gK9}, C.List_iQy);
C.Symbol_call = new H.Symbol0("call");
C.Type_6L0 = H.createRuntimeType('Uint8List');
C.Type_Art = H.createRuntimeType('Float32List');
C.Type_CAk = H.createRuntimeType('Uint16List');
C.Type_Ejg = H.createRuntimeType('String');
C.Type_EsU = H.createRuntimeType('bool');
C.Type_QuW = H.createRuntimeType('Uint8ClampedList');
C.Type_SnA = H.createRuntimeType('$int');
C.Type_UoK = H.createRuntimeType('Int16List');
C.Type_XXD = H.createRuntimeType('JSObject');
C.Type_ckn = H.createRuntimeType('Float64List');
C.Type_dTZ = H.createRuntimeType('Int32List');
C.Type_eZO = H.createRuntimeType('Null');
C.Type_irB = H.createRuntimeType('Uint32List');
C.Type_mp3 = H.createRuntimeType('Int8List');
C.Type_oGP = H.createRuntimeType('ByteData');
C.Type_qq1 = H.createRuntimeType('$double');
C.Type_wAg = H.createRuntimeType('ByteBuffer');
C.Type_xM7 = H.createRuntimeType('num');
C.Utf8Codec_false = new P.Utf8Codec(false);
{
  init.isHunkLoaded = function(hunkHash) {
    return !!$dart_deferred_initializers[hunkHash];
  };
  init.deferredInitialized = new Object(null);
  init.isHunkInitialized = function(hunkHash) {
    return init.deferredInitialized[hunkHash];
  };
  init.initializeLoadedHunk = function(hunkHash) {
    $dart_deferred_initializers[hunkHash](globalsHolder, $);
    init.deferredInitialized[hunkHash] = true;
  };
}
init.deferredLibraryUris = {};
init.deferredLibraryHashes = {};
$.IsolateNatives_enableSpawnWorker = null;
$.RawReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Primitives_timerFrequency = null;
$.Primitives_timerTicks = null;
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.implementation = null;
$.printToZone = null;
$._nextCallback = null;
$._lastCallback = null;
$._lastPriorityCallback = null;
$._isInCallbackLoop = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Stopwatch__frequency = null;
$.Permissions_FILE_NON_EXECUTABLE = "100644";
$.currentDir = null;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__isWebKit = null;
$.Device__cachedCssPrefix = null;
$.Intl__defaultLocale = null;
$.Intl_systemLocale = "en_US";
$.hierarchicalLoggingEnabled = false;
$.recordStackTraceAtLevel = C.Level_OFF_2000;
$._rootLevel = C.Level_INFO_800;
$.LogRecord__nextNumber = 0;
$.numberFormatSymbols = C.Map_iQJvD;
$._html5FSRoot = null;
(function(lazies) {
  var descriptorLength = 4;
  for (var i = 0; i < lazies.length; i += descriptorLength) {
    var fieldName = lazies[i];
    var getterName = lazies[i + 1];
    var lazyValue = lazies[i + 2];
    var staticName = lazies[i + 3];
    Isolate.$lazy(fieldName, getterName, lazyValue, staticName);
  }
})(["IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
}, "thisScript", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return H.setRuntimeTypeInfo(new P.Expando(null), [P.$int]);
}, "workerIds", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({toString: function() {
      return "$receiver$";
    }}));
}, "noSuchMethodPattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null, toString: function() {
      return "$receiver$";
    }}));
}, "notClosurePattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
}, "nullCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      null.$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }
  }());
}, "nullLiteralCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
}, "undefinedCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      (void 0).$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }
  }());
}, "undefinedLiteralCallPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
}, "nullPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      null.$method$;
    } catch (e) {
      return e.message;
    }
  }());
}, "nullLiteralPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
}, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      (void 0).$method$;
    } catch (e) {
      return e.message;
    }
  }());
}, "undefinedLiteralPropertyPattern", "_Object", "get$_Object", function() {
  return J.$index$asx(B._context(), "Object");
}, "_Object", "_AsyncRun_scheduleImmediateClosure", "get$_AsyncRun_scheduleImmediateClosure", function() {
  return P._AsyncRun__initializeScheduleImmediate();
}, "scheduleImmediateClosure", "IterableBase__toStringVisiting", "get$IterableBase__toStringVisiting", function() {
  return [];
}, "_toStringVisiting", "context", "get$context", function() {
  return P._wrapToDart(self);
}, "context", "_DART_OBJECT_PROPERTY_NAME", "get$_DART_OBJECT_PROPERTY_NAME", function() {
  return H.getIsolateAffinityTag("_$dart_dartObject");
}, "_DART_OBJECT_PROPERTY_NAME", "_DART_CLOSURE_PROPERTY_NAME", "get$_DART_CLOSURE_PROPERTY_NAME", function() {
  return H.getIsolateAffinityTag("_$dart_dartClosure");
}, "_DART_CLOSURE_PROPERTY_NAME", "_dartProxyCtor", "get$_dartProxyCtor", function() {
  return function DartObject(o) {
    this.o = o;
  };
}, "_dartProxyCtor", "logger", "get$logger", function() {
  return N.Logger_Logger("spark.git");
}, "logger", "editorFile", "get$editorFile", function() {
  return E.edit(W.querySelector("#editor-file"));
}, "editorFile", "editorNow", "get$editorNow", function() {
  return E.edit(W.querySelector("#editor-now"));
}, "editorNow", "tab", "get$tab", function() {
  return new K.Tab(P.LinkedHashMap_LinkedHashMap$_literal(["#m00_file", "#editor-file", "#m01_now", "#editor-now", "#m00_clone", "#com-clone"], null, null), null, P.StreamController_StreamController(null, null, null, null, false, P.String));
}, "tab", "CssClassSetImpl__validTokenRE", "get$CssClassSetImpl__validTokenRE", function() {
  return P.RegExp_RegExp("^\\S+$", true, false);
}, "_validTokenRE", "Logger__loggers", "get$Logger__loggers", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(P.String, N.Logger);
}, "_loggers", "_nf", "get$_nf", function() {
  return T.NumberFormat$decimalPattern(null);
}, "_nf"]);
;

init.metadata = ["invocation",
"object",
"sender",
"e",
"x",
"closure",
"isolate",
"numberOfArguments",
"arg1",
"arg2",
"arg3",
"arg4",
"each",
"c",
"proxy",
"module",
"editor",
"session",
"pos",
"prefix",
"callback",
"results",
"value",
,
"error",
"stackTrace",
"_",
"theError",
"theStackTrace",
"ignored",
"element",
"data",
"arg",
"a",
"captureThis",
"self",
"arguments",
"o",
"dir",
"store",
"headSha",
"gitDir",
"localHeadRef",
"fetcher",
"isValid",
"refs",
"ref",
"entries",
"commit",
"packDir",
"result",
"entry",
"d",
"event",
"domError",
"writer",
"wantRefs",
"haveRefs",
"shallow",
"depth",
"moreHaves",
"noCommon",
"progress",
"cancel",
"obj",
"key",
"sha",
"blob",
"tree",
"newDir",
"packed",
"expandedObject",
"byte",
"deltifiedObj",
"objectsDir",
"r",
"s",
"fs",
"l",
"b",
"length",
"f",
"fileSystem",
"root",
];
init.types = [{func: ""},
{func: "", void: true},
{func: "", args: [,]},
{func: "", args: [P.String,,]},
{func: "", args: [, P.String]},
{func: "", args: [P.String]},
{func: "", args: [,,]},
{func: "", args: [P.String], opt: [P.List]},
{func: "", args: [,,,, P.JsFunction]},
{func: "", args: [[P.List, E.Completion]]},
{func: "", args: [{func: "", void: true}]},
{func: "", void: true, args: [,,]},
{func: "", args: [P.Object]},
{func: "", args: [P.bool]},
{func: "", void: true, args: [P.Object], opt: [P.StackTrace]},
{func: "", void: true, args: [,], opt: [P.StackTrace]},
{func: "", args: [,], opt: [,]},
{func: "", ret: P.bool},
{func: "", void: true, args: [P.Function]},
{func: "", args: [, P.StackTrace]},
{func: "", void: true, args: [, P.StackTrace]},
{func: "", ret: P.$int, args: [, P.$int]},
{func: "", void: true, args: [P.$int, P.$int]},
{func: "", args: [P.Symbol,,]},
{func: "", ret: P.String, args: [P.$int]},
{func: "", ret: P.Future, args: [W.DirectoryEntry, S.ObjectStore, P.String]},
{func: "", ret: P.Future, args: [W.DirectoryEntry, S.GitRef, U.HttpFetcher]},
{func: "", args: [W.DirectoryEntry]},
{func: "", args: [[P.List, S.GitRef]]},
{func: "", args: [S.GitRef]},
{func: "", args: [W.Entry]},
{func: "", args: [P.List]},
{func: "", args: [R.PackParseResult]},
{func: "", args: [P.String, M.FileStatus]},
{func: "", args: [W.FileError]},
{func: "", args: [W.FileEntry]},
{func: "", args: [W.FileWriter]},
{func: "", ret: [P.Future, [P.List, S.GitRef]]},
{func: "", ret: [P.Future, R.PackParseResult], args: [[P.List, P.String], [P.List, P.String], P.String, P.$int, [P.List, P.String],, P.Function], opt: [V.Cancel]},
{func: "", args: [Z.TreeEntry, Z.TreeEntry]},
{func: "", args: [Z.BlobObject]},
{func: "", args: [Z.GitObject]},
{func: "", args: [Z.TreeEntry]},
{func: "", ret: P.Future, args: [[P.List, S.GitRef]]},
{func: "", args: [M.ChromeFileEntry]},
{func: "", args: [Z.ArrayBuffer]},
{func: "", args: [Z.PackedObject]},
{func: "", args: [P.String, P.String]},
{func: "", ret: Z.PackedObject, args: [Z.PackedObject, Z.PackedObject]},
{func: "", args: [P.$int]},
{func: "", ret: P.Future, args: [,]},
{func: "", ret: P.Future, args: [Z.PackedObject]},
{func: "", ret: P.$int, args: [R.DeltaDataStream]},
{func: "", args: [S.ReadResult]},
{func: "", args: [W.ProgressEvent]},
{func: "", args: [W.Event]},
{func: "", args: [W.MouseEvent]},
{func: "", args: [W.KeyboardEvent]},
{func: "", args: [U.HetiFileSystem]},
{func: "", args: [[P.List, U.HetiEntry]]},
{func: "", args: [U.HetiDirectory]},
{func: "", args: [L.HetimaBuilder]},
{func: "", args: [[P.List, P.$int]]},
{func: "", args: [,,,,]},
{func: "", args: [[P.List, W.Entry]]},
{func: "", args: [W.File]},
{func: "", args: [W.FileSystem]},
{func: "", ret: P.$int, args: [,]},
{func: "", args: [P.$int,,]},
{func: "", void: true, args: [,]},
{func: "", ret: P.num},
{func: "", ret: P.JsObject, args: [E.Completion]},
{func: "", void: true, args: [{func: "", void: true}]},
{func: "", ret: P.bool, args: [,,]},
{func: "", ret: P.Object, args: [,]},
{func: "", ret: P.$int, args: [P.Comparable, P.Comparable]},
{func: "", ret: P.bool, args: [P.Object, P.Object]},
{func: "", ret: P.$int, args: [P.Object]},
{func: "", ret: [P.Future, W.DirectoryEntry], args: [S.ObjectStore, R.PackParseResult]},
{func: "", ret: P.String, args: [P.String]},
{func: "", ret: P.bool, args: [,]},
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {
  }
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
;
function convertToSlowObject(properties) {
  properties.__MAGIC_SLOW_PROPERTY = 1;
  delete properties.__MAGIC_SLOW_PROPERTY;
  return properties;
}
;
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
function init() {
  Isolate.$isolateProperties = Object.create(null);
  init.allClasses = Object.create(null);
  init.getTypeFromName = function(name) {
    return init.allClasses[name];
  };
  init.interceptorsByTag = Object.create(null);
  init.leafTags = Object.create(null);
  init.finishedClasses = Object.create(null);
  Isolate.$lazy = function(fieldName, getterName, lazyValue, staticName, prototype) {
    if (!init.lazies)
      init.lazies = Object.create(null);
    init.lazies[fieldName] = getterName;
    prototype = prototype || Isolate.$isolateProperties;
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = this[fieldName];
      try {
        if (result === sentinelUndefined) {
          this[fieldName] = sentinelInProgress;
          try {
            result = this[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined)
              this[fieldName] = null;
          }
        } else
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName || fieldName);
        return result;
      } finally {
        this[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var staticNames = Object.keys(isolateProperties);
      for (var i = 0; i < staticNames.length; i++) {
        var staticName = staticNames[i];
        this[staticName] = isolateProperties[staticName];
      }
      var lazies = init.lazies;
      var lazyInitializers = lazies ? Object.keys(lazies) : [];
      for (var i = 0; i < lazyInitializers.length; i++)
        this[lazies[lazyInitializers[i]]] = null;
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
      for (var i = 0; i < lazyInitializers.length; i++) {
        var lazyInitName = lazies[lazyInitializers[i]];
        this[lazyInitName] = isolateProperties[lazyInitName];
      }
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
  init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
}();
;// BEGIN invoke [main].
(function(callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }
  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].removeEventListener("load", onLoad, false);
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i)
    scripts[i].addEventListener("load", onLoad, false);
})(function(currentScript) {
  init.currentScript = currentScript;
  if (typeof dartMainRunner === "function")
    dartMainRunner(function(a) {
      H.startRootIsolate(K.main$closure(), a);
    }, []);
  else
    (function(a) {
      H.startRootIsolate(K.main$closure(), a);
    })([]);
});
;
// END invoke [main].
})()

//# sourceMappingURL=hetimapad.dart.js.map
